CREATE PROCEDURE getarticlesinhierarchynodes @nodes VARCHAR(64), @delimiter CHAR, @type AS INT = 0
AS
BEGIN

-- @nodes IS A DELIMITED SET OF NODES eg 1,2,3,4,5 WHERE @delimiter = ','
-- THIS QUERY ATTEMPTS TO FIND THE INTERSECTION OF ARTICLES TAGGED TO THE GIVEN NODES. 

DECLARE @SELECT VARCHAR(4096)

--BUILD SELECT STATEMENT
SET @SELECT = 'SELECT  g.h2g2ID, g.Subject, g.DateCreated, g.LastUpdated, g.ExtraInfo, g.Status, g.Editor, g.Type 
				FROM HierarchyArticleMembers a WITH(NOLOCK)
				INNER JOIN GuideEntries g ON g.h2g2ID = a.h2g2ID AND g.status != 7 '
	
--Filter on Type if provided.			
IF ( @type > 0 )
	SET @SELECT = @SELECT + ' AND a.Type=' + CAST(@TYPE AS VARCHAR)
				
	
--BUILD INTERSECTION FROM @nodes.
DECLARE @INDEX INT
DECLARE @SUBSTR VARCHAR(64)

DECLARE @INTERSECTION VARCHAR(1024)
SET @INTERSECTION = ''

DECLARE @IN VARCHAR(256)
SET @IN = ' a.H2G2ID IN ( SELECT H2G2ID FROM HIERARCHYARTICLEMEMBERS WHERE NODEID ='

DECLARE @TOKEN VARCHAR(4)
SET @TOKEN = '%' + @delimiter + '%'

WHILE ( LEN(@nodes) <> 0 )
BEGIN
	SET @INDEX = PATINDEX(@TOKEN,@nodes)
	IF @INDEX = 0 
	BEGIN
		SET @INDEX = LEN(@nodes) + 1
	END

	SET @SUBSTR = SUBSTRING(@nodes,0,@INDEX)

	IF ( LEN(@INTERSECTION) = 0 )
		SET @INTERSECTION = ' WHERE NODEID=' + @SUBSTR
	ELSE
		SET @INTERSECTION = @INTERSECTION + @IN + @SUBSTR + ')'

	IF @INDEX < LEN(@nodes) + 1
		SET @INTERSECTION = @INTERSECTION + ' AND ' 

	SET @nodes = SUBSTRING(@nodes,@INDEX + 1,LEN(@nodes))
END

--EXECUTE DYNAMIC QUERY
SET @SELECT = @SELECT + @INTERSECTION
EXEC(@SELECT)

END