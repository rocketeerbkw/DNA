<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tests</name>
    </assembly>
    <members>
        <member name="T:Tests.ArticleListTests">
             <summary>
            ArticleList Tests
             </summary>
        </member>
        <member name="M:Tests.ArticleListTests.TestGetUndecidedRecommendationsArticleListTest">
            <summary>
            Test that we get the undecided recommended article list
            </summary>
        </member>
        <member name="T:Tests.AutoMod_ApplyNewModStatus">
            <summary>
            Tests for SP AutoMod_ApplyNewModStatus.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_ApplyNewModStatus.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_ApplyNewModStatus.AutoMod_ApplyNewModStatus_PremodWhenIntoPreModCountIsZero">
            <summary>
            Apply Premod status when IntoPreModCount is zero.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_ApplyNewModStatus.AutoMod_ApplyNewModStatus_PremodWhenIntoPreModCountIsOneBelowThreshold">
            <summary>
            Apply Premod status when IntoPreModCount is zero.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_ApplyNewModStatus.AutoMod_ApplyNewModStatus_Banned">
            <summary>
            Apply banned status.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_ApplyNewModStatus.AutoMod_ApplyNewModStatus_PostModWhenUserInPreMod">
            <summary>
            Apply postmod status.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_ApplyNewModStatus.AutoMod_ApplyNewModStatus_ReactiveWhenUserInPreMod">
            <summary>
            Apply reactive status.
            </summary>
        </member>
        <member name="T:Tests.AutoMod_CalcNewModStatusBasedOnZone">
            <summary>
            Tests for SP AutoMod_CalcNewModStatusBasedOnZone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcNewModStatusBasedOnZone.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcNewModStatusBasedOnZone.AutoMod_CalcNewModStatusBasedOnZone_Banned">
            <summary>
            Banned user.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcNewModStatusBasedOnZone.AutoMod_CalcNewModStatusBasedOnZone_Premod">
            <summary>
            Premod users.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcNewModStatusBasedOnZone.AutoMod_CalcNewModStatusBasedOnZone_BetweenPremodAndPostmod">
            <summary>
            We in the BetweenPostmodAndReactive zone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcNewModStatusBasedOnZone.AutoMod_CalcNewModStatusBasedOnZone_BetweenPostmodAndReactive">
            <summary>
            We in the BetweenPostmodAndReactive zone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcNewModStatusBasedOnZone.AutoMod_CalcNewModStatusBasedOnZone_Reactive">
            <summary>
            We in the reactive zone.
            </summary>
        </member>
        <member name="T:Tests.AutoMod_CalcTrustZone">
            <summary>
            Tests for SP AutoMod_CalcTrustZone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcTrustZone.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcTrustZone.AutoMod_CalcTrustZone_BannedZone">
            <summary>
            Are we in the banned zone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcTrustZone.AutoMod_CalcTrustZone_PremodZone">
            <summary>
            Are we in the premod zone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcTrustZone.AutoMod_CalcTrustZone_BetweenPremodAndPostmodZone">
            <summary>
            Are we in the BetweenPremodAndPostmod zone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcTrustZone.AutoMod_CalcTrustZone_BetweenPostmodAndReactiveZone">
            <summary>
            Are we in the BetweenPostmodAndReactive zone.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_CalcTrustZone.AutoMod_CalcTrustZone_ReactiveZone">
            <summary>
            Are we in the BetweenPostmodAndReactive zone.
            </summary>
        </member>
        <member name="T:Tests.AutoMod_SyncBannedAcrossSites">
            <summary>
            Tests for SP AutoMod_SyncBannedAcrossSites.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncBannedAcrossSites.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncBannedAcrossSites.AutoMod_SyncBannedAcrossSites_UsersMembershipsInPostMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in postmod.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncBannedAcrossSites.AutoMod_SyncBannedAcrossSites_UsersMembershipsInPreMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in premod.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncBannedAcrossSites.AutoMod_SyncBannedAcrossSites_UsersMembershipsInBanned">
            <summary>
            Syncing a ban when user's memberships elsewhere are in banned.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncBannedAcrossSites.AutoMod_SyncBannedAcrossSites_UsersMembershipsInReactive">
            <summary>
            Syncing a ban when user's memberships elsewhere are in reactive.
            </summary>
        </member>
        <member name="T:Tests.AutoMod_SyncPostmodAcrossSites">
            <summary>
            Tests for SP AutoMod_SyncPostmodAcrossSites.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPostmodAcrossSites.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPostmodAcrossSites.AutoMod_SyncPostmodAcrossSites_UsersMembershipsInPostMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in postmod.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPostmodAcrossSites.AutoMod_SyncPostmodAcrossSites_UsersMembershipsInPreMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in premod.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPostmodAcrossSites.AutoMod_SyncPostmodAcrossSites_UsersMembershipsInBanned">
            <summary>
            Syncing a ban when user's memberships elsewhere are in banned.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPostmodAcrossSites.AutoMod_SyncPostmodAcrossSites_UsersMembershipsInReactive">
            <summary>
            Syncing a ban when user's memberships elsewhere are in reactive.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPostmodAcrossSites.AutoMod_SyncPostmodAcrossSites_UsersMembershipsInBannedAndPreMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in reactive.
            </summary>
        </member>
        <member name="T:Tests.AutoMod_SyncPremodAcrossSites">
            <summary>
            Tests for SP AutoMod_SyncPremodAcrossSites.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPremodAcrossSites.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPremodAcrossSites.AutoMod_SyncPremodAcrossSites_UsersMembershipsInPostMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in postmod.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPremodAcrossSites.AutoMod_SyncPremodAcrossSites_UsersMembershipsInPreMod">
            <summary>
            Syncing a ban when user's memberships elsewhere are in premod.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPremodAcrossSites.AutoMod_SyncPremodAcrossSites_UsersMembershipsInBanned">
            <summary>
            Syncing a ban when user's memberships elsewhere are in banned.
            </summary>
        </member>
        <member name="M:Tests.AutoMod_SyncPremodAcrossSites.AutoMod_SyncPremodAcrossSites_UsersMembershipsInReactive">
            <summary>
            Syncing a ban when user's memberships elsewhere are in reactive.
            </summary>
        </member>
        <member name="T:Tests.AutoMod_UserHasPosted">
            <summary>
            Tests for SP AutoMod_UserHasPosted
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UserHasPosted.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UserHasPosted.AutoMod_UserHasPosted_Post">
            <summary>
            Post
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UserHasPosted.AutoMod_UserHasPosted_PostWhenAlmostInReactive">
            <summary>
            Post when in post mod about to go into reactive
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UserHasPosted.AutoMod_UserHasPosted_PostWhenAlmostInPostMod">
            <summary>
            Post when in premod about to go into postmod
            </summary>
        </member>
        <member name="T:Tests.AutoMod_UsersPostHasFailedModeration">
            <summary>
            Tests for SP AutoMod_UsersPostHasFailedModeration
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UsersPostHasFailedModeration.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UsersPostHasFailedModeration.AutoMod_UsersPostHasFailedModeration_FailWhenReactive">
            <summary>
            Fail when reactive
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UsersPostHasFailedModeration.AutoMod_UsersPostHasFailedModeration_FailWhenAboutToTouchPostModThreshold">
            <summary>
            FailWhenAboutToTouchPostModThreshold
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UsersPostHasFailedModeration.AutoMod_UsersPostHasFailedModeration_FailWhenAboutToPassPostModThreshold">
            <summary>
            FailWhenAboutToPassPostModThreshold
            </summary>
        </member>
        <member name="M:Tests.AutoMod_UsersPostHasFailedModeration.AutoMod_UsersPostHasFailedModeration_FailWhenAboutToGoIntoPreMod">
            <summary>
            FailWhenAboutToPassPostModThreshold
            </summary>
        </member>
        <member name="T:Tests.AutoSinBinUserTests">
            <summary>
            This class tests that the database handles users who are in premod or autosinbin
            </summary>
        </member>
        <member name="M:Tests.AutoSinBinUserTests.TestAutoSinBinUsersPostsArePreModdedUsingCreateComment">
            <summary>
            Test to make sure that a user in auto sin bin gets their posts modded and that when the post count threshhold
            is reached, they are taken out of the bin
            </summary>
        </member>
        <member name="M:Tests.AutoSinBinUserTests.TestAutoSinBinUsersPostsArePreModdedUsingCreateArticle">
            <summary>
            Test to make sure that a user in auto sin bin gets their articles modded and that when the post count threshhold
            is reached, they are taken out of the bin
            </summary>
        </member>
        <member name="M:Tests.AutoSinBinUserTests.CreateUserInDatabase(BBC.Dna.IInputContext,System.Int32)">
            <summary>
            Helper method for creating a new user in the database
            </summary>
            <param name="context">The context in which to create the data reader</param>
            <param name="autoSinBinExpectedValue">The expected value for the autosinbin when checked</param>
            <returns>The id of the new user</returns>
        </member>
        <member name="M:Tests.AutoSinBinUserTests.DnaHasher.GenerateCommentHashValue(System.String,System.String,System.Int32)">
            <summary>
            GenerateCommentHashValue - Generate a hash value unique for a given content, uid and userid.
            </summary>
            <param name="content">comment body</param>
            <param name="uid">unique identifier of comment box</param>
            <param name="userID">userid of author</param>
        </member>
        <member name="T:Tests.BannedEmailTests">
            <summary>
            Test class for the banned emails functionality
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestBannedEmailIsHandledCorrectlyUsingMockedObjects">
            <summary>
            Make sure that banned users are not created in the datase. Also make sure that we only check the database once
            for more than one page.
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestNormalUserCanBeCreatedAfterABannedUserIsCaught">
            <summary>
            Test to make sure that a normal user can be created after a banned user is caught
            </summary>
            TODO NEED TO GO THROUGH WITH MARK HOWITT TO FIND OUT WHAT THIS TEST IS TRYING TO DO
        </member>
        <member name="M:Tests.BannedEmailTests.TestNonBannedUserWithInvalidCookieGetsCreatedOk">
            <summary>
            Test to make sure that a non banned user will still be created if they have a invalid cookie.
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestBannedUserCaughtEvenWithinvalidCookie">
            <summary>
            Test to make sure that we still ban users if their cookies are not valid
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestServiceWithNoEmailAttributeCreatesUsers">
            <summary>
            This tests to make sure that a service that does not support email attributes creates users correctly
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestIsEmailBannedFromComplaintsStoredProcedure">
            <summary>
            Test sto make sure that the IsEmailBannedFromComplaints storeprocedure correctly returns the right values
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestIsEmailInBannedListStoredProcedure">
            <summary>
            Test sto make sure that the IsEmailInBannedList storedprocedure correctly returns the right values
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestDuplicateBannedEmailEntry">
            <summary>
            Test to make sure that if we put duplicate emails into the banned email list that we catch them correctly
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestGetAndUpdateBannedEmailSettings">
            <summary>
            Test to make sure that the banned emails update procedure works correctly
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestFetchUserFromIDReturnsComplaintBannedStatus">
            <summary>
            Checks to make sure that the find user from id returns the correct banned from complaints status for a given user
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestGetBannedEmailsDefaultActionWithNoParams">
            <summary>
            Test to make sure the correct default view is created if we goto the banned email page
            with no params. We should see the top 20 most recent banned emails
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestGetBannedEmailsWithSeachByLetter">
            <summary>
            Test to make sure the correct results are displayed when we ask for banned emails by letter
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.AddTestEmailsToDatabase">
            <summary>
            Add some sample data to the banned emails table
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.TestAddingSampleDataToBannedEmails(System.String,System.Boolean,System.Boolean)">
            <summary>
            Test to make sure that we can add emails to the banned emails table
            </summary>
        </member>
        <member name="M:Tests.BannedEmailTests.CreateMockedReaderForEmailInBannedListCheck(NMock2.Mockery,BBC.Dna.IInputContext,System.Int32,System.Boolean)">
            <summary>
            Helper method for creating a mocker datareader for the IsEmailInBannedList procedure
            </summary>
            <param name="mockery">The mockery object from the test</param>
            <param name="mockedInput">The context you wanty to add the mocked reader to</param>
            <param name="expectedNumberOfCalls">The number of calls the procedure is expected to be called</param>
            <param name="isBanned">A flag to state whether or not the user should appear as banned</param>
            <returns>The new mocked datareader</returns>
        </member>
        <member name="M:Tests.BannedEmailTests.CreateMockedCreateUserDataReader(NMock2.Mockery,BBC.Dna.IInputContext,System.Int32)">
            <summary>
            Helper method for creating a mocked reader for the CreateNewUserFromUserID procedure
            </summary>
            <param name="mockery">The mockery object from the test</param>
            <param name="mockedInput2">The context you want to add the mocked reader to</param>
            <param name="userID">The userid that you are expecting from the call</param>
        </member>
        <member name="M:Tests.BannedEmailTests.CreateMockedReaderForUserNotInDataBase(NMock2.Mockery,BBC.Dna.IInputContext)">
            <summary>
            Helper Method for creating a mocked datareader for FetchUserInGroups and FindUserFromID procedure calls
            </summary>
            <param name="mockery">The mockery object from the test</param>
            <param name="mockedInput">The context you want to add the mocked reader to</param>
            <returns>The new mocked datareader</returns>
        </member>
        <member name="M:Tests.BannedEmailTests.CreateMockedSite(NMock2.Mockery,BBC.Dna.IInputContext,System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Helper method for creating a mocked site object
            </summary>
            <param name="mockery">The mockery object from the test</param>
            <param name="mockedInput">The context you want to added the mocked site to</param>
            <param name="siteID">The id of the site</param>
            <param name="siteName">The name of the sitte</param>
            <param name="ssoName">The name of the sso service to use</param>
            <param name="useIdentitySignIn">Set this to true if the site is to use identity as it's sign in system</param>
            <param name="identityPolicy">Identity policy</param>
            <returns>The new mocked site</returns>
        </member>
        <member name="M:Tests.BannedEmailTests.SetDefaultDiagnostics(NMock2.Mockery,BBC.Dna.IInputContext)">
            <summary>
            Helper method for creating a mocked default diagnostics object
            </summary>
            <param name="mockery">The mockery object from the test</param>
            <param name="mockedInput">The context that you want to add the diagnostics mocked object to</param>
        </member>
        <member name="M:Tests.BannedEmailTests.CreateMockedProfileConnection(NMock2.Mockery,BBC.Dna.IInputContext,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Helper method for creating a mocked profile connection object.
            This method defaults to setting the user to be logged in, and having the service set
            </summary>
            <param name="mockery">The mockery object from the test</param>
            <param name="mockedInput">The context you want to add the mocked connection to</param>
            <param name="userID">The users ID</param>
            <param name="loginName">The user login name</param>
            <param name="bbcUID">The user BBCUID</param>
            <param name="email">The users email</param>
            <param name="serviceHasEmail">A flag to state whether or not the service supports emails</param>
            <returns>The new mocked profile connection</returns>
        </member>
        <member name="T:Tests.BannedEmailTests.MockedReaderResults">
            <summary>
            Helper class for providing multiple results for a DNaDataReader call to HasRows property.
            </summary>
        </member>
        <member name="T:Tests.CheckIfArticleShouldBeHidden">
            <summary>
            Tests for SP CheckIfArticleShouldBeHidden.
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.TearDown">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.ErrorOnNullUserID">
            <summary>
            Null UserID generates an error.
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.ErrorOnNullSiteID">
            <summary>
            Null SiteID generates an error.
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.DontErrorOnNullh2g2id">
            <summary>
            New article (i.e. h2g2id is null) should not be hidden on reactively moderated siteid and user. 
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.HideArticleIfPreModUser">
            <summary>
            Hide article if premod user
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.DontHideArticleIfPostModUser">
            <summary>
            Don't hide article if postmod user
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.ErrorOnBannedUser">
            <summary>
            Error on banned user
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.HideIfSiteInPreMod">
            <summary>
            Hide if site is in premod
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.DontHideIfSiteInPostMod">
            <summary>
            Don't hide if site in postmod
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.DontHideIfUserIsInAutoSinBin">
            <summary>
            Don't hide if site in postmod
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.DontHideArticleByReactiveUserIfArticleNotInModerationAndOnReactiveSite">
            <summary>
            Don't hide article by reactive user if not article is not in moderation and on reactive site. 
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.DontHideArticleByReactiveUserIfArticleNotInModerationAndOnPostModSite">
            <summary>
            Don't hide article by reactive user if not article is not in moderation and on postmod site. 
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.HideArticleByReactiveUserIfArticleFailedInModerationEvenIfOnReactiveSite">
            <summary>
            hide article by reactive user if article failed in moderation even if on reactive site. 
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.HideArticleByReactiveUserIfArticleIsReferredInModerationEvenIfOnReactiveSite">
            <summary>
            Hide article by reactive user if article is referred even if site is reactive. 
            </summary>
        </member>
        <member name="M:Tests.CheckIfArticleShouldBeHidden.HideArticleByReactiveUserIfArticleIsLockedByModeratorEvenIfOnReactiveSite">
            <summary>
            Hide article by reactive user if not article is locked by moderator even if site is reactive. 
            </summary>
        </member>
        <member name="T:Tests.CheckUserNameSetSiteOptionTests">
            <summary>
            Suite of tests for testing the CheckUserNameSet site option.
            </summary>
        </member>
        <member name="M:Tests.CheckUserNameSetSiteOptionTests.Setup">
            <summary>
            Make sure the database is in a good state
            </summary>
        </member>
        <member name="M:Tests.CheckUserNameSetSiteOptionTests.Test1_CheckPromptSetUserNameNotVisibleOnSiteWithSiteOptionNotSet">
            <summary>
            Check to make sure that the prompt set user name tag in the viewing user block is not visible for a site
            that hasn't set the siteoption
            </summary>
        </member>
        <member name="M:Tests.CheckUserNameSetSiteOptionTests.Test2_CheckPromptSetUserNameNotVisibleForUserWithValidUserNameWithSiteOptionSet">
            <summary>
            Check to make sure the prompt set username tag is not pressent in the viewing user block for a
            site with the optionset and a user with a valid username
            </summary>
        </member>
        <member name="M:Tests.CheckUserNameSetSiteOptionTests.Test3_CheckPromptSetUserNameVisibleForUserWithNonValidUserNameAndSiteOptionSet">
            <summary>
            Check to make sure that the prompt set username is pressent in the viewing user block for site
            with the siteoption set and a user with a non valid username
            </summary>
        </member>
        <member name="T:Tests.CommentForumListTests">
            <summary>
            Summary description for CommentForumListTests
            </summary>
        </member>
        <member name="M:Tests.CommentForumListTests.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.CommentForumListTests.GivenRequestToContactFormListPageShouldSetSkipAndShowVariablesInXML">
            <summary>
            This tests the changes to the params that get sent through to the new contact forms admin pages
            </summary>
        </member>
        <member name="M:Tests.CommentForumListTests.ShouldParseGiveninputParams">
            <summary>
            Unit tests the GetParams() private method in the CommentForumListBuilder class
            </summary>
        </member>
        <member name="P:Tests.CommentForumListTests.TestContext">
             <summary>
            Gets or sets the test context which provides
            information about and functionality for the current test run.
            </summary>
        </member>
        <member name="T:Tests.ContactFormListBuilderTests">
            <summary>
            Summary description for ContactFormListBuilderTests
            </summary>
        </member>
        <member name="M:Tests.ContactFormListBuilderTests.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ContactFormListBuilderTests.GivenCallingProcessInputParametersShouldSetSkipAndShowVariables">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tests.ContactFormListBuilderTests.TestContext">
             <summary>
            Gets or sets the test context which provides
            information about and functionality for the current test run.
            </summary>
        </member>
        <member name="T:Tests.CommentCreateTests">
            <summary>
            Tests for the Cookie decoder class
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.ShutDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.StartUp">
            <summary>
            Set up function  
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentForumCreate(System.String)">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentForumCreate(System.String,BBC.Dna.Moderation.Utils.ModerationStatus.ForumStatus)">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentForumCreate(System.String,BBC.Dna.Moderation.Utils.ModerationStatus.ForumStatus,System.DateTime)">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_TryCreateNonSecureComment">
            <summary>
            Tests CommentCreate function to create comment insecurely
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_Good">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_RepeatComment">
            <summary>
            tests CommentForumCreate with repeat posts
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_BannedUser">
            <summary>
            Tests trying to post as a banned user
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_CommentOnEmergencyClosedSite">
            <summary>
            Test that we can create a forum and post to it for a normal non moderated emergency closed site
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_WithIllegalXmlChars">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_WithIllegalTags">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_TestCommentWithALinkWithCRLFInIt">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_TestRichTextPosts">
            <summary>
            tests CommentCreate functionality
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_TestRichTextPostWithDodgyTagsReportsCorrectErrors">
            <summary>
            tests CommentCreate functionality
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_TestRichTextPostsCRLFInLink">
            <summary>
            tests CommentCreate functionality
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_PreModForum">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_PreModSiteWithProcessPreMod">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_PreModForumEditorEntry">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_PostModForum">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_ReactiveModForum">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_PostPastClosingDate">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_WithProfanities">
            <summary>
            tests CommentCreate function to create comment
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_WithCharLimit_NormalUser">
            <summary>
            tests CommentCreate function to create comment with a character limit
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_WithCharLimit_Editor">
            <summary>
            tests CommentCreate function to create comment with a character limit
            </summary>
        </member>
        <member name="M:Tests.CommentCreateTests.CommentCreate_WithCharLimit_SuperUser">
            <summary>
            tests CommentCreate function to create comment with a character limit
            </summary>
        </member>
        <member name="T:Tests.CommentForumTests">
            <summary>
            Tests for the Cookie decoder class
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.ShutDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.StartUp">
            <summary>
            Set up function  
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumsReadBySiteName">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumsReadBySiteNameAndPrefix">
            <summary>
            Tests of the read of comment forums by sitename and prefix
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumReadByUID">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentsReadByForumID">
            <summary>
            tests returning comments by site and forum id
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_Good">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_WithTooManyUIDChars">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_Duplicate">
            <summary>
            tests CommentForumCreate with missing UID
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_MissingUID">
            <summary>
            tests CommentForumCreate with missing UID
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_MissingUri">
            <summary>
            tests CommentForumCreate with missing ParentUri
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_MissingTitle">
            <summary>
            tests CommentForumCreate with missing Title
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_MissingSiteName">
            <summary>
            tests CommentForumCreate with missing sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_InPostmod">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_InPremod">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_InReactive">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumCreate_WithFixedClosedDate">
            <summary>
            tests successful CommentForumCreate 
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentListReadBySiteName">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentListReadBySiteNameAndPrefix">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumsReadAll_SortBy_Created">
            <summary>
            Tests of the read of comment forums by sitename and prefix with sorting
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumsReadBySite_SortBy_Created">
            <summary>
            Tests of the read of comment forums by sitename and prefix with sorting
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentForumsReadBySitePrefix_SortBy_Created">
            <summary>
            Tests of the read of comment forums by sitename and prefix with sorting
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentListReadBySiteName_SortBy_Created">
            <summary>
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentListReadByUID_SortBy_Created">
            <summary>
            </summary>
        </member>
        <member name="M:Tests.CommentForumTests.CommentReadByPostID">
            <summary>
            Tests the read of a comment by its PostID
            </summary>
        </member>
        <member name="T:Tests.CommentForumCachingAndStats">
            <summary>
            Tests for the Cookie decoder class
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.ShutDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.StartUp">
            <summary>
            Set up function  
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_BasicAddCommentWithStatsCheck">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentsBySite_BasicAddCommentWithStatsCheck">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_ChangeCloseDate">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_SiteEmergencyClose">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_ComplaintHideComment">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_PreMod_Pass">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_PreMod_Fail">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.CommentForum_PreMod_PassWithEdit">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.ModerateComment(System.Int32,System.Int32,BBC.Dna.Moderation.ModerationItemStatus,System.String)">
            <summary>
            
            </summary>
            <param name="postid"></param>
            <param name="forumid"></param>
            <param name="status"></param>
            <param name="edittedText"></param>
        </member>
        <member name="M:Tests.CommentForumCachingAndStats.GetStatCounter(System.String)">
            <summary>
            
            </summary>
            <param name="counter"></param>
            <returns></returns>
        </member>
        <member name="T:Tests.RatingCreateTests">
            <summary>
            Tests for the Cookie decoder class
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.ClassSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            Class setup force a proper restore
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Tests.RatingCreateTests.ShutDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.StartUp">
            <summary>
            Set up function  
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingForumCreate(System.String)">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingForumCreate(System.String,BBC.Dna.Moderation.Utils.ModerationStatus.ForumStatus)">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingForumCreate(System.String,BBC.Dna.Moderation.Utils.ModerationStatus.ForumStatus,System.DateTime)">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_Good">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithoutRating">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_RepeatRating">
            <summary>
            tests RatingForumCreate with repeat posts
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_RatingLargerThanSiteOption">
            <summary>
            tests RatingForumCreate with repeat posts
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_RatingWithBiggerSiteOption">
            <summary>
            tests RatingForumCreate with repeat posts
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_RepeatDifferentRatingText">
            <summary>
            tests RatingForumCreate with repeat posts
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_BannedUser">
            <summary>
            Tests trying to post as a banned user
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_RatingOnEmergencyClosedSite">
            <summary>
            Test that we can create a forum and post to it for a normal non moderated emergency closed site
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithIllegalXmlChars">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithIllegalTags">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_TestRatingWithALinkWithCRLFInIt">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_TestRichTextPosts">
            <summary>
            tests ratingCreate functionality
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_TestRichTextPostWithDodgyTagsReportsCorrectErrors">
            <summary>
            tests ratingCreate functionality
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_TestRichTextPostsCRLFInLink">
            <summary>
            tests ratingCreate functionality
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_PreModForum">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_PreModSiteWithProcessPreMod">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_PreModForumEditorEntry">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_PostModForum">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_ReactiveModForum">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_PostPastClosingDate">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithProfanities">
            <summary>
            tests ratingCreate function to create rating
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithCharLimit">
            <summary>
            tests ratingCreate function to create rating with a character limit
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithMinCharLimit">
            <summary>
            tests ratingCreate function to create rating with a minimum character limit
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithEqualMinAndMaxCharLimits">
            <summary>
            tests ratingCreate function to create rating with character limits
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreate_WithNormalMinAndMaxCharLimits">
            <summary>
            tests ratingCreate function to create rating with character limits
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreateThread_Good">
            <summary>
            Tests ratingThreadCreate function to create rating thread
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreateTwoThreads_Good">
            <summary>
            Tests ratingThreadCreate function to create rating thread
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.RatingCreateTwoThreadsAndCommentsOnEach_Good">
            <summary>
            Tests ratingThreadCreate function to create rating thread
            </summary>
        </member>
        <member name="M:Tests.RatingCreateTests.GetASCIIcodes">
            <summary>
            Gets a list of the printable ascii codes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tests.RatingCreateTests.RandomString">
            <summary>
            Gets a string contain a number of the printable ascii codes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tests.RatingCreateTests.EncodedRandomString">
            <summary>
            Gets an encoded string contain a number of the printable ascii codes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tests.RatingForumTests">
            <summary>
            Tests for the Cookie decoder class
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.ShutDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.StartUp">
            <summary>
            Set up function  
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumReadByUID">
            <summary>
            Tests of the read of comment forums by sitename
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingsReadByForumID">
            <summary>
            tests returning comments by site and forum id
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_Good">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_WithTooManyUIDChars">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_Duplicate">
            <summary>
            tests RatingForumCreate with missing UID
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_MissingUID">
            <summary>
            tests RatingForumCreate with missing UID
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_MissingUri">
            <summary>
            tests RatingForumCreate with missing ParentUri
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_MissingTitle">
            <summary>
            tests RatingForumCreate with missing Title
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_MissingSiteName">
            <summary>
            tests RatingForumCreate with missing sitename
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_InPostmod">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_InPremod">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_InReactive">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_WithFixedClosedDate">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_WithAverage">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForumCreate_UserRating">
            <summary>
            tests successful RatingForumCreate 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingForum_ByUserList">
            <summary>
            tests returning a list of reviews for a given userlist ** THIS IS NOW A LIST OF IDENTITY IDS ** 
            </summary>
        </member>
        <member name="M:Tests.RatingForumTests.RatingReadByPostID">
            <summary>
            Tests the read of a review/rating by its PostID
            </summary>
        </member>
        <member name="T:Tests.UriDiscoverabilityTests">
            <summary>
            Tests for the Cookie decoder class
            </summary>
        </member>
        <member name="M:Tests.UriDiscoverabilityTests.UriDiscoverabilityTests_AllTypes">
            <summary>
            Tests of the all the discoverability functions
            </summary>
        </member>
        <member name="T:Tests.StoredProcedureReaderTests">
            <summary>
            StoredProcedureReader Tests class
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.CreateDataReader">
            <summary>
            Create data reader test
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.InvalidStoredProcedureTest">
            <summary>
            Test calling invalid stored procedure
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.NotSuppliedParameterExceptionTest">
            <summary>
            Test not supplying an expected parameter
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.IncorrectSuppliedParameterExceptionTest">
            <summary>
            Test to supply an incorrect parameter.
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.InvalidColumnNameTest">
            <summary>
            Test to read from a column not in the results.
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.InvalidOrdinalTest">
            <summary>
            Test to read from a column specified by out of range ordinal 
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.InvalidTypeGetTest">
            <summary>
            Test to cast a read value incorrectly.
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.ReadPastEndTest">
            <summary>
            Test to read past end of the results set.
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureReaderTests.OutputParameterTest">
            <summary>
            Test for output paramters
            </summary>
        </member>
        <member name="T:Tests.StoredProcedureTestInputContext">
            <summary>
            Implements the Stored Procedure aspects of InputContext
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureTestInputContext.#ctor">
            <summary>
            Creates the object
            </summary>
        </member>
        <member name="M:Tests.StoredProcedureTestInputContext.CreateDnaDataReader(System.String)">
            <summary>
            Create an instance of a IDnaDataReader that accesses the configured database
            </summary>
            <param name="name">The name of the stored procedure you wanr to call</param>
            <returns>The data reader</returns>
        </member>
        <member name="T:Tests.DnaObjectXmlSchemaTests">
            <summary>
            Summary description for XmlSchemaTests
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.#ctor">
            <summary>
            Xml schema tests for BBC.Dna.Objects
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ArticleInfoXmlTest">
             <summary>
            A test for ArticleInfo Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ForumSourceXmlTest">
             <summary>
            A test for ForumSource Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.GetRelatedClubsXMLTest">
             <summary>
            A test for GetRelatedClubs
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ArticleInfoPageAuthorXMLTest">
             <summary>
            A test for ArticleInfoPageAuthor Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ArticleInfoSubmittableXmlTest">
             <summary>
            A test for ArticleInfoSubmittable Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.SubscribeResultXmlTest">
             <summary>
            A test for SubscribeResult Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ArticleXmlTest">
             <summary>
            A test for ArticleInfo Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.CreateGuideEntryXml_StandardXml_ReturnsCorrectObject">
             <summary>
            A test for CreateGuideEntry
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.CreateGuideEntryXmlTest_WithEntities_ReturnsCorrectObject">
             <summary>
            A test for CreateGuideEntry
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.CrumbTrailXmlTest">
             <summary>
            A test for CrumbTrial Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.RelatedArticlesXmlTest">
             <summary>
            A test for RelatedArticle Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ThreadPostXmlTest">
            <summary>
            Checks threadpost xml created
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.OnlineUserXmlTest">
             <summary>
            A test for OnlineUsers Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ForumSourceClubXmlTest">
             <summary>
            A test for ForumSourceClub Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ForumSourceJournalXmlTest">
             <summary>
            A test for ForumSourceJournal Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ForumSourceReviewForumXmlTest">
             <summary>
            A test for ForumSourceReviewForum Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ThreadXmlTest">
             <summary>
            A test for Thread Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ThreadSummaryXmlTest">
             <summary>
            A test for ThreadSummary Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.SubscribeStateXmlTest">
             <summary>
            A test for SubscribeState Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.UserAsXmlWithoutGroups">
             <summary>
            A test for userName
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.UserAsXmlWithGroups">
             <summary>
            A test for userName
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ForumThreadsXmlTest">
             <summary>
            A test for ForumThreads Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.ReviewForumXmlTest">
             <summary>
            A test for ReviewForum Constructor
            </summary>
        </member>
        <member name="M:Tests.DnaObjectXmlSchemaTests.DateAsXml">
            <summary>
            Tests data as xml
            </summary>
        </member>
        <member name="P:Tests.DnaObjectXmlSchemaTests.TestContext">
             <summary>
            Gets or sets the test context which provides
            information about and functionality for the current test run.
            </summary>
        </member>
        <member name="T:Tests.SiteListTests">
            <summary>
            Tests for the SiteListTests Class
            </summary>
        </member>
        <member name="F:Tests.SiteListTests._testSiteList">
            <summary>
            static variable
            </summary>
        </member>
        <member name="F:Tests.SiteListTests._siteListloaded">
            <summary>
            whether sitelist is loaded or not
            </summary>
        </member>
        <member name="M:Tests.SiteListTests.Setup">
            <summary>
            Constructor for the test
            </summary>
        </member>
        <member name="M:Tests.SiteListTests.Test1CreateSiteListClassTest">
            <summary>
            Test1CreateSiteListTest
            </summary>
        </member>
        <member name="M:Tests.SiteListTests.Test2LoadSiteListTest">
            <summary>
            Test2LoadSiteListTest
            </summary>
        </member>
        <member name="M:Tests.SiteListTests.Test3GetSiteh2g2byidTest">
            <summary>
            Test3GetSiteh2g2byidTest
            </summary>
        </member>
        <member name="M:Tests.SiteListTests.Test4GetSiteh2g2byNameTest">
            <summary>
            Test4GetSiteh2g2byNameTest
            </summary>
        </member>
        <member name="M:Tests.SiteListTests.GetIDForSiteName(System.String)">
            <summary>
            Helper function for other tests. Use this test class functionality to get the site id for a given site
            </summary>
            <param name="siteName">The name of the site that you want to get the id for</param>
            <returns>The ID of the requested site</returns>
        </member>
        <member name="T:Tests.SiteOptionListTests">
            <summary>
            Tests for the SiteOptionsList and SiteOption class
            </summary>
        </member>
        <member name="M:Tests.SiteOptionListTests.#ctor(System.String)">
            <summary>
            Constructor
            <param name="debugUserDetails"></param>
            </summary>
        </member>
        <member name="M:Tests.SiteOptionListTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.SiteOptionListTests.TestSiteOptionListValues">
            <summary>
            Tests that the values SiteOptionList reads from the db are the values
            it returns with the access methods
            </summary>
        </member>
        <member name="M:Tests.SiteOptionListTests.TestSiteOptionListGetMethods">
            <summary>
            Tests that the Get methods work correctly.
            If you ask for an option for a site and it exists, you get that value
            If you ask for an option for a site and it doesn't exist, you should get the site 0 value
            </summary>
        </member>
        <member name="T:Tests.SiteOptionTests">
            <summary>
            Tests for the SiteOptionsList and SiteOption class
            </summary>
        </member>
        <member name="M:Tests.SiteOptionTests.SetUpSiteOptionTests">
            <summary>
            Sets up the tests
            </summary>
        </member>
        <member name="M:Tests.SiteOptionTests.TestSiteOptionConstructor">
            <summary>
            Tests the SiteOption constructor
            </summary>
        </member>
        <member name="M:Tests.SiteOptionTests.TestSiteOptionMethodsBool">
            <summary>
            Tests the SiteOption methods for the bool type
            </summary>
        </member>
        <member name="M:Tests.SiteOptionTests.TestSiteOptionMethodsInt">
            <summary>
            Tests the SiteOption methods for the int type
            </summary>
        </member>
        <member name="T:Tests.SiteTests">
            <summary>
            Tests for the Sites Class
            </summary>
        </member>
        <member name="F:Tests.SiteTests._testSite">
            <summary>
            Creating my test site
            </summary>
        </member>
        <member name="M:Tests.SiteTests.SetupTestSite">
            <summary>
            Setup the test site for the tests to run against
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test1CreateSitesClassTest">
            <summary>
            Test1CreateSitesClassTest
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test2TestSiteID">
            <summary>
            Test2TestSiteID
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test3TestSiteName">
            <summary>
            Test3TestSiteName
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test4TestSSOService">
            <summary>
            Test4TestSSSOService
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test5TestMinAge">
            <summary>
            Test5TestMinAge
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test6TestMaxAge">
            <summary>
            Test6TestMaxAge
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test7TestAddOpenCloseTimesTest">
            <summary>
            Test7TestAddOpenCloseTimesTest
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test8TestEmergencyClose">
            <summary>
            Test8TestEmergencyClose
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test9TestSkinExists">
            <summary>
            Test9TestSkinExists
            </summary>
        </member>
        <member name="M:Tests.SiteTests.Test10TestSkinDoesNotExists">
            <summary>
            Test10 Test Skin Doesn't Exists
            </summary>
        </member>
        <member name="M:Tests.SiteTests.TestATestDefaultSkin">
            <summary>
            TestA Test Default Skin Doesn't Exists
            </summary>
        </member>
        <member name="M:Tests.SiteTests.TestBTestGetEmail">
            <summary>
            TestB Test Get Site Email
            </summary>
        </member>
        <member name="M:Tests.SiteTests.TestCTestIsSiteScheduledClosed">
            <summary>
            TestC Test Is site in a scheduled close time
            </summary>
            <remarks>The open close events are added in latest first order or Sunday before saturday etc 
            and if no events have already happened then</remarks>
        </member>
        <member name="M:Tests.SiteTests.TestDTestScheduledClosedXml">
            <summary>
            TestDTestScheduledClosedXml
            </summary>
        </member>
        <member name="M:Tests.SiteTests.TestETestSitePassworded">
            <summary>
            TestETestSitePassworded
            </summary>
        </member>
        <member name="M:Tests.SiteTests.TestFTestSiteModerationStatus">
            <summary>
            TestFTestSiteModerationStatus
            </summary>
        </member>
        <member name="M:Tests.SiteTests.TestGTestSiteOptions">
            <summary>
            TestGTestSiteOptions
            </summary>
        </member>
        <member name="T:Tests.DnaBasePageTests">
            <summary>
            Summary description for DnaBasePageTests
            </summary>
        </member>
        <member name="M:Tests.DnaBasePageTests.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DnaBasePageTests.ShouldThrowForbidenExceptionIfUserAgentMatchesItemInBannedAgentsList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DnaBasePageTests.ShouldNotThrowForbidenExceptionIfUserAgentDoesNotMatchesItemInBannedAgentsList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DnaBasePageTests.GivenCallToAnyPage_WhenHostSourceParamOfUK_ThenPAGEDOMAINTagIsBBC_CO_UK">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DnaBasePageTests.GivenCallToAnyPage_WhenHostSourceParamNotProvided_ThenPAGEDOMAINTagIsBBC_CO_UK">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DnaBasePageTests.GivenCallToAnyPage_WhenHostSourceParamOfCOM_ThenPAGEDOMAINTagIsBBC_COM">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tests.DnaBasePageTests.TestContext">
             <summary>
            Gets or sets the test context which provides
            information about and functionality for the current test run.
            </summary>
        </member>
        <member name="T:Tests.DnaMessageTests">
            <summary>
            Summary description for DnaMessageTests
            </summary>
        </member>
        <member name="M:Tests.DnaMessageTests.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DnaMessageTests.SendEmailViaDatabaseWithValidData_CorrectDataInEmailQueue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tests.DnaMessageTests.TestContext">
             <summary>
            Gets or sets the test context which provides
            information about and functionality for the current test run.
            </summary>
        </member>
        <member name="T:Tests.MessageBoardStatisticsTests">
            <summary>
            Message Board Statistics Tests
            </summary>
        </member>
        <member name="M:Tests.MessageBoardStatisticsTests.TestEmailSendMailOrSystemMessage">
            <summary>
            Test that emails are produced correctly
            </summary>
        </member>
        <member name="T:Tests.ModerationHistoryTests">
            <summary>
            Summary description for ModerationHistoryTests
            </summary>
        </member>
        <member name="M:Tests.ModerationHistoryTests.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModerationHistoryTests.PostHistory_GetPostHistoryAsSuperUserForAnonymousComplaint_ExpectFullComplainantDetails">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModerationHistoryTests.PostHistory_GetPostHistoryAsSuperUserForLogedInComplaint_ExpectFullComplainantDetails">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModerationHistoryTests.PostHistory_GetPostHistoryAsModeratorForAnonymousComplaint_ExpectLimitedComplainantDetails">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModerationHistoryTests.PostHistory_GetPostHistoryAsModeratorForLoggedinComplaint_ExpectLimitedComplainantDetails">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tests.ModerationHistoryTests.TestContext">
             <summary>
            Gets or sets the test context which provides
            information about and functionality for the current test run.
            </summary>
        </member>
        <member name="T:Tests.ModerationReasonsTests">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModerationReasonsTests.TestXmlForModClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModerationReasonsTests.TestXmlNoModClass">
            <summary>
            Validates Moderation Reasons Xml.
            </summary>
        </member>
        <member name="M:Tests.ModerationReasonsTests.VerifyXmlWithSchema">
            <summary>
            Verify Xml aainst Schema.
            </summary>
        </member>
        <member name="T:Tests.ModeratorManagementTests">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModeratorManagementTests.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.ModeratorManagementTests.TestFindUser">
            <summary>
            Check that the Stored Procedure is called correctly.
            </summary>
        </member>
        <member name="M:Tests.ModeratorManagementTests.TestUpdateUser">
            <summary>
            Test The Update User stored procedure is called correctly.
            </summary>
        </member>
        <member name="M:Tests.ModeratorManagementTests.TestGiveAccess">
            <summary>
            Test the Give Access SP is called correctly.
            </summary>
        </member>
        <member name="M:Tests.ModeratorManagementTests.TestRemoveAccess">
            <summary>
            Test RemoveAccess sp is called correctly.
            </summary>
        </member>
        <member name="T:Tests.MoveThreadTests">
            <summary>
            Tests for the move thread functionality
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.TearDown">
            <summary>
            teardown method
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.TestShowDetailsForThreadModID">
            <summary>
            Test to make sure that the correct details are retrieved for a threadmod id
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.TestMoveThreadViaModID">
            <summary>
            Test to make sure the move thread via modid works correctly
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.TestMoveThreadViaModIDToSameForumID">
            <summary>
            Test to make sure the move thread via modid returns correct error for moving to same forum
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.TestMoveThreadViaModIDToInvalidForum">
            <summary>
            Test to make sure the move thread via modid returns correct error for moving to an invalid forum
            </summary>
        </member>
        <member name="M:Tests.MoveThreadTests.SetupPreModPost(BBC.Dna.IInputContext,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Creates a new premod posting post in the mod queue
            </summary>
            <param name="context">The context for the request</param>
            <param name="forumid">The forumid that was posted to</param>
            <param name="subject">The subject used for the post</param>
            <param name="modID">The modid for the new moderation item</param>
        </member>
        <member name="M:Tests.MoveThreadTests.TestCreateCommentForumWithUnicodeTitleAndThenMoveIt_ReturnsMovedThread">
             <summary>
             Test that we can create a forum and post a unicode comment to it for a normal non 
             moderated site with a unicode title and then move it
             </summary>
            TODO SEE MARK ABOUT THE SSL secure channel stuff
        </member>
        <member name="T:Tests.CommentBoxAjaxRedirectTest">
            <summary>
            Test Class for UseRedirect Parameter Test
            </summary>
        </member>
        <member name="M:Tests.CommentBoxAjaxRedirectTest.UseRedirectParameterTest">
            <summary>
            Validates CommentBox schema.
            Comment Box Schema validation tests are covered with CommentBox functional tests.
            </summary>
        </member>
        <member name="T:Tests.CommentsListTests">
            <summary>
            Comment List Tests
            </summary>
        </member>
        <member name="M:Tests.CommentsListTests.TestGetCommentsListForUser6">
            <summary>
            Test that we get a correct list of comments for a given user
            </summary>
        </member>
        <member name="T:Tests.DnaComponentTests">
            <summary>
            This tests the general component level methods
            </summary>
        </member>
        <member name="M:Tests.DnaComponentTests.TestUpdatingOfRelativeDates">
            <summary>
            Tests to make sure that the update relative date method does what it says :)
            </summary>
        </member>
        <member name="M:Tests.DnaComponentTests.TestMakeLinksFromUrls">
            <summary>
            Test the helper function MakeLinkFromURLs
            </summary>
        </member>
        <member name="T:Tests.DnaMockeryTests">
            <summary>
            Testing the Mocked version of our Input Contexts etc
            </summary>
        </member>
        <member name="M:Tests.DnaMockeryTests.TestDataContext">
            <summary>
            Testing the mocked data input context
            </summary>
        </member>
        <member name="T:Tests.DnaTestURLRequestParams">
            <summary>
            Object used to create a collection of post params to use with the DnaTestURLRequest object
            </summary>
        </member>
        <member name="M:Tests.DnaTestURLRequestParams.Add(System.String,System.String)">
            <summary>
            Adds the given key/value pair to the list of post params
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="P:Tests.DnaTestURLRequestParams.PostParams">
            <summary>
            Gets the post params object containing the params
            </summary>
        </member>
        <member name="T:Tests.DummyOutputContext">
            <summary>
            A test output context on which you can perform tests
            It also has some internal sanity checking
            </summary>
        </member>
        <member name="T:Tests.TestOutputContext">
            <summary>
            A base class to allow you to write a testable implementation of OutputContext
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.DoesParamExist(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.TryGetParamString(System.String,System.String@,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetParamStringOrEmpty(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetCookie(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.CreateDnaDataReader(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetParamIntOrZero(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetAllParamNames">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.UrlEscape(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.EnsureSiteListExists(System.Boolean,BBC.Dna.IAppContext)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.EnsureAllowedURLsExists(System.Boolean,BBC.Dna.IAppContext)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.SendSignal(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetSiteOptionValueInt(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetSiteOptionValueBool(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetSiteOptionValueString(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.AddAllSitesXmlToPage">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetParamCount(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.GetParamString(System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <param name="index"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.SetContentType(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetSkinPath(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.Redirect(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetCachedXslTransform(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.IsHtmlCachingEnabled">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetHtmlCachingTime">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.CreateRequestCacheKey">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="M:Tests.TestOutputContext.GetCachedObject(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IAppContext"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.CacheObject(System.String,System.Object,System.Int32)">
            <summary>
            <see cref="T:BBC.Dna.IAppContext"/>
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Tests.TestOutputContext.CreateDnaDataReader(System.String,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="dnaDiagnostics"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.GetSiteOptionValueInt(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="siteId"></param>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.GetSiteOptionValueBool(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="siteId"></param>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.GetSiteOptionValueString(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="siteId"></param>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.FileCacheGetItem(System.String,System.String,System.DateTime@,System.String@)">
            <summary>
            
            </summary>
            <param name="pCacheName"></param>
            <param name="pItemName"></param>
            <param name="pdExpires"></param>
            <param name="oXMLText"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.FileCachePutItem(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.TestOutputContext.VerifySkinFileExists(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="skinName"></param>
            <param name="skinSet"></param>
            <returns></returns>
        </member>
        <member name="P:Tests.TestOutputContext.MaximumRequestCount">
            <summary>
            Maximum number of concurrent requests
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.TheSiteList">
            <summary>
            The SiteList for the application
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.AllowedURLs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.ViewingUser">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.CurrentSite">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.Diagnostics">
            <summary>
            <see cref="T:BBC.Dna.IAppContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.CurrentServerName">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.IsRunningOnDevServer">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.UserAgent">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.Writer">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.DebugSkinFile">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.GetConnectionDetails">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.Cookies">
            <summary>
            Gets the cookie collection for the response
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.BannedUserAgents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tests.TestOutputContext.UseXSLTTransformerWithLargeStack">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.DummyOutputContext.#ctor">
            <summary>
            Constructor. Initialises the string writer used to capture the output
            </summary>
        </member>
        <member name="M:Tests.DummyOutputContext.SetContentType(System.String)">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="P:Tests.DummyOutputContext.ContentType">
            <summary>
            Exposes the current content-type set by the caller
            </summary>
        </member>
        <member name="P:Tests.DummyOutputContext.Contents">
            <summary>
            Exposes the contents of the writer stream, for testing purposes
            </summary>
        </member>
        <member name="P:Tests.DummyOutputContext.Writer">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="P:Tests.DummyOutputContext.Diagnostics">
            <summary>
            <see cref="T:BBC.Dna.IOutputContext"/>
            </summary>
        </member>
        <member name="T:Tests.FileCacheTests">
            <summary>
            Tests for the file caching class
            </summary>
        </member>
        <member name="M:Tests.FileCacheTests.TestFileCaching">
            <summary>
            Test the file caching that simulates the Ripley method of caching
            </summary>
        </member>
        <member name="M:Tests.FileCacheTests.TestFileCachingWithInvalidFileChars">
            <summary>
            Test the file caching that simulates the Ripley method of caching with invalid filename characters
            </summary>
        </member>
        <member name="T:Tests.GuideEntryTests">
            <summary>
            Tests for the guide entry object
            </summary>
        </member>
        <member name="M:Tests.GuideEntryTests.EnsureInvalidH2G2IDFailsToCreate">
            <summary>
            Test to make sure that an invalid h2g2id will fail to create an entry
            </summary>
        </member>
        <member name="M:Tests.GuideEntryTests.EnsureValidH2G2IDSucceedsToCreate">
            <summary>
            Test to make sure that an valid h2g2id will succeed to create an entry
            </summary>
        </member>
        <member name="T:Tests.HtmlCachingTests">
            <summary>
            HTML caching tests
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.SetHtmlCaching(System.Boolean)">
            <summary>
            Sets the HTML Caching option in the database
            </summary>
            <param name="value">the new value</param>
        </member>
        <member name="M:Tests.HtmlCachingTests.SetHtmlCachingExpiryTime(System.Int32)">
            <summary>
            Sets the HTML caching expiry time in the database
            </summary>
            <param name="value">the new value</param>
        </member>
        <member name="M:Tests.HtmlCachingTests.SaveHtmlCachingSiteOptions">
            <summary>
            Saves the current HTML caching options
            <see cref="M:Tests.HtmlCachingTests.RestoreHtmlCachingSiteOptions"/>
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.RestoreHtmlCachingSiteOptions">
            <summary>
            Restores the values saved by a call to SaveHtmlCachingSiteOptions()
            <see cref="M:Tests.HtmlCachingTests.SaveHtmlCachingSiteOptions"/>
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.SetUpHtmlCachingTests">
            <summary>
            Sets up the HTML caching tests
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.TearDownHtmlCachingTests">
            <summary>
            Tears down the HTML caching tests
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.RefreshSiteOptions">
            <summary>
            Makes the web server refresh it's site options 
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.TestHtmlCachingOffNotLoggedIn">
            <summary>
            Tests behaviour when HTML caching is off
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.TestHtmlCachingOnNotLoggedIn">
            <summary>
            Tests behavour when HTML caching is on
            </summary>
        </member>
        <member name="M:Tests.HtmlCachingTests.TestHtmlCachingOnLoggedInUsingIdentity">
            <summary>
            Tests behavour when HTML caching is on
            </summary>
        </member>
        <member name="T:Tests.MemberListTests">
            <summary>
            Member List Tests
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestSetup">
            <summary>
            Makes sure that there's at least one threadentry for the tests to run against
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestGetMemberListForUser1090558354">
            <summary>
            Test that we get a list of accounts for a given member
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestGetMemberListForUserByEmail">
            <summary>
            Test that we get a list of accounts for a given member via email
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestGetMemberListForUserByUserName">
            <summary>
            Test that we get a list of accounts for a given member via username
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestGetMemberListForUserByIPAddress">
            <summary>
            Test that we get a list of accounts for a given member via ipaddress
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestGetMemberListForUserByBBCUID">
            <summary>
            Test that we get a list of accounts for a given member via BBC UID
            </summary>
        </member>
        <member name="M:Tests.MemberListTests.TestGetMemberListForUserByLoginName">
            <summary>
            Test that we get a list of accounts for a given member via login name
            </summary>
        </member>
        <member name="T:Tests.NamespacedPhrasesTests">
            <summary>
            Tests for the namespace phrases class
            </summary>
        </member>
        <member name="M:Tests.NamespacedPhrasesTests.NonQuotedTokenizedPhrasesSplitCorrectly">
            <summary>
            Check to make sure non quoted tokenized phrases get parsed correctly
            </summary>
        </member>
        <member name="M:Tests.NamespacedPhrasesTests.QuotedTokenizedPhrasesSplitCorrectly">
            <summary>
            Check to make sure quoted tokenized phrases get parsed correctly
            </summary>
        </member>
        <member name="T:Tests.NameSpaceTests">
            <summary>
            Name spaces tests
            </summary>
        </member>
        <member name="M:Tests.NameSpaceTests.Setup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.NameSpaceTests.TestCreateNewNameSpaceForSite">
            <summary>
            Test that we can create a new namespace for a site
            </summary>
        </member>
        <member name="M:Tests.NameSpaceTests.TestGetNameSpacesForSite">
            <summary>
            Test that we get a correct list of namespaces for a given site
            </summary>
        </member>
        <member name="M:Tests.NameSpaceTests.TestRenameNameSpaceForSite">
            <summary>
            Test tpo make sure we can rename namespaces
            </summary>
        </member>
        <member name="M:Tests.NameSpaceTests.TestGetPhrasesforNameSpace">
            <summary>
            Test to make sure we get all the phrases for a given namespace.
            </summary>
        </member>
        <member name="M:Tests.NameSpaceTests.TestRemoveNameSpaceForSite">
            <summary>
            Test to make sure that we correctly remove a name space
            </summary>
        </member>
        <member name="T:Tests.NewPollContentRatingTests">
            <summary>
            Content rating poll tests
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.SetUp">
            <summary>
            Sets up the tests mock and datareader objects
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.CreateMockedAppContextAndDiagnostics">
            <summary>
            Creates a mocked up AppContext with the diagnostics overriden
            </summary>
            <returns>The new mocked up input context</returns>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.CreateDataReaderForMockedAppContextForStoreProcedure(System.String,BBC.Dna.IAppContext)">
            <summary>
            Helper function for creating a datareader for a given procedure for the mocked inputcontext
            </summary>
            <param name="procedureName">The name of the procedure you want to apply to the mocked input context</param>
            <param name="mockedApp"></param>
            <returns>The new datareader for that procedure</returns>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.CreateMockedDanDataReaderForAppContextWithValues(System.String,BBC.Dna.IAppContext,System.Boolean,System.Boolean)">
            <summary>
            Helper method for creating a mocked dan data reader for a given app context.
            </summary>
            <param name="procedureName">The name of the procedure the datareader will use</param>
            <param name="mockedApp">The app context that the procedure is to be created for</param>
            <param name="defaultAddParamMock">Set to true if you want them to just return the data reader regardless of the inputs</param>
            <param name="hasRowsAndReadReturnValue">The HasRows AND Read return value when called</param>
            <returns></returns>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestCreateNewPollFailsWithValidPollID">
            <summary>
            Test to make sure we fail when trying to create a poll with a valid poll id
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestCreateNewPollWithoutRange">
            <summary>
            Test to make sure we can create a poll without a range
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestCreateNewPollWithRange">
            <summary>
            Test to make sure we can create a poll with a range
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.CreateValidPoll(System.Int32,System.Int32,BBC.Dna.IAppContext)">
            <summary>
            Creates a new valid content rating poll
            </summary>
            <param name="minResponse">The minimum response value</param>
            <param name="maxResponse">The maximum response value</param>
            <param name="appContext">The App context you want to create the poll in</param>
            <returns>The new poll</returns>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestRemoveVoteReturnsErrorCodeAndErrorForNoRedirect">
            <summary>
            Test to make sure that the remove vote function returns an error as it's not allowed on this type of poll, as well as an error for no redirect
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestRemoveVoteReturnsErrorCode">
            <summary>
            Test to make sure that we get the correct error code when trying to remove a vote
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestLinkPollWithItemReturnsFalseForInvalidPollID">
            <summary>
            Test to make suree that the poll returns false if we try to link it to a item when it has an invalid poll ID
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestLinkPollFailsWhenThePollIsAlreadyLinkedToMoreThanOneItem">
            <summary>
            Test to make sure that the poll returns false whern we are trying to link it to more than item
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestThatLinkingAnItemToANonLinkPollReturnsTrue">
            <summary>
            Test to make sure we can link an item to a poll that hasn't already been linked
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestHidePollFailsWhenNoRedirectGiven">
            <summary>
            Tests to make sure that the poll returns false when trying to hide a vote with no redirect url specified
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.CreateMockedUserForMockedAppContext(BBC.Dna.IAppContext,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Helper metyhod that creates a mocked user for qa given mocked app context
            </summary>
            <param name="mockedAppContext">The mocked app context to add the user to</param>
            <param name="userID"></param>
            <param name="isLoggedIn"></param>
            <param name="isEditor"></param>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestHidePollFailsWhenUserNotLoggedIn">
            <summary>
            Tests to make sure that the user must be logged in to hide votes
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestHidePollFailsWhenUserLoggedInButNotEditor">
            <summary>
            Tests to make sure that normal users are not able to hide votes
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestHidePollReturnsTrueWhenLoggedInAsEditor">
            <summary>
            Tests to make sure that editors can hide polls ok
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVoteReturnsTrueWhenNoRedirectGiven">
            <summary>
            Test voting returns true and gives an xml error when the redirect url is not given
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVoteReturnsFalseWhenRedirectGivenAndPollIDIsInvalid">
            <summary>
            Check to make sure voting returns false and gives an error on the redirect when the poll id is not valid
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingReturnsTrueWhenUserNotLoggedInVotingOnANonAnonymousPoll">
            <summary>
            Check to make sure that the vote returns true, but with errors when a non logged in user tries to vote on a non anonymous poll
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingReturnsFalseWhenALoggedInUserWithInvalidUserIDVotesOnANonAnonymousVotingPoll">
            <summary>
            Check to make sure the poll returns false and gives an error code when a logged in user with invalid userid tries to vote on a non anonymous voting poll
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingReturnsFalseWhenLoggedInUserWithInValidUserIDTriesToVoteOnAnAnonymousVotingPoll">
            <summary>
            Check to make sure that we return false when a logged in user with invalid user id tries to vote on an anonymous poll
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingReturnsTrueWIthErrorCodesWhenTheAuthorOfTheContentThatThePollIsLinkedToTriesToVote">
            <summary>
            Check to make sure the poll returns true and with error codes when the author of the content the poll is linked to tries to vote
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingRetrunsTrueIfTheResponseIsOutOfRangeOnAnAnonymousePollAndUserNotLoggedIn_BelowMinValue">
            <summary>
            Check to make sure the vote returns true with errors when the response to a vote is out of range for an anonymous poll and logged out user
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingRetrunsTrueIfTheResponseIsOutOfRangeOnAnAnonymousePollAndUserNotLoggedIn_AboveMaxValue">
            <summary>
            Check to make sure the vote returns true with errors when the response to a vote is out of range for an anonymous poll and logged out user
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingReturnsTrueWithNoErrorsWhenALoggedInUserWithValidResponseVotesOnANonAnonymousPoll">
            <summary>
            Test to make sure a logged in user can vote with a response within the polls voting range on a non anonymous poll
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.TestVotingReturnsTrueWithNoErrorsWhenAnonLoggedInUserWithValidResponseVotesOnAnAnonymousPoll">
            <summary>
            Test to make sure a non logged in user can vote with a response within the polls voting range on an anonymous poll
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_FailsWithNoRedirect">
            <summary>
            Check to make sure the poll ParseRequestURLForCommand call fails when no redirect given
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_FailsWithNoCommand">
            <summary>
            Check to make sure that the parsing of the request fails with error codes when no command is given
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_ReturnsTrueForValidVoteCommand">
            <summary>
            Check to amke sure that we can parse the url correctly for a valid vote command.
            The test uses a non logged in user on an anonymous voting poll.
            !!! We have tests for all the other cases which call the vote method directly !!!
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_ReturnsTrueForRemoveVoteCommand">
            <summary>
            Check to amke sure that we can parse the url correctly for a valid remove vote command.
            !!! We have tests for all the other cases which call the remove vote method directly !!!
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_ReturnsTrueForValidHidePollCommand">
            <summary>
            Check to make sure we can correctly handle a valid Hide poll command
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_ReturnsTrueForValidUnHidePollCommand">
            <summary>
            Check to make sure we can correctly handle a valid unHide poll command
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_ReturnsTrueForValidConfigPollCommandWithHideSetToZero">
            <summary>
            Check to make sure we can correctly handle a valid config poll command with a hide value of 0 (Unhide the vote)
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_ParseRequestURLForCommand_ReturnsTrueForValidConfigPollCommandWithHideSetToOne">
            <summary>
            Check to make sure we can correctly handle a valid config poll command with a hide value of 1 (Hide the vote)
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_Statistics_UserLoggedInAndStatisticsSet">
            <summary>
            Test Poll statistics generation
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_Statistics_NullName">
            <summary>
            Test Poll statistics with invalid name
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_Statistics_BlankName">
            <summary>
            Test Poll statistics with invalid name
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_Statistics_UpdateAStat">
            <summary>
            Test update of a Poll statistics
            </summary>
        </member>
        <member name="M:Tests.NewPollContentRatingTests.Test_Statistics_RemoveAStat">
            <summary>
            Test update of a Poll statistics
            </summary>
        </member>
        <member name="T:Tests.AllowedURLTests">
            <summary>
            Test class AllowedURLTests.cs
            </summary>
        </member>
        <member name="M:Tests.AllowedURLTests.TestCheckLoadAllowedURLListData">
            <summary>
            Test method to test loading the allowed urls
            </summary>
        </member>
        <member name="T:Tests.OpenCloseTimeTests">
            <summary>
            Tests for the OpenCloseTimes Class
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test1CreateOpenCloseTimeClassTest">
            <summary>
            Test1CreateOpenCloseTimeClassTest
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test2AssignOpenCloseTimeDayOfWeek">
            <summary>
            Test2AssignOpenCloseTimeDayOfWeek
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test3AssignOpenCloseTimeHour">
            <summary>
            Test3AssignOpenCloseTimeHour
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test4AssignOpenCloseTimeMinute">
            <summary>
            Test4AssignOpenCloseTimeMinute
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test5AssignOpenCloseTimeClosed">
            <summary>
            Test5AssignOpenCloseTimeClosed
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test5CreateOpenCloseTimeWithInitialValues">
            <summary>
            Test5CreateOpenCloseTimeWithInitialValues
            </summary>
        </member>
        <member name="M:Tests.OpenCloseTimeTests.Test6CreateOpenCloseTimeFromOpenCloseTime">
            <summary>
            Test6CreateOpenCloseTimeFromOpenCloseTime
            </summary>
        </member>
        <member name="T:Tests.PageAuthorZeitgeistTest">
            <summary>
            Test utility class PageAuthorZeitgeistTest.cs
            </summary>
        </member>
        <member name="M:Tests.PageAuthorZeitgeistTest.Test01ViewArticleWithPageAuthorPageTest">
            <summary>
            Test we can get to the page. 
            </summary>
        </member>
        <member name="T:Tests.PollResultsTest">
            <summary>
            Test PollResultsTest
            </summary>
        </member>
        <member name="M:Tests.PollResultsTest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tests.PollResultsTest.CreatePollResult">
            <summary>
            Create PollResult 
            </summary>
        </member>
        <member name="M:Tests.PollResultsTest.AddResults">
            <summary>
            Add result
            </summary>
        </member>
        <member name="T:Tests.PostingSprocTests">
            <summary>
            Tests for the posttoforum procedures, to ensure the renaming of the IgnoreThreadPostings fields hasn't broken anything
            </summary>
        </member>
        <member name="M:Tests.PostingSprocTests.TestPosting">
            <summary>
            Tests for posting to forums (comment forums initially)
            </summary>
        </member>
        <member name="T:ProfileTestInputContext">
            <summary>
            Class to fake InputContext when testing ProfileAPI
            </summary>
        </member>
        <member name="P:ProfileTestInputContext.GetConnectionDetails">
            <summary>
            Returns hardcoded collection of connection strings. 
            </summary>
            <returns>ConnectionStringSettingsCollection</returns>
        </member>
        <member name="T:Tests.PureXmlTransformerTest">
            <summary>
            Tests for the pure xml transformer
            </summary>
        </member>
        <member name="M:Tests.PureXmlTransformerTest.SetUpTests">
            <summary>
            Setup for PureXmlTransformer tests
            </summary>
        </member>
        <member name="M:Tests.PureXmlTransformerTest.Test1PureXmlTransformer">
            <summary>
            PureXmlTransformer test
            </summary>
        </member>
        <member name="T:Tests.RecentSearchTests">
            <summary>
            Tests for added and getting recent searches
            </summary>
        </member>
        <member name="F:Tests.RecentSearchTests._schemaUri">
            <summary>
            XML Schema
            </summary>
        </member>
        <member name="M:Tests.RecentSearchTests.AddRecentSearchTests">
            <summary>
            Test the ability to add and retrieve latest search terms for a given site and type
            </summary>
        </member>
        <member name="T:Tests.RefereeListTests">
             <summary>
            Referee List Tests
             </summary>
        </member>
        <member name="M:Tests.RefereeListTests.TestGetRefereeList">
            <summary>
            Test that we get a correct list of referees
            </summary>
        </member>
        <member name="T:Tests.ReviewForumTests">
            <summary>
            Tests for the Review Forum
            </summary>
        </member>
        <member name="F:Tests.ReviewForumTests._schemaUri">
            <summary>
            XML Schema
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.StartUp">
            <summary>
            Set up function
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test01GetReviewForumTest">
            <summary>
            Test the getting the Review Forum
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test02GetReviewForumThreadsLastPostedTest">
            <summary>
            Test the getting the Review Forum Thread list - Last posted order
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test03GetReviewForumThreadsAuthorIDTest">
            <summary>
            Test the getting the Review Forum Thread list - AUTHORID order
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test04GetReviewForumThreadsAUTHORNAMETest">
            <summary>
            Test the getting the Review Forum Thread list - AUTHORNAME order
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test05GetReviewForumThreadsDATEENTEREDTest">
            <summary>
            Test the getting the Review Forum Thread list - DATEENTERED order
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test06GetReviewForumThreadsH2G2IDTest">
            <summary>
            Test the getting the Review Forum Thread list - H2G2ID order
            </summary>
        </member>
        <member name="M:Tests.ReviewForumTests.Test07GetReviewForumThreadsSUBJECTTest">
            <summary>
            Test the getting the Review Forum Thread list - SUBJECT order
            </summary>
        </member>
        <member name="T:Tests.SiteTestInputContext">
            <summary>
            Class to fake InputContext when testing Sites etc 
            </summary>
        </member>
        <member name="T:Tests.SkinParamsTests">
            <summary>
            Tests for SkinParams class
            </summary>
        </member>
        <member name="M:Tests.SkinParamsTests.TestSkinParams">
            <summary>
            Test having two s_params in the request among others
            </summary>
        </member>
        <member name="M:Tests.SkinParamsTests.TestAbsentSkinParams">
            <summary>
            Test having no parameters in the request
            </summary>
        </member>
        <member name="T:Tests.SkinSelectorTests">
            <summary>
            Test class for getting skins for a resquest.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.SetUp">
            <summary>
            Sets up the field mock objects
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.TearDown">
            <summary>
            verifies all the mocks created by the mockery have met their expectations.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillLowerCaseTheDefaultSkin">
            <summary>
            Test that the default skin will be lower cased
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillSelectPreferredSkin">
            <summary>
            ?Test the the skin will be defined by the users preferences when no skin specified.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillSelectPreferredSkinWithInvalidRequestedSkin">
            <summary>
            ?Test the the skin will be defined by the users preferences when no skin specified.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillLowerCaseRequestedSkin">
            <summary>
            Test that the requested skin will be lower cased
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillSelectRequestedSkin">
            <summary>
            Test that we will use the next valid skin when the requested skin is invalid for the site.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillSelectRequestedSkinWithPreferredSkin">
            <summary>
            ?Test the the skin will be defined by the users preferences when no skin specified.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillSelectSiteDefault">
            <summary>
            Test that the default skin is fetched when no params specified
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WillSelectSiteDefaultWithInvalidPreferredSkin">
            <summary>
            Test that the default skin will be used when the user preferred skin is invalid and no URL Specified skin
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.SiteHasDefaultSkinAndUserPreferenceEqualsDefault_ExpectSitesDefaultSkin">
            <summary>
            Test to make sure the sites default skin is used instead of the users if the users preference is set to 'default'
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WhenSkinNameIsPurexmlThenSkinIsAlwaysValid">
            <summary>
            Test special case for when requested skin is purexml.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WhenSkinNameIsUppercaseXmlThenSkinIsAlwaysValid">
            <summary>
            Test special case for when requested skin is PUREXML.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WhenSkinNameIsXmlThenSkinIsAlwaysValid">
            <summary>
            Test special case for when requested skin is purexml.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WhenSkinNameIsUppercasePurexmlThenSkinIsAlwaysValid">
            <summary>
            Test special case for when requested skin is PUREXML.
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WhenSkinNameEndsInDashXml_ReturnsXmlSkin">
            <summary>
            Tests special case when a skin name ends in -xml
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.WhenSkinNameEndsInDashUppercaseXml_ReturnsXmlSkin">
            <summary>
            Tests special case when a skin name ends in -XML
            </summary>
        </member>
        <member name="M:Tests.SkinSelectorTests.ThrowsAnExceptionWhenTheresNoDefaultSkinForTheSiteAndNoOtherSkinHasBeenSpecified">
            <summary>
            test that we get an exception when there's no default skin for the site, and no other skin has been specified
            </summary>
        </member>
        <member name="T:Tests.SkinTests">
            <summary>
            Tests for the skins Class
            </summary>
        </member>
        <member name="M:Tests.SkinTests.Test1CreateSkinClassTest">
            <summary>
            Test1CreateSkinClassTest
            </summary>
        </member>
        <member name="M:Tests.SkinTests.Test2AssignSkinDescription">
            <summary>
            Test2AssignSkinDescription
            </summary>
        </member>
        <member name="M:Tests.SkinTests.Test3AssignSkinName">
            <summary>
            Test3AssignSkinName
            </summary>
        </member>
        <member name="M:Tests.SkinTests.Test4AssignSkinUseFrames">
            <summary>
            Test4AssignSkinUseFrames
            </summary>
        </member>
        <member name="M:Tests.SkinTests.Test5CreateSkinWithInitialValues">
            <summary>
            Test5CreateSkinWithInitialValues
            </summary>
        </member>
        <member name="M:Tests.SkinTests.Test6CreateSkinFromSkin">
            <summary>
            Test6CreateSkinFromSkin
            </summary>
        </member>
        <member name="T:Tests.StatusComponentTest">
            <summary>
            Test class for testing the status object.
            This class also demonstrates how to intergrate NMock and the different types of tests we write
            </summary>
        </member>
        <member name="M:Tests.StatusComponentTest.SetUp">
            <summary>
            Sets up the tests mock and datareader objects
            </summary>
        </member>
        <member name="M:Tests.StatusComponentTest.TearDown">
            <summary>
            Make sure the Verify Expetations gets called
            </summary>
        </member>
        <member name="M:Tests.StatusComponentTest.SystemTesting">
            <summary>
            This test demonstrates how to write system tests. System tests are tests that test combinations of objects. Here the status object
            requires the database to see if it running or not. We are mocking up the inputcontext, but returning a real datareader from that mockery!
            </summary>
        </member>
        <member name="M:Tests.StatusComponentTest.UnitTestStatusOK">
            <summary>
            This test demonstrates how to write a unit test. The unit test only tests the code with in a single object.
            Any dependancies are Mocked up.
            </summary>
        </member>
        <member name="M:Tests.StatusComponentTest.UnitTestStatusFailed">
            <summary>
            This test demonstrates how to write a unit test. The unit test only tests the code with in a single object.
            Any dependancies are Mocked up.
            </summary>
        </member>
        <member name="T:Tests.SubNotificationEmailTests">
            <summary>
            Tests for the sub notification email
            </summary>
        </member>
        <member name="F:Tests.SubNotificationEmailTests._schemaUri">
            <summary>
            XML Schema
            </summary>
        </member>
        <member name="M:Tests.SubNotificationEmailTests.GetSubNotificationEmailTest">
            <summary>
            Test the get Sub Notification email
            </summary>
        </member>
        <member name="M:Tests.TestInputContextComponent.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Forum component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="T:Tests.TimedPreModeratedUserTests">
            <summary>
            Tests the PreModerated User Time Limit.
            Checks that the users status is updated on leaving the premoderated time limit.
            </summary>
        </member>
        <member name="M:Tests.TimedPreModeratedUserTests.TestUserTakenOutOfTimedPremod">
            <summary>
            This checks to make sure that user that has been premoded for a set time period gets their prefstatus updated
            correctly when that time period is up.
            </summary>
        </member>
        <member name="M:Tests.TimedPreModeratedUserTests.CreateUserInDatabase(BBC.Dna.IInputContext,System.Int32)">
            <summary>
            Helper method for creating a new user in the database
            </summary>
            <param name="context">The context in which to create the data reader</param>
            <param name="autoSinBinExpectedValue">The expected value for the autosinbin when checked</param>
            <returns>The id of the new user</returns>
        </member>
        <member name="T:Tests.UITemplateTests">
            <summary>
            Test class for the banned emails functionality
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Setup">
            <summary>
            Setup method
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test01CreateUITemplate">
            <summary>
            Test for creating a template
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test02GetUITemplate">
            <summary>
            Test for getting a template
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test03UpdateUITemplateReplacesFields">
            <summary>
            Test for updating a template replacing the existing fields with new ones
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test04UpdateUITemplateUpdateFields">
            <summary>
            Test for updating a template updating the existing fields
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test05GetUITemplateID0">
            <summary>
            Test for getting an incorrect template id 0
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test06GetIncorrectUITemplate">
            <summary>
            Test for getting an incorrect template 999999999
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test07GetUITemplateForValidationParamsOK">
            <summary>
            Test for actually using the template
            </summary>
        </member>
        <member name="M:Tests.UITemplateTests.Test08GetUITemplateForValidationParamsWithProfanity">
            <summary>
            Test for actually using the template with a profanity
            </summary>
        </member>
        <member name="T:Tests.URLFilterTests">
            <summary>
            Tests for URLFilterTests.
            </summary>
        </member>
        <member name="M:Tests.URLFilterTests.CheckifContainsUrls">
            <summary>
            Check if some text contains some URLs.
            </summary>
        </member>
        <member name="T:Tests.UserGroupsTests">
            <summary>
            Test Fixute for the UserGroups class
            </summary>
        </member>
        <member name="M:Tests.UserGroupsTests.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.UserGroupsTests.Test1GetUserGroups">
            <summary>
            First UserGroups Test.
            </summary>
        </member>
        <member name="M:Tests.UserGroupsTests.Test2CheckGroupNameXml">
            <summary>
            Second UserGroups Test.
            </summary>
        </member>
        <member name="M:Tests.UserGroupsTests.SetupTestData">
            <summary>
            Setupo function tomake sure that there is at least one comment in a comment box by the test user
            </summary>
        </member>
        <member name="M:Tests.UserGroupsTests.TestRecacheGroupsVia_gc">
            <summary>
            Tests to make sure that when the _gc parma is used, that the groups get recached
            </summary>
        </member>
        <member name="M:Tests.UserGroupsTests.AddUserToGroup(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Helper function for adding a user to a group on a given site
            </summary>
            <param name="userID">The id of the user you want to add to a group</param>
            <param name="siteID">The id of the site that the groups should be added to</param>
            <param name="groupName">The name of the group you want to add the user to</param>
            <param name="removeFromAllFirst">A flag that when set to true will remove the user from all groups before adding to the chosen group</param>
        </member>
        <member name="M:Tests.UserGroupsTests.AddUserToGroups(System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Helper function for adding a user to groups for a given site. Note that the user will be removed from all groups first
            </summary>
            <param name="userID">The id of the user you want to add the groups for</param>
            <param name="siteID">The id of the site that you want to add the groups to</param>
            <param name="groups">The list of groups that you want the user to belong to</param>
            <param name="removeFromAllFirst">A flag that when set to true will remove the user from all groups before adding to the chosen groups</param>
        </member>
        <member name="M:Tests.UserGroupsTests.RemoveUserFromAllGroupsForSite(System.Int32,System.Int32)">
            <summary>
            Helper function for removing users from all groups on a given site
            </summary>
            <param name="userID">The id of the user you want to remove from the groups</param>
            <param name="siteID">The dite that you want to remove the groups for</param>
        </member>
        <member name="M:Tests.UserGroupsTests.TearDown">
            <summary>
            Teardown function for making sure that the user is added back to the correct usergroups
            </summary>
        </member>
        <member name="T:Tests.UserListTests">
            <summary>
            Tests for the UserList class
            </summary>
        </member>
        <member name="F:Tests.UserListTests._InputContext">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Tests.UserListTests._schemaUri">
            <summary>
            schema
            </summary>
        </member>
        <member name="M:Tests.UserListTests.#ctor">
            <summary>
            Constructor for the User Tests to set up the context for the tests
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test1UserListClassTest_CreateNewUsersList">
            <summary>
            Tests CreateNewUsersList
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test2UserListClassTest_CreateSubEditorsList">
            <summary>
            Tests CreateSubEditorsList
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test3UserListClassTest_CreateGroupMembershipList">
            <summary>
            Tests CreateGroupMembershipList
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test4UserListClassTest_CreateGroupMembershipList">
            <summary>
            Tests CreateGroupMembershipList
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test5UserListClassTest_GetUserIDs">
            <summary>
            Tests GetUserIDs
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test6UserListClassTest_FindUserInList">
            <summary>
            Tests FindUserInList
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test7UserListClassTest_RemoveUser">
            <summary>
            Tests RemoveUser
            </summary>
        </member>
        <member name="M:Tests.UserListTests.Test8UserListClassTest_AddCurrentUserToList">
            <summary>
            Tests AddCurrentUserToList
            </summary>
        </member>
        <member name="T:Tests.UserTests">
            <summary>
            Tests for the User Class
            </summary>
        </member>
        <member name="M:Tests.UserTests.#ctor">
            <summary>
            Constructor for the User Tests to set up the context for the tests
            </summary>
        </member>
        <member name="M:Tests.UserTests.Test1CreateUserClassTest">
            <summary>
            Test1CreateUserClassTest
            </summary>
        </member>
        <member name="M:Tests.UserTests.Test2GetUserIDTest">
            <summary>
            Test2GetUserIDTest
            </summary>
        </member>
        <member name="M:Tests.UserTests.Test3GetUserNameTest">
            <summary>
            Test3GetUserNameTest
            </summary>
        </member>
        <member name="M:Tests.UserTests.Test4GetUserEmailTest">
            <summary>
            Test4GetUserEmailTest
            </summary>
        </member>
        <member name="M:Tests.UserTests.Test5CheckUserGroups">
            <summary>
            Test5CheckUserGroups
            </summary>
        </member>
        <member name="M:Tests.UserTests.Test6CheckUserNameChange">
            <summary>
            Test6CheckUserNameChange
            </summary>
        </member>
        <member name="T:Tests.WholePageTests">
            <summary>
            Class to test the WholePage component
            </summary>
        </member>
        <member name="M:Tests.WholePageTests.TestUrlSkinName">
            <summary>
            Test the URL Skin name is put into the XML returned by the WholePage
            </summary>
        </member>
        <member name="T:Tests.XmlTransOutputContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tests.XmlTransOutputContext.GetSkinPath(System.String)">
            <summary>
            
            </summary>
            <param name="leaf"></param>
            <returns></returns>
        </member>
        <member name="M:Tests.XmlTransOutputContext.CacheObject(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Tests.XmlTransOutputContext.CreateRequestCacheKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tests.XmlTransOutputContext.GetCachedXslTransform(System.String)">
            <summary>
            
            </summary>
            <param name="xsltFileName"></param>
            <returns></returns>
        </member>
        <member name="P:Tests.XmlTransOutputContext.DebugSkinFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tests.XmlTransformerTests">
            <summary>
            Tests for the XML transformer class
            </summary>
        </member>
        <member name="M:Tests.XmlTransformerTests.SetUpTests">
            <summary>
            Setup for PureXmlTransformer tests
            </summary>
        </member>
        <member name="M:Tests.XmlTransformerTests.TestXmltransformer">
            <summary>
            PureXmlTransformer test
            </summary>
        </member>
        <member name="T:Tests.XSLTCachingTests">
            <summary>
            Test class for testing the xslt caching system
            </summary>
        </member>
        <member name="M:Tests.XSLTCachingTests.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Tests.XSLTCachingTests.SetUpXSLTCachingTests">
            <summary>
            Setup function that creates the XSLT file that we will test the xslt transform caching with
            </summary>
        </member>
        <member name="M:Tests.XSLTCachingTests.TearDownXSLTCachingTests">
            <summary>
            Tears down the XSLT caching tests
            </summary>
        </member>
        <member name="M:Tests.XSLTCachingTests.TestXSLTCaching">
            <summary>
            Test function for testing xslt caching
            </summary>
        </member>
        <member name="M:Tests.XSLTCachingTests.CreateXSLTFile(System.String)">
            <summary>
            Creates a string that represents a simple xslt file with a given body
            </summary>
            <param name="body">The text that you want to put in the body</param>
            <returns>The string that represents the xslt file</returns>
        </member>
    </members>
</doc>
