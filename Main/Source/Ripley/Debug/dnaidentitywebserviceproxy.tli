// Created by Microsoft (R) C/C++ Compiler Version 12.00.31101.0 (bd010cf3).
//
// c:\ws\projects\dna\main\source\ripley\debug\dnaidentitywebserviceproxy.tli
//
// Wrapper implementations for Win32 type library ..\Reference DLLs\DnaIdentityWebServiceProxy.tlb
// compiler-generated file created 06/25/15 at 15:57:02 - DO NOT EDIT!

#pragma once

//
// interface IDnaIdentityWebServiceProxy wrapper method implementations
//

inline enum SignInSystem IDnaIdentityWebServiceProxy::GetSignInSystemType ( ) {
    enum SignInSystem _result;
    HRESULT _hr = get_SignInSystemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::Initialise ( _bstr_t connectionDetails, _bstr_t clientIPAddress ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Initialise(connectionDetails, clientIPAddress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::GetIsUserLoggedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::GetIsUserSignedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserSignedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::DoesAttributeExistForService ( _bstr_t service, _bstr_t attributeName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DoesAttributeExistForService(service, attributeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetUserAttribute ( _bstr_t attributeName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUserAttribute(attributeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDnaIdentityWebServiceProxy::SetService ( _bstr_t serviceName ) {
    HRESULT _hr = raw_SetService(serviceName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::GetIsServiceSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsServiceSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::TrySetUserViaCookie ( _bstr_t cookieValue ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TrySetUserViaCookie(cookieValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::TrySetUserViaUserNamePassword ( _bstr_t userName, _bstr_t password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TrySetUserViaUserNamePassword(userName, password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::TrySetUserViaCookieAndUserName ( _bstr_t cookie, _bstr_t userName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TrySetUserViaCookieAndUserName(cookie, userName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::TrySecureSetUserViaCookies ( _bstr_t cookie, _bstr_t secureCookie ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TrySecureSetUserViaCookies(cookie, secureCookie, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::LoginUser ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoginUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetUserID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetLoginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LoginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDnaIdentityWebServiceProxy::GetServiceMinMaxAge ( _bstr_t serviceName, long * minAge, long * maxAge ) {
    HRESULT _hr = raw_GetServiceMinMaxAge(serviceName, minAge, maxAge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDnaIdentityWebServiceProxy::CloseConnections ( ) {
    HRESULT _hr = raw_CloseConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDnaIdentityWebServiceProxy::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetGetCookieValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetCookieValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetGetSecureCookieValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetSecureCookieValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDnaIdentityWebServiceProxy::LogoutUser ( ) {
    HRESULT _hr = raw_LogoutUser();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetLastError ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline SAFEARRAY * IDnaIdentityWebServiceProxy::GetDnaPolicies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetDnaPolicies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetLastTimingInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLastTimingInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDnaIdentityWebServiceProxy::GetAppNameSpacedAttribute ( _bstr_t cookie, _bstr_t appNameSpace, _bstr_t attributeName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAppNameSpacedAttribute(cookie, appNameSpace, attributeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::DoesAppNameSpacedAttributeExist ( _bstr_t cookie, _bstr_t appNameSpace, _bstr_t attributeName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DoesAppNameSpacedAttributeExist(cookie, appNameSpace, attributeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDnaIdentityWebServiceProxy::GetIsSecureRequest ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSecureRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
