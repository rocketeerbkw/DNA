// Created by Microsoft (R) C/C++ Compiler Version 12.00.31101.0 (02d75112).
//
// c:\ws\projects\dna\main\source\ripley\release\dnaidentitywebserviceproxy.tlh
//
// C++ source equivalent of Win32 type library ..\Reference DLLs\DnaIdentityWebServiceProxy.tlb
// compiler-generated file created 06/21/15 at 16:53:33 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("dec4bded-400a-44e5-838f-246987c37f1d"))
/* LIBID */ __DnaIdentityWebServiceProxy;
struct __declspec(uuid("9a45358a-f9dd-3cd4-b600-2c1677950689"))
/* dual interface */ IDnaIdentityWebServiceProxy;
struct /* coclass */ IdentityDebugSigninComponent;
enum SignInSystem;
struct /* coclass */ IdentityRestSignIn;
struct __declspec(uuid("8f62feb6-36bf-3a57-841b-554989bdbf48"))
/* dual interface */ _IdentityDebugSigninComponent;
struct __declspec(uuid("134385c6-f31b-3d1c-9b29-13b1f5813742"))
/* dual interface */ _IdentityRestSignIn;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IDnaIdentityWebServiceProxy, __uuidof(IDnaIdentityWebServiceProxy));
_COM_SMARTPTR_TYPEDEF(_IdentityDebugSigninComponent, __uuidof(_IdentityDebugSigninComponent));
_COM_SMARTPTR_TYPEDEF(_IdentityRestSignIn, __uuidof(_IdentityRestSignIn));

//
// Type library items
//

struct __declspec(uuid("157f9082-a9b9-3790-b4c2-17d75db8116e"))
IdentityDebugSigninComponent;
    // [ default ] interface _IdentityDebugSigninComponent
    // interface _Object
    // interface IDnaIdentityWebServiceProxy

enum __declspec(uuid("fc4aa730-49f7-3fe7-9f6a-7d83a19390ed"))
SignInSystem
{
    SignInSystem_Identity = 0,
    SignInSystem_SSO = 1
};

struct __declspec(uuid("9a45358a-f9dd-3cd4-b600-2c1677950689"))
IDnaIdentityWebServiceProxy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSignInSystemType))
    enum SignInSystem SignInSystemType;
    __declspec(property(get=GetIsUserLoggedIn))
    VARIANT_BOOL IsUserLoggedIn;
    __declspec(property(get=GetIsUserSignedIn))
    VARIANT_BOOL IsUserSignedIn;
    __declspec(property(get=GetIsServiceSet))
    VARIANT_BOOL IsServiceSet;
    __declspec(property(get=GetUserID))
    _bstr_t UserID;
    __declspec(property(get=GetLoginName))
    _bstr_t LoginName;
    __declspec(property(get=GetGetCookieValue))
    _bstr_t GetCookieValue;
    __declspec(property(get=GetGetSecureCookieValue))
    _bstr_t GetSecureCookieValue;
    __declspec(property(get=GetIsSecureRequest))
    VARIANT_BOOL IsSecureRequest;

    //
    // Wrapper methods for error-handling
    //

    enum SignInSystem GetSignInSystemType ( );
    VARIANT_BOOL Initialise (
        _bstr_t connectionDetails,
        _bstr_t clientIPAddress );
    VARIANT_BOOL GetIsUserLoggedIn ( );
    VARIANT_BOOL GetIsUserSignedIn ( );
    VARIANT_BOOL DoesAttributeExistForService (
        _bstr_t service,
        _bstr_t attributeName );
    _bstr_t GetUserAttribute (
        _bstr_t attributeName );
    HRESULT SetService (
        _bstr_t serviceName );
    VARIANT_BOOL GetIsServiceSet ( );
    VARIANT_BOOL TrySetUserViaCookie (
        _bstr_t cookieValue );
    VARIANT_BOOL TrySetUserViaUserNamePassword (
        _bstr_t userName,
        _bstr_t password );
    VARIANT_BOOL TrySetUserViaCookieAndUserName (
        _bstr_t cookie,
        _bstr_t userName );
    VARIANT_BOOL TrySecureSetUserViaCookies (
        _bstr_t cookie,
        _bstr_t secureCookie );
    VARIANT_BOOL LoginUser ( );
    _bstr_t GetUserID ( );
    _bstr_t GetLoginName ( );
    HRESULT GetServiceMinMaxAge (
        _bstr_t serviceName,
        long * minAge,
        long * maxAge );
    HRESULT CloseConnections ( );
    HRESULT Dispose ( );
    _bstr_t GetGetCookieValue ( );
    _bstr_t GetGetSecureCookieValue ( );
    HRESULT LogoutUser ( );
    _bstr_t GetLastError ( );
    SAFEARRAY * GetDnaPolicies ( );
    _bstr_t GetLastTimingInfo ( );
    _bstr_t GetVersion ( );
    _bstr_t GetAppNameSpacedAttribute (
        _bstr_t cookie,
        _bstr_t appNameSpace,
        _bstr_t attributeName );
    VARIANT_BOOL DoesAppNameSpacedAttributeExist (
        _bstr_t cookie,
        _bstr_t appNameSpace,
        _bstr_t attributeName );
    VARIANT_BOOL GetIsSecureRequest ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SignInSystemType (
        /*[out,retval]*/ enum SignInSystem * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Initialise (
        /*[in]*/ BSTR connectionDetails,
        /*[in]*/ BSTR clientIPAddress,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUserLoggedIn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUserSignedIn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DoesAttributeExistForService (
        /*[in]*/ BSTR service,
        /*[in]*/ BSTR attributeName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetUserAttribute (
        /*[in]*/ BSTR attributeName,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetService (
        /*[in]*/ BSTR serviceName ) = 0;
      virtual HRESULT __stdcall get_IsServiceSet (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TrySetUserViaCookie (
        /*[in]*/ BSTR cookieValue,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TrySetUserViaUserNamePassword (
        /*[in]*/ BSTR userName,
        /*[in]*/ BSTR password,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TrySetUserViaCookieAndUserName (
        /*[in]*/ BSTR cookie,
        /*[in]*/ BSTR userName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TrySecureSetUserViaCookies (
        /*[in]*/ BSTR cookie,
        /*[in]*/ BSTR secureCookie,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoginUser (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UserID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LoginName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetServiceMinMaxAge (
        /*[in]*/ BSTR serviceName,
        /*[in,out]*/ long * minAge,
        /*[in,out]*/ long * maxAge ) = 0;
      virtual HRESULT __stdcall raw_CloseConnections ( ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
      virtual HRESULT __stdcall get_GetCookieValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GetSecureCookieValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LogoutUser ( ) = 0;
      virtual HRESULT __stdcall raw_GetLastError (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDnaPolicies (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLastTimingInfo (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetVersion (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAppNameSpacedAttribute (
        /*[in]*/ BSTR cookie,
        /*[in]*/ BSTR appNameSpace,
        /*[in]*/ BSTR attributeName,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DoesAppNameSpacedAttributeExist (
        /*[in]*/ BSTR cookie,
        /*[in]*/ BSTR appNameSpace,
        /*[in]*/ BSTR attributeName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSecureRequest (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("8d1cc781-0a6e-383f-bb12-8204b60b578c"))
IdentityRestSignIn;
    // [ default ] interface _IdentityRestSignIn
    // interface _Object
    // interface IDnaIdentityWebServiceProxy

struct __declspec(uuid("8f62feb6-36bf-3a57-841b-554989bdbf48"))
_IdentityDebugSigninComponent : IDispatch
{};

struct __declspec(uuid("134385c6-f31b-3d1c-9b29-13b1f5813742"))
_IdentityRestSignIn : IDispatch
{};

//
// Wrapper method implementations
//

#include "c:\ws\projects\dna\main\source\ripley\release\dnaidentitywebserviceproxy.tli"

#pragma pack(pop)
