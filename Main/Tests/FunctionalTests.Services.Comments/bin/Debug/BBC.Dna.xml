<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BBC.Dna</name>
    </assembly>
    <members>
        <member name="T:BBC.Dna.AppContext">
            <summary>
            An application-wide context.  Contains configuration, site lists, etc
            </summary>
        </member>
        <member name="T:BBC.Dna.IAppContext">
            <summary>
            Interface representing all base Dna functionality at the application level
            </summary>
        </member>
        <member name="M:BBC.Dna.IAppContext.CreateDnaDataReader(System.String)">
            <summary>
            Creates concrete instance of a class that implements the IDnaDataReader interface.
            The context is responsible for creating the appropriate concrete instance.
            </summary>
            <param name="name">Name to be passed to the constructor of the concrete IDnaDataReader object.</param>
            <returns>IDnaDataReader interface of the concrete instance created.</returns>
        </member>
        <member name="M:BBC.Dna.IAppContext.CreateDnaDataReader(System.String,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            Creates concrete instance of a class that implements the IDnaDataReader interface.
            The context is responsible for creating the appropriate concrete instance.
            </summary>
            <param name="name">Name to be passed to the constructor of the concrete IDnaDataReader object.</param>
            <param name="dnaDiagnostics">The diagnostics object to use for log writing</param>
            <returns>IDnaDataReader interface of the concrete instance created.</returns>
        </member>
        <member name="M:BBC.Dna.IAppContext.UrlEscape(System.String)">
            <summary>
            Escapes the string to make it safe for a URL
            </summary>
            <param name="text">The text to escape</param>
            <returns>an escaped version suitable for using on a URL</returns>
        </member>
        <member name="M:BBC.Dna.IAppContext.EnsureAllowedURLsExists(System.Boolean,BBC.Dna.IAppContext)">
            <summary>
            Ensures that the non allowed url list data is created and loaded. Can be called to reload the data from the database
            with the recacheData flag set to true.
            </summary>
            <param name="recacheData">Set to true will create a new list and replace the old. False will just ensure that there is a valid list to use</param>
            <param name="context">The context that it's running under</param>
        </member>
        <member name="M:BBC.Dna.IAppContext.GetSiteOptionValueInt(System.Int32,System.String,System.String)">
            <summary>
            Gets the given int site option for the given site
            <see cref="M:BBC.Dna.Sites.SiteOptionList.GetValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="siteId">The site id</param>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.IAppContext.GetSiteOptionValueBool(System.Int32,System.String,System.String)">
            <summary>
            Gets the given bool site option for the given site
            <see cref="M:BBC.Dna.Sites.SiteOptionList.GetValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="siteId">The site id</param>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.IAppContext.GetSiteOptionValueString(System.Int32,System.String,System.String)">
            <summary>
            Gets the given bool site option for the current site
            <see cref="M:BBC.Dna.Sites.SiteOptionList.GetValueString(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="siteId">The site id</param>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.IAppContext.FileCacheGetItem(System.String,System.String,System.DateTime@,System.String@)">
            <summary>
            Implementation of the Ripley XML caching method. Stores a string in a file in the RipleyCache folder in a 
            subdirectory called pCacheName with the filename pItemName
            </summary>
            <param name="cacheName">Name of folder in cache</param>
            <param name="itemName">name of filename</param>
            <param name="expires">earliest date we want from cache - returns with the actual date of the object</param>
            <param name="cachedString">Text from cached file</param>
            <returns>True if we found an object that's newer than the date passed in</returns>
        </member>
        <member name="M:BBC.Dna.IAppContext.FileCachePutItem(System.String,System.String,System.String)">
            <summary>
            Implementation of the Ripley file caching method
            </summary>
            <param name="cacheName">Name of folder in cache</param>
            <param name="itemName">name of filename</param>
            <param name="stringToCache">string of XML to cache</param>
            <returns>True if cached successfully</returns>
        </member>
        <member name="P:BBC.Dna.IAppContext.GetConnectionDetails">
            <summary>
            The Get profile connection details property interface
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.Diagnostics">
            <summary>
            All diagnostics should be written through this instance of IDnaDiagnostics
            </summary>
            <see cref="T:BBC.Dna.Utils.IDnaDiagnostics"/>
        </member>
        <member name="P:BBC.Dna.IAppContext.TheSiteList">
            <summary>
            The SiteList for the app context
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.AllowedURLs">
            <summary>
            The AllowedURLs for the app context
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.BannedUserAgents">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.CurrentServerName">
            <summary>
            Gets the current machine name
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.IsRunningOnDevServer">
            <summary>
            Is the server this instance is running on a dev server?  This property reveals all
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.MaximumRequestCount">
            <summary>
            The maximum number of concurrent requests the app allows
            </summary>
        </member>
        <member name="P:BBC.Dna.IAppContext.UseXSLTTransformerWithLargeStack">
            <summary>
            Use the XSLT Transformer with a large stack
            The transformer only works on IIS7 when it has a larger stack
            </summary>
        </member>
        <member name="M:BBC.Dna.AppContext.OnDnaStartup(System.String)">
            <summary>
            Designed to be called once at application Start-up
            </summary>
            <param name="rootPath">The folder that's the root of the application</param>
        </member>
        <member name="M:BBC.Dna.AppContext.#ctor(System.String)">
            <summary>
            Creates an AppContext, given the root path of the app, where it can find config info
            </summary>
            <param name="rootPath">Path where app lives</param>
        </member>
        <member name="M:BBC.Dna.AppContext.CreateDnaDataReader(System.String)">
            <summary>
            Create a DnaDataReader for this input context.
            </summary>
            <param name="name">Name passed to DnaDataReader constructor</param>
            <returns>Instance of a DnaDataReader.</returns>
        </member>
        <member name="M:BBC.Dna.AppContext.CreateDnaDataReader(System.String,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            Create a DnaDataReader for this input context.
            </summary>
            <param name="name">Name passed to DnaDataReader constructor</param>
            <param name="dnaDiagnostics">The diagnostics object that's used for log writing</param>
            <returns>Instance of a DnaDataReader.</returns>
        </member>
        <member name="M:BBC.Dna.AppContext.UrlEscape(System.String)">
            <summary>
            Escapes a string safely for use in URLs
            </summary>
            <param name="text">text to escape</param>
            <returns>Escaped version of the text</returns>
        </member>
        <member name="M:BBC.Dna.AppContext.EnsureAllowedURLsExists(System.Boolean,BBC.Dna.IAppContext)">
            <summary>
            Ensures that the allowed url list data is created and loaded. Can be called to reload the data from the database
            with the recacheData flag set to true.
            </summary>
            <param name="context">The context</param>
            <param name="recacheData">Set to true will create a new list and replace the old. False will just ensure that there is a valid list to use</param>
        </member>
        <member name="M:BBC.Dna.AppContext.GetSiteOptionValueInt(System.Int32,System.String,System.String)">
            <summary>
            Gets the given int site option for the given site
            </summary>
            <param name="siteId">The site id</param>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.AppContext.GetSiteOptionValueBool(System.Int32,System.String,System.String)">
            <summary>
            Gets the given bool site option for the current site
            </summary>
            <param name="siteId">The site id</param>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.AppContext.GetSiteOptionValueString(System.Int32,System.String,System.String)">
            <summary>
            Gets the given string site option for the current site
            </summary>
            <param name="siteId">The site id</param>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.AppContext.FileCacheGetItem(System.String,System.String,System.DateTime@,System.String@)">
            <summary>
            <see cref="T:BBC.Dna.IAppContext"/>
            </summary>
        </member>
        <member name="M:BBC.Dna.AppContext.FileCachePutItem(System.String,System.String,System.String)">
            <summary>
            Put a cache item into the file cache
            </summary>
            <param name="cacheName">Name of cache directory</param>
            <param name="itemName">name of cache file</param>
            <param name="text">Text to store in the cache file</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.AppContext.FileCacheInvalidateItem(System.String,System.String)">
            <summary>
            Invalidates a particular Cache Item.
            </summary>
            <param name="cacheName"></param>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.AppContext.ReaderCreator">
            <summary>
            The creator of all database readers...
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.DnaCacheManager">
            <summary>
            The DNA Cache manager get property
            Used to cache objects as defined by the config cache settings
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.BannedCookies">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.BannedUserAgents">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.TheAppContext">
            <summary>
            The instance of the AppContext that's created on application start-up
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.TheSiteList">
            <summary>
            The SiteList for the application
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.AllowedURLs">
            <summary>
            The SiteList for the application
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.MaximumRequestCount">
            <summary>
            Maximum number of concurrent requests
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.UseXSLTTransformerWithLargeStack">
            <summary>
            Use the XSLT Transformer with a large stack
            The transformer only works on IIS7 when it has a larger stack
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.Config">
            <summary>
            The configuration of the application
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.GetConnectionDetails">
            <summary>
            Get Profile Connection Details property. Just returns the web.config Connection Strings
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.Diagnostics">
            <summary>
            All diagnostics should be written through this instance of IDnaDiagnostics
            </summary>
            <see cref="T:BBC.Dna.Utils.IDnaDiagnostics"/>
            <remarks>It's this object that implements log writing</remarks>
        </member>
        <member name="P:BBC.Dna.AppContext.CurrentServerName">
            <summary>
            Property to get the CurrentServerName
            </summary>
        </member>
        <member name="P:BBC.Dna.AppContext.IsRunningOnDevServer">
            <summary>
            Is the server this instance is running on a dev server?  This property reveals all
            </summary>
        </member>
        <member name="T:BBC.Dna.ArticleBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="T:BBC.Dna.DnaInputComponent">
            <summary>
            The component type you need to process requests
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.DnaComponent">
            <summary>
            DnaComponent - The base object for any Dna component
            </summary>
        </member>
        <member name="T:BBC.Dna.IDnaComponent">
            <summary>
            Basic Interface for the DnaComponent class
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:BBC.Dna.IDnaComponent.RootElement">
            <summary>
            Property exposing the root element of this component.
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.DnaComponent._XMLDoc">
            <summary>
            The XMLDocument for the component.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.ImportNode(System.Xml.XmlNode)">
            <summary>
            Helper function to import a node from another document.
            </summary>
            <param name="source">The node you want to import</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.CreateElementNode(System.String)">
            <summary>
            Helper function for creating a new Element node
            </summary>
            <param name="name">The name of the node you want to create</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.CreateElement(System.String)">
            <summary>
            Helper function for creating a new Element
            </summary>
            <param name="name">The name of the node you want to create</param>
            <returns>The new element or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddElementTag(System.Xml.XmlNode,System.String)">
            <summary>
            Helper function for adding a new element node to an existing node
            </summary>
            <param name="parent">The node that you want to add this node to</param>
            <param name="name">The name of the new node</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddElementTag(System.Xml.XmlElement,System.String)">
            <summary>
            Helper function for adding a new element node to an existing Element
            </summary>
            <param name="parent">The Element that you want to add this Element to</param>
            <param name="name">The name of the new Element</param>
            <returns>The new Element or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddTextTag(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Helper function for adding a new text node to an existing node
            </summary>
            <param name="parent">The node that you want to add this node to</param>
            <param name="name">The name of the new node</param>
            <param name="value">The value for the new node</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddXmlTextTag(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Helper function for adding a text node to an existing node, where the text
            is know to be Xml compliant (i.e. already suitably escaped, well formed, etc)
            
            Use this function when you don't want the XmlNode to escape the text again
            when it's converted to a string.
            
            If the "value" is not Xml compliant, it calls AddTextTag() instead as a fall-back
            option
            
            </summary>
            <param name="parent">The node that you want to add this node to</param>
            <param name="name">The name of the new node</param>
            <param name="value">The value for the new node</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Helper function for adding a new element to an existing node. 
            </summary>
            <param name="parent">The node you want to add to.</param>
            <param name="name">The name of the new node.</param>
            <param name="elementXml">String representation of the children of element named in param name.</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Helper function for adding a new element to an existing element. 
            </summary>
            <param name="parent">The element you want to add to.</param>
            <param name="name">The name of the new element.</param>
            <param name="elementXml">String representation of the children of element named in param name.</param>
            <returns>The new element or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddElement(System.Xml.XmlNode,System.String,System.Xml.XmlElement)">
            <summary>
            Helper function for adding an XnlElement to an existing node. 
            </summary>
            <param name="parent">The node you want to add to.</param>
            <param name="name">The name of the new node.</param>
            <param name="child">The child of element named in param name.</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddElement(System.String,System.String,System.String)">
            <summary>
            Helper function for adding a new element to an existing node
            </summary>
            <param name="parentTagName">Name of parent node</param>
            <param name="name">Name of new element to create</param>
            <param name="elementXml">String representation of children of new element</param>
            <returns>The new node, or Null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddWholeDocument(System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
            Insert an entire XmlDocument at the specified position in the current document
            </summary>
            <param name="parent">Parent node to which the document's nodes should be attached</param>
            <param name="document">XmlDocument object to insert as a child of parent</param>
            <returns>The XmlNode of the inserted tree</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddWholeDocument(System.Xml.XmlNode,System.String,System.Xml.XmlDocument)">
            <summary>
            Insert an entire XmlDocument at the specified position, wrapped in a node with the given name
            </summary>
            <param name="parent">Parent node to which the outer node should be attached</param>
            <param name="outername">Element name for the outer node</param>
            <param name="document">XmlDocument whose nodes should be inserted within the outernode</param>
            <returns>The XmlNode of the outer node</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.RipleyAddInside(System.Xml.XmlNode,System.String)">
            <summary>
            A Ripley-like function to insert a string chunk of XML at the required point of the document
            </summary>
            <param name="parent">Node to which to add this chunk</param>
            <param name="xmlFragment">string of XML to insert</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddInside(System.Xml.XmlNode,BBC.Dna.IDnaComponent)">
            <summary>
            Adds the XML contents of a DnaComponent to the current component at the specified node
            </summary>
            <param name="parent">Parent node to which to add the imported nodes</param>
            <param name="component">DnaComponent whose XML should be appended</param>
            <returns>The imported node</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddInside(System.Xml.XmlNode,BBC.Dna.IDnaComponent,System.String)">
            <summary>
            Adds the XmlNode from the given component to the specified parent
            </summary>
            <param name="parent">Parent node to which to add the imported node</param>
            <param name="component">DnaComponent whose node should be appended</param>
            <param name="xpathNode">The xpath of the node that you want to append to the parent node</param>
            <returns>The imported node</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddTextTag(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Helper function for adding a new text node to an existing node
            </summary>
            <param name="parent">The node that you want to add this node to</param>
            <param name="name">The name of the new node</param>
            <param name="value">The value for the new node</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Helper function for adding a new attribute to a node
            </summary>
            <param name="node">The node that you want to add the attribute to</param>
            <param name="name">The name of the new attribute</param>
            <param name="value">The value for the new attribute</param>
            <returns>The attribute or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddAttribute(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Helper function for adding a new attribute to a node
            </summary>
            <param name="node">The node that you want to add the attribute to</param>
            <param name="name">The name of the new attribute</param>
            <param name="value">The value for the new attribute</param>
            <returns>The attribute or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddAttribute(System.Xml.XmlNode,System.String,System.Double)">
            <summary>
            Helper function for adding a new double value attribute to a node
            </summary>
            <param name="node">The node that you want to add the attribute to</param>
            <param name="name">The name of the new attribute</param>
            <param name="value">The double value for the new attribute</param>
            <returns>The attribute or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddAttribute(System.Xml.XmlElement,System.String,System.Int32)">
            <summary>
            Helper function for adding a new attribute to a element
            </summary>
            <param name="element">The element that you want to add the attribute to</param>
            <param name="name">The name of the new attribute</param>
            <param name="value">The value for the new attribute</param>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddAttribute(System.Xml.XmlElement,System.String,System.Double)">
            <summary>
            Helper function for adding a new attribute to a element
            </summary>
            <param name="element">The element that you want to add the attribute to</param>
            <param name="name">The name of the new attribute</param>
            <param name="value">The value for the new attribute</param>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddAttribute(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Helper function for adding a new bool attribute to a element
            </summary>
            <param name="element">The element that you want to add the attribute to</param>
            <param name="name">The name of the new attribute</param>
            <param name="value">The bool value for the new attribute</param>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddInside(BBC.Dna.IDnaComponent)">
            <summary>
            Inserts a given DnaComponents XML into the current page at the Root
            </summary>
            <param name="component">The component you want to insert</param>
            <returns>True if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddInside(BBC.Dna.IDnaComponent,System.String)">
            <summary>
            Inserts a given DnaComponents XML into the current page
            </summary>
            <param name="component">The component you want to insert</param>
            <param name="nodeName">The name of the node you want to insert the component into. Leave empty to insert on the root node</param>
            <returns>True if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.ImportAndAppend(System.Xml.XmlNode,System.String)">
            <summary>
            Imports a given node from a different XmlDocument object and Appends it to the given
            XPath defined node.
            </summary>
            <param name="xmlNodeToImport">The xml node that you want to Import and append</param>
            <param name="parentNodeXPath">The XPath to the parent node you want to add to. If this is empty
            then the node is appended to the root element</param>
            <returns>The node that was imported</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.SerialiseAndAppend(System.Object,System.String)">
            <summary>
            Imports a given node from a different XmlDocument object and Appends it to the given
            XPath defined node.
            </summary>
            <param name="obj">The declarated object to serialise to xml and add</param>
            <param name="parentNodeXPath">The XPath to the parent node you want to add to. If this is empty
            then the node is appended to the root element</param>
            <returns>The node that was imported</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.SerialiseToXmlDoc(System.Object)">
            <summary>
            Serialises the given object to an XmlDocument
            </summary>
            <param name="obj">The given object</param>
            <returns>An XmlDocument representing the serialised object</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddErrorXml(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Helper function to format Error Xml.
            </summary>
            <param name="errortype">A categorisation of error</param>
            <param name="errormessage">Error description.</param>
            <param name="parent">Optional node to insert error into.</param>
            <returns>ALWAYS returns false</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddExtendedErrorXml(System.String,System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Like the AddErrorXml method, but adds extra information about the error.
            Example would be to display the html that is invalid when a use posts.
            </summary>
            <param name="errortype">A categorisation of error</param>
            <param name="errormessage">Error description.</param>
            <param name="extraInfo">Any extra information that goes with the current error</param>
            <param name="parent">Optional node to insert error into.</param>
            <returns>ALWAYS returns false</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.Destroy">
            <summary>
            Destroy everything below the object's root element
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddTextElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Helper function for adding a new text element to an existing element
            </summary>
            <param name="parent">The element that you want to add this element to</param>
            <param name="name">The name of the new element</param>
            <param name="value">The value for the new element</param>
            <returns>The new element or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddIntElement(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Helper function for adding a new Int element to an existing element
            </summary>
            <param name="parent">The element that you want to add this element to</param>
            <param name="name">The name of the new element</param>
            <param name="value">The int value for the new element</param>
            <returns>The new element or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddDateXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Add a date from the database in the correct DNADateFormat to the XML
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="parent">parent to add the xml to</param>
            <param name="columnName">Column name to extract the date data from</param>
            <param name="XMLName">Name of the element in the XML document to store the data data in</param>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddDateXml(System.DateTime,System.Xml.XmlNode,System.String)">
            <summary>
            Add a date xml from a DateTime in the correct DNADateFormat to the XML
            </summary>
            <param name="date">DateTime to represent</param>
            <param name="parent">parent to add the xml to</param>
            <param name="XMLName">Name of the element in the XML document to store the data data in</param>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.UpdateRelativeDates">
            <summary>
            Goes through the XML Tree updating all the relative dates
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.CreateAndInsertCachedXML(System.String,System.String,System.Boolean)">
            <summary>
            Creates and inserts cached XMLFiles
            </summary>
            <param name="cachedXML">The XML that represents the object</param>
            <param name="parentNodeName">The name of the node you want to import and it's children</param>
            <param name="removeExistsingChildren">A flag that lets you specify whether or not to remove any existing child nodes
            before inserting the new cached nodes</param>
            <returns>True if it created the cached object, false if it failed to parse</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.CreateAndInsertCachedXMLToANode(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates and inserts cached XMLFiles to a child
            </summary>
            <param name="cachedXML">The XML that represents the object</param>
            <param name="parentNodeName">The name of the node you want to import and it's children</param>
            <param name="removeExistsingChildren">A flag that lets you specify whether or not to remove any existing child nodes
            <param name="destinationXpath">The name of the node where you want to append the XML from the RootElement</param>
            before inserting the new cached nodes</param>
            <returns>True if it created the cached object, false if it failed to parse</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.ReplaceLineBreaksWithBreakTagsInTextNodes(System.Xml.XmlNode)">
            <summary>
            Looks through the given Nodes Text node children and replaces line breaks with BR tags
            </summary>
            <param name="startNode">The xml node to start look through</param>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.AddTextTag(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Helper function for adding a new text XmlElement to an existing node
            </summary>
            <param name="parent">The node that you want to add this node to</param>
            <param name="name">The name of the new node</param>
            <param name="value">The value for the new node</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.DnaComponent.MakeLinksFromUrls(System.Xml.XmlNode)">
            <summary>
            Given a text node in a tree, this will find any instances of URLs in it
            and replace them with link tags.
            If the node isn't a text node, this does nothing. If the node doesn't contain
            any URLs then it also does nothing
            </summary>
            <param name="node">a node (which should be a text node) in an XML Document</param>
        </member>
        <member name="P:BBC.Dna.Component.DnaComponent.RootElement">
            <summary>
            Gets the XmlElement representing the root of the xml representation of the component.
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.DnaComponent.IsEmpty">
            <summary>
            Tests to see if the Root Element of this document is empty or not
            </summary>
        </member>
        <member name="T:BBC.Dna.IDnaInputComponent">
            <summary>
            Basic Interface for the DnaInputComponent class
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:BBC.Dna.IDnaInputComponent.ProcessRequest">
            <summary>
            ProcessRequest is called by the DNA framework to ask this object to process the current request
            </summary>
            <remarks>
            If your component is able to work automatically by simply being added to the page,
            responding to parameters in the query string, then implement ProcessRequest to build
            your XML data, responding to parameters in the query string.
            </remarks>
        </member>
        <member name="M:BBC.Dna.IDnaInputComponent.AddResponseKeyValueDataCookie(System.String,System.Xml.XmlNode,System.String)">
            <summary>
            This method is used to store XML into the KeyValueData table and add the Key as a cookie
            to the response. The next request then picks up the cookie key and retrives and inserts the
            data back into it's own XML document.
            The main use for this is for SSI logic that redirects before getting back to the end user.
            </summary>
            <param name="name">The name of the cookie you want to store</param>
            <param name="dataValue">The XML that you want to be reinserted into the next request page</param>
            <param name="cookiePath">The path for the cookie</param>
            <returns>The DataKey as a string</returns>
        </member>
        <member name="M:BBC.Dna.IDnaInputComponent.GetKeyValueData(System.String)">
            <summary>
            Gets the Data value stored against the given key from the KeyValueData table
            </summary>
            <param name="dataKey">The key for the data</param>
            <returns>The value held for the key as a XmlDocument</returns>
        </member>
        <member name="P:BBC.Dna.IDnaInputComponent.InputContext">
            <summary>
            Get the value of the InputContext the interface for querying all aspects of the current request.
            </summary>
        </member>
        <member name="F:BBC.Dna.DnaInputComponent._inputContext">
            <summary>
            Interface for querying all aspects of thie current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaInputComponent.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Creates a component that acts on an IInputContext object - i.e. one 
            that needs to manipulate the request
            </summary>
            <remarks>
            IMPORTANT! DnaInputContext objects should not live longer that the request, otherwise
            a reference to the request object will hang around in the heap after the request has completed,
            causing all sorts of untold problems with resources and the like.
            
            If your object lives outsite a request (e.g. SiteList), derive from DnaComponent.  Pass in the
            InputContext to methods that need a context to operate (e.g. for accessing the db, writing diagnostics, etc)
            but make sure the reference isn't kept around in a member variable, hash table, etc.
            </remarks>
            <see cref="T:BBC.Dna.Component.DnaComponent"/>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.DnaInputComponent.ProcessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaInputComponent.AddDnaRedirect(System.String)">
            <summary>
            This method finds or creates the redirect tag and sets the url to the given dna page
            This method will use the current server and site and then append the given redirect
            </summary>
            <param name="dnaPageUrl">The page you want to redirect to</param>
            <returns>The Node that holds the redirect</returns>
        </member>
        <member name="M:BBC.Dna.DnaInputComponent.AddResponseKeyValueDataCookie(System.String,System.Xml.XmlNode,System.String)">
            <summary>
            This method is used to store XML into the KeyValueData table and add the Key as a cookie
            to the response. The next request then picks up the cookie key and retrives and inserts the
            data back into it's own XML document.
            The main use for this is for SSI logic that redirects before getting back to the end user.
            </summary>
            <param name="name">The name of the cookie you want to store</param>
            <param name="dataValue">The XML that you want to be reinserted into the next request page</param>
            <param name="cookiePath">The path for the cookie</param>
            <returns>The DataKey as a string</returns>
        </member>
        <member name="M:BBC.Dna.DnaInputComponent.GetKeyValueData(System.String)">
            <summary>
            Gets the Data value stored against the given key from the KeyValueData table
            </summary>
            <param name="dataKey">The key for the data</param>
            <returns>The value held for the key as a XmlDocument</returns>
        </member>
        <member name="P:BBC.Dna.DnaInputComponent.InputContext">
            <summary>
            Get the value of the InputContext the interface for querying all aspects of the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.ArticleBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.ArticleBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ArticleDiagnostic">
            <summary>
            Summary of the ArticleDiagnostic Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleDiagnostic.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ArticleDiagnostic component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleDiagnostic.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleDiagnostic.TryCreateArticleDiagnosticXML(System.Int32)">
            <summary>
            Functions generates the TryCreateArticleDiagnosticXML XML
            </summary>
            <param name="H2G2ID">H2G2 ID of the article to diagnose</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleDiagnostic.TryGetPageParams(System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="H2G2ID">H2G2 ID of the article to diagnose</param>
        </member>
        <member name="T:BBC.Dna.Component.ArticleHistory">
            <summary>
            ArticleHistory - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ArticleHistory component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.TryGetArticleHistory">
            <summary>
            Method called to try and create Article History, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.GetArticleHistoryXml(System.Int32)">
            <summary>
            Function to get the XML representation of the Article History results
            </summary>
            <param name="entryID">entryID to search for.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.TryGetPageParams(System.Int32@)">
            <summary>
            Try to gets the params for the page
            </summary>
            <param name="entryID">entry ID to search for.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.GenerateArticleHistoryXml(System.Int32)">
            <summary>
            Calls the correct stored procedure given the inputs selected
            </summary>
            <param name="entryID">entry ID to search for.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleHistory.GenerateArticleHistoryXml(BBC.Dna.Data.IDnaDataReader,System.Int32)">
            <summary>
            With the returned data set generate the XML for the Article History page
            </summary>
            <param name="dataReader">Data set to turn into XML</param>
            <param name="entryID">Article to get the history of </param>
        </member>
        <member name="T:BBC.Dna.Component.ArticleKeyPhrases">
            <summary>
            Class handling the building of the ArticleKeyPhrases
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleKeyPhrases.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ArticleKeyPhrases component
            </summary>
            <param name="context">The inputcontext that the component is running in</param>
        </member>
        <member name="T:BBC.Dna.Component.ArticleList">
            <summary>
            Class to retrieve a list of articles of certain types
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the ArticleList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateRecentArticleList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the Recent Article List
            </summary>
            <param name="userID">The user of the Articles to get</param>
            <param name="siteID">Site of the Articles</param>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <param name="guideType">Type of Guide Article to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateRecentApprovedArticlesList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the Recent Approved Articles List
            </summary>
            <param name="userID">The user of the Articles to get</param>
            <param name="siteID">Site of the Articles</param>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <param name="guideType">Type of Guide Article to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateCancelledArticlesList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the Cancelled Articles List
            </summary>
            <param name="userID">The user of the Articles to get</param>
            <param name="siteID">Site of the Articles</param>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <param name="guideType">Type of Guide Article to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateRecentNormalAndApprovedArticlesList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the Recent Normal And Approved Articles List
            </summary>
            <param name="userID">The user of the Articles to get</param>
            <param name="siteID">Site of the Articles</param>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <param name="guideType">Type of Guide Article to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateScoutRecommendationsList(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a list of articles representing the recommendations made
            	by this particular scout.
            </summary>
            <param name="scoutID">The scout id for the recommended Articles to get</param>
            <param name="numberOfUnits">Number of Articles to show</param>
            <param name="unitType">Type of Article to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateUndecidedRecommendationsList(System.Int32,System.Int32)">
            <summary>
            Creates a list of articles representing the articles currently in
            	the recommended entries list.
            </summary>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateArticleList(System.Int32,System.Int32,System.Int32,System.Int32,BBC.Dna.Component.ArticleList.ArticleListType,System.Int32)">
            <summary>
            Functions generates an Article List of the given type
            </summary>
            <param name="userID">The user of the Articles to get</param>
            <param name="siteID">Site of the Articles</param>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <param name="whichType">Type of Articles to show</param>
            <param name="guideType">Type of Guide Article to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateList(System.Xml.XmlElement,BBC.Dna.Data.IDnaDataReader,System.Int32,System.Int32)">
            <summary>
            Helper method to create the list after a specific stored procedure
            	has been called to return an appropriate results set.
            </summary>
            <param name="articleList"></param>
            <param name="dataReader"></param>
            <param name="skip">Number of Articles to skip</param>
            <param name="show">Number of Articles to show</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.GetUsersMostRecentEntries(System.Int32,System.Int32,System.Int32,System.Int32,BBC.Dna.Component.ArticleList.ArticleListType,System.Int32)">
            <summary>
            Does the correct call to the database to get the most recent articles
            </summary>
            <param name="userID">The user id to look for</param>
            <param name="siteID">SiteID of the articles list to get</param>
            <param name="skip">The number of articles to skip</param>
            <param name="show">The number of articles to show</param>
            <param name="whichType">Type of Articles to show</param>
            <param name="guideType">Type of Guide Article to show</param>
            <returns>Dataset</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CacheGetArticleListDate(System.Int32,System.Int32)">
            <summary>
            Gets the expiry time of the article list for a user on a site was cached
            </summary>
            <param name="userID">The user who's article list to check</param>
            <param name="siteID">The site of the article list to check</param>
            <returns>Time of expiry</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.AddPollXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode)">
            <summary>
            AddPollXml - Delegates esponsibility of producing standard Poll Xml to the Poll Class.
            Only produces Poll Xml where a valid Poll exists in the resultset.
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="article">Parent node to add the xml to</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.AddMediaAssetXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode,System.Int32)">
            <summary>
            Adds the MediaAsset XML data to the XML document
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="parent">parent to add the xml to</param>
            <param name="mediaAssetID">Media asset id in question</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateUnallocatedRecommendationsList(System.Int32,System.Int32)">
            <summary>
            Creates a list of articles representing the articles currently in
            	the accepted recommendations list that have not yet been allocated.
            </summary>
            <param name="maxNumber">the max number of entries to include in the list</param>
            <param name="skip">the number of entries to skip before starting inclusions</param>
            <returns>true if successfull, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateUnallocatedRecommendationsList">
            <summary>
            Creates a list of articles representing the articles currently in
            	the accepted recommendations list that have not yet been allocated.
            </summary>
            <returns>true if successfull, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleList.CreateAllocatedRecommendationsList(System.Int32,System.Int32)">
            <summary>
            Gets the list of allocated scout recommendations that have not yet
            	been returned, and inserts its XML representation into this form.
            </summary>
            <param name="maxNumber">the max number of entries to include in the list</param>
            <param name="skip">the number of entries to skip before starting inclusions</param>
            <returns>true for success or false for failure</returns>
        </member>
        <member name="T:BBC.Dna.Component.ArticleList.ArticleListType">
            <summary>
            ArticleList Typ enum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ArticleList.ArticleListType.ARTICLELISTTYPE_FIRST">
            <summary>
            First Article Type
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ArticleList.ArticleListType.ARTICLELISTTYPE_APPROVED">
            <summary>
            Approved Articles
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ArticleList.ArticleListType.ARTICLELISTTYPE_NORMAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ArticleList.ArticleListType.ARTICLELISTTYPE_CANCELLED">
            <summary>
            Cancelled Articles
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ArticleList.ArticleListType.ARTICLELISTTYPE_NORMALANDAPPROVED">
            <summary>
            Normal and Approved Articles
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ArticleList.ArticleListType.ARTICLELISTTYPE_LAST">
            <summary>
            Last article type
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ArticleLocation">
            <summary>
            Article Location
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleLocation.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Hierarchy component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleLocation.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleLocation.GenerateArticleLocationXml(System.Int32)">
            <summary>
            Generates Xml for article
            </summary>
            <param name="articleID"></param>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleLocation.SetArticleLocation(System.Int32,System.Double,System.Double)">
            <summary>
            Sets Article's location
            </summary>
            <param name="articleID"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleLocation.DeleteArticleLocation(System.Int32,System.Int32)">
            <summary>
            Delete Article's location
            </summary>
            <param name="articleID"></param>
            <param name="locationId"></param>
            <returns>Success</returns>
        </member>
        <member name="T:BBC.Dna.ArticleMember">
            <summary>
            The ArticleMember component
            </summary>
        </member>
        <member name="M:BBC.Dna.ArticleMember.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Article Member component
            </summary>
            <param name="context">The inputcontext that the component is running in</param>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetContentRatingStatistics(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the Content Rating stats
            </summary>
            <param name="pollID"></param>
            <param name="voteCount"></param>
            <param name="averageRating"></param>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetExtraInfo(System.String)">
            <summary>
            Sets the extra info xml from the string
            </summary>
            <param name="extraInfo"></param>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetExtraInfo(System.String,System.Int32)">
            <summary>
            Sets the extra info xml from the string and the type
            </summary>
            <param name="extraInfo"></param>
            <param name="type"></param>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetCrumbTrail">
            <summary>
            Sets the crumbtrail XML
            </summary>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetMediaAssetInfo(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Sets the media Asset Info from the passed in params
            </summary>
            <param name="mediaAssetID"></param>
            <param name="contentType"></param>
            <param name="caption"></param>
            <param name="mimeType"></param>
            <param name="ownerID"></param>
            <param name="extraElementXML"></param>
            <param name="hidden"></param>
            <param name="externalLinkURL"></param>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetPhraseList(System.Collections.Generic.List{BBC.Dna.Component.Phrase})">
            <summary>
            Sets the phrase list for the articlemember
            </summary>
            <param name="phraselist">List of phrases</param>
        </member>
        <member name="M:BBC.Dna.ArticleMember.TryCreateXML">
            <summary>
            Function to generate the XML / load the Root Element from the internal data
            </summary>
        </member>
        <member name="M:BBC.Dna.ArticleMember.SetEditor(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Sets the editor XML from the given dataReader
            </summary>
            <param name="dataReader">DataReader contain the row with the editor user columns</param>
        </member>
        <member name="P:BBC.Dna.ArticleMember.H2G2ID">
            <summary>
            H2G2ID
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.Status">
            <summary>
            Status of the article
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.Name">
            <summary>
            Name of the article
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.IncludeStrippedName">
            <summary>
            Whether to include the stripped name or not
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.DateCreated">
            <summary>
            Date Created of the Article
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.LastUpdated">
            <summary>
            Last Updated of the Article
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.ExtraInfo">
            <summary>
            Articles extra info
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.CrumbTrail">
            <summary>
            The Crumbtrail in XML
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleMember.Local">
            <summary>
            if the article is Local
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ArticleSubscriptionsList">
            <summary>
            Article SubscriptionsList List - A derived DnaInputComponent object to get the list of articles subscribed written by authors that have been subscribed to. 
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the UserSubscriptionsList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.CreateArticleSubscriptionsList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the User Subscription List
            </summary>
            <param name="userID">The user requesting their subscriptions</param>
            <param name="siteID">The site the user is getting their subscriptions from</param>
            <param name="skip">number of articles to skip</param>
            <param name="show">number of articles to show</param>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.GetArticleSubscriptionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get articles written by users that have been subscribed to.
            </summary>
            <param name="userID">The user requesting their subscriptions</param>
            <param name="siteID">The site the user is getting their subscriptions from</param>
            <param name="skip">number of articles to skip</param>
            <param name="show">number of articles to show</param>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.AddMediaAssetXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode,System.Int32)">
            <summary>
            Adds the MediaAsset XML data to the XML document
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="parent">parent to add the xml to</param>
            <param name="mediaAssetID">Media asset id in question</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.GeneratePhraseXml(System.Collections.ArrayList,System.Xml.XmlElement)">
            <summary>
            Generates the Phrase XML from an ArrayList of phrases
            </summary>
            <param name="phraselist">list of phrases</param>
            <param name="parent">Element to attach the xml to</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.GenerateFTPDirectoryString(System.Int32,System.String@)">
            <summary>
            Method that will produce the FTP directory path from the Media Asset ID
            This is for the limit of files within a unix folder to function well
            we basically take the ID and divide it a number of times to get
            sub directories
            </summary>
            <param name="mediaAssetID">The media asset id</param>
            <param name="FTPDirectory">The returned FTP Directory</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.GetIDFromLink(System.String,System.String@,System.String@)">
            <summary>
            Function to generate the ID from the URL Link checks against a YouTube or a Google Video Link
            </summary>
            <param name="inLink">The url to check</param>
            <param name="outID">The specific ID for the type for the site from the url</param>
            <param name="outType">The site the url and id is for</param>
            <returns>Whether we have a known link part</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSubscriptionsList.GetExternalIDFromLink(System.String,System.String,System.String@)">
            <summary>
            Function to generate the External site ID from the URL Link and the external site prefix
            </summary>
            <param name="inLink">The raw link from the website</param>
            <param name="inPreFix">Extract the site info</param>
            <param name="outExternalID">Get the id of our specific object</param>
            <returns>Whether we can find an external link</returns>
        </member>
        <member name="T:BBC.Dna.AuthorsList">
            <summary>
            The authors list class
            </summary>
        </member>
        <member name="M:BBC.Dna.AuthorsList.#ctor(BBC.Dna.IInputContext,BBC.Dna.AuthorsList.ArticleType,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.AuthorsList.CreateListForArticle">
            <summary>
            This method creates the list of authors for the given article
            </summary>
        </member>
        <member name="T:BBC.Dna.AuthorsList.ArticleType">
            <summary>
            Enumeration for the different types of articles
            </summary>
        </member>
        <member name="F:BBC.Dna.AuthorsList.ArticleType.ARTICLE">
            <summary>
            Basic article type
            </summary>
        </member>
        <member name="F:BBC.Dna.AuthorsList.ArticleType.ARTICLE_EDITFORM">
            <summary>
            Edit form article
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.BannedEmailsPageBuilder">
            <summary>
            This class is used to get, add and remove banned emails
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.BannedEmailsPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default construtor
            </summary>
            <param name="context">The inputcontext to create the object from</param>
        </member>
        <member name="M:BBC.Dna.Component.BannedEmailsPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.BannedEmailsPageBuilder.GetSearchDetails">
            <summary>
            This method gets all the search params from the url.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.BannedEmailsPageBuilder.GetBannedEmails(System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the current banned emails from the database and returns them as an array of BannedEmail items
            </summary>
            <param name="skip">The number of emails to skip over before displaying</param>
            <param name="show">The number of emails to display</param>
            <param name="searchType">The type of search you want to use. (Defualt) Type 0 = Most Recent, Type 1 = By Letter</param>
            <param name="letter">The letter you want to search emails with. Only used by type 1 searches</param>
            <param name="showSignInBanEmails">Set to true if you want to include emails that are banned from signing in</param>
            <param name="showComplainBanEmails">Set to true if you want to include emails banned from complaining.</param>
            <param name="showAll">Set to true if you want to show all without filtering</param>
            <returns>An Array of the current baneed emails from the database</returns>
        </member>
        <member name="P:BBC.Dna.Component.BannedEmailsPageBuilder.TotalEmails">
            <summary>
            Get property for getting the total number of matching email for the last search result
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.BlockedUserSubscriptions">
            <summary>
            Component for management of a users blocked Subscriptions. 
            Blocked users cannot track the content of an author useing the subscription functionality.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.BlockedUserSubscriptions.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreUserSubscriptions component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.BlockedUserSubscriptions.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.BlockedUserSubscriptions.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Gets params from the equest and validates input params.
            </summary>
            <param name="userId">User ID of user whose list is being shown</param>
            <param name="skip">Number of items to skip</param>
            <param name="show">Number of items to show</param>
            <param name="action">Action to perform</param>
            <param name="blockedID">ID of user to be blocked</param>
        </member>
        <member name="M:BBC.Dna.Component.BlockedUserSubscriptions.GenerateBlockedUserSubscriptionsXml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates XML for Blocked User Subscriptions.
            Allows the author to stop blocked users from tracking their content.
            </summary>
            <param name="userID">The ID of the user to get the list of blocked users for</param>
            <param name="skip">Number of blocked users to skip</param>
            <param name="show">Number of blocked users to show</param>
        </member>
        <member name="M:BBC.Dna.Component.BlockedUserSubscriptions.TryUpdateBlockedSubscriptions(System.String,System.Int32,System.Int32)">
            <summary>
            Adds user to blocked user subscriptions or removes them.
            </summary>
            <param name="action">Action to perform on the list</param>
            <param name="authorid">Author of the page thats doing the blocking</param>
            <param name="blockUnblockUserId">The user to block/unblock</param>
        </member>
        <member name="T:BBC.Dna.BlogSummary">
            <summary>
            Blog Summary class
            </summary>
        </member>
        <member name="M:BBC.Dna.BlogSummary.#ctor(BBC.Dna.IInputContext)">
            <summary>
            BlogSummary constructor
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.BlogSummary.ProcessRequest">
            <summary>
            Process the request
            </summary>
        </member>
        <member name="T:BBC.Dna.ArticleSearchParams">
            <summary>
            Class to store all Article Search parameters
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleSearchParams._siteID">
            <remarks name="siteID">Site id to run the searches against</remarks>
            <remarks name="skip">Number of articles to skip</remarks>
            <remarks name="show">Number of articles to show</remarks>
            <remarks name="skipphrases">Number of hotlist keyphrases to skip</remarks>
            <remarks name="showphrases">Number of hotlist keyphrases to show</remarks>
            <remarks name="contentType">Type of articles to articles to search for </remarks>
            <remarks name="sortBy">sortby option for the search</remarks>
            <remarks name="startDate">Start Date</remarks>
            <remarks name="endDate">End Date</remarks>
            <remarks name="timeInterval">Time Interval parameter</remarks>
            <remarks name="dateSearchType">Date search type</remarks>
            <remarks name="phrases">Key Phrases to search for</remarks>
            <remarks name="searchphraselist">ArrayList of Key Phrases to search for</remarks>
            <remarks name="articleStatus">The Status of the Article to search for</remarks>
            <remarks name="descendingOrder">Which way to perform the sort</remarks>
            <remarks name="postcode">Postcode to search for Articles around</remarks>
            <remarks name="placename">Placename to search articles around</remarks>
            <remarks name="articleType">The type of articles to search for</remarks>
            <remarks name="locationSearchType">The type of location search to perform</remarks>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.LocationSearchType">
            <summary>
            Accessor for LocationSearchType
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.PostCode">
            <summary>
            Accessor for PostCode
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Placename">
            <summary>
            Accessor for Placename
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.FreeTextSearchCondition">
            <summary>
            Accessor for freeTextSearchConfition
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Range">
            <summary>
            Accessor for Range
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Latitude">
            <summary>
            Accessor for Latitude
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Longitude">
            <summary>
            Accessor for Longitude
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.SiteID">
            <summary>
            Accessor for SiteID
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Skip">
            <summary>
            Accessor for Skip
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Show">
            <summary>
            Accessor for Show
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.SkipPhrases">
            <summary>
            Accessor for SkipPhrases
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.ShowPhrases">
            <summary>
            Accessor for ShowPhrases
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.ContentType">
            <summary>
            Accessor for ContentType
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.SortBy">
            <summary>
            Accessor for SortBy
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.StartDate">
            <summary>
            Accessor for StartDate
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.EndDate">
            <summary>
            Accessor for EndDate
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.TimeInterval">
            <summary>
            Accessor for TimeInterval
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.DateSearchType">
            <summary>
            Accessor for DateSearchType
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.Phrases">
            <summary>
            Accessor for Phrases
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.NameSpaces">
            <summary>
            Accessor for Namespaces
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.SearchPhraseList">
            <summary>
            Accessor for SearchPhraseList
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.ArticleStatus">
            <summary>
            Accessor for ArticleStatus
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.DescendingOrder">
            <summary>
            Accessor for DescendingOrder
            </summary>
        </member>
        <member name="P:BBC.Dna.ArticleSearchParams.ArticleType">
            <summary>
            Accessor for Article Type
            </summary>
        </member>
        <member name="T:BBC.Dna.Category">
            <summary>
            The Category component
            </summary>
        </member>
        <member name="T:BBC.Dna.ICategory">
            <summary>
            The category Interface
            </summary>
        </member>
        <member name="M:BBC.Dna.ICategory.CreateArticleCrumbtrail(System.Int32)">
            <summary>
            The CreateArticleCrumbtrail Method
            </summary>
            <param name="h2g2ID">The ID Of the article you want to get the crumbtrails for.</param>
        </member>
        <member name="M:BBC.Dna.ICategory.GetRelatedClubs(System.Int32)">
            <summary>
            This methos gets the list of related clubs for a given article
            </summary>
            <param name="h2g2ID">The id of the article you want to get the related clubs for</param>
        </member>
        <member name="M:BBC.Dna.ICategory.GetRelatedArticles(System.Int32)">
            <summary>
            This method gets all the related articles for a given article h2g2ID
            </summary>
            <param name="h2g2ID">The id of the article you want to get the related articles for</param>
        </member>
        <member name="P:BBC.Dna.ICategory.IncludeStrippedNames">
            <summary>
            The include stripped names property
            </summary>
        </member>
        <member name="M:BBC.Dna.Category.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the category component
            </summary>
            <param name="context">The inputcontext that the component is running in</param>
        </member>
        <member name="M:BBC.Dna.Category.CreateArticleCrumbtrail(System.Int32)">
            <summary>
            This method creates the Crumbtrail xml for a given article id
            </summary>
            <param name="h2g2ID">The id of the article you want to get the crumbtrail for</param>
        </member>
        <member name="M:BBC.Dna.Category.GetCrumbtrailForItem(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            This method creates the crumbtrail for a given item
            </summary>
            <param name="reader">The DnaDataReader that contains the crumbtrail result set.</param>
        </member>
        <member name="M:BBC.Dna.Category.GetRelatedClubs(System.Int32)">
            <summary>
            This methos gets the list of related clubs for a given article
            </summary>
            <param name="h2g2ID">The id of the article you want to get the related clubs for</param>
        </member>
        <member name="M:BBC.Dna.Category.GetRelatedArticles(System.Int32)">
            <summary>
            This method gets all the related articles for a given article h2g2ID
            </summary>
            <param name="h2g2ID">The id of the article you want to get the related articles for</param>
        </member>
        <member name="M:BBC.Dna.Category.GetUserCrumbTrail(System.Int32)">
            <summary>
            Gets the user crumb trail
            </summary>
            <param name="userID">The user to get the crumbtrail of</param>
        </member>
        <member name="M:BBC.Dna.Category.GetCategoryAncestry(System.Int32)">
            <summary>
            Builds ANCESTRY xml for given hierarchy node
            </summary>
            <param name="nodeID">The node ID in question</param>
            <returns>resulting xml element</returns>
        </member>
        <member name="M:BBC.Dna.Category.GetSubjectMembersForNodeID(System.Int32)">
            <summary>
            Gets the subject members for a particular node id
            </summary>
            <param name="nodeID">The node ID in question</param>
            <returns>XML node with a list of Subjects for a node and it's subnodes</returns>
        </member>
        <member name="M:BBC.Dna.Category.GetUsersForNodeID(System.Int32)">
            <summary>
            Produce XML for users posts tagged to the specified node.
            </summary>
            <param name="nodeID">The node ID in question</param>
            <returns>An XML Element contain the list of users for a node</returns>
        </member>
        <member name="M:BBC.Dna.Category.GetNodeAliasMembersForNodeID(System.Int32)">
            <summary>
            Returns the Node alias members for a given node id
            </summary>
            <param name="nodeID">The node ID in question</param>
            <returns>An XML Element contain the list of aliases for a node</returns>
        </member>
        <member name="M:BBC.Dna.Category.GetHierarchyDetails(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Builds Hierarchy xml from the given datareader
            </summary>
            <param name="reader">The datset to query</param>
            <returns>resulting xml element</returns>
        </member>
        <member name="M:BBC.Dna.Category.GetHierarchyName(System.Int32)">
            <summary>
            Gets the hierarchy/category name for a given node id
            </summary>
            <param name="nodeID">The node ID in question</param>
            <returns>The category/hierarchy name</returns>
        </member>
        <member name="M:BBC.Dna.Category.GetArticleMembersForNodeID(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the article members node for a given ID
            </summary>
            <param name="nodeID">The hierarchy node</param>
            <param name="type">The hierarchy node type</param>
            <param name="show">The number of rows to show</param>
            <param name="skip">The number of rows to skip</param>
            <param name="rows">The number of rows so far which is updated</param>
            <returns>Element containing the article members XML</returns>
        </member>
        <member name="M:BBC.Dna.Category.Initialise(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initialise the Category with just the ID , if it is a Node ID of H2G2ID and the site
            </summary>
            <param name="ID">ID to use</param>
            <param name="isIDaNodeID">Whether the ID is a Node ID (or H2G2ID)</param>
            <param name="siteID">Site ID</param>
        </member>
        <member name="M:BBC.Dna.Category.Initialise(System.Int32,System.Boolean,System.Int32,BBC.Dna.Category.CategoryTypeFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialise the Category 
            </summary>
            <param name="ID">ID to use</param>
            <param name="isIDaNodeID">Whether the ID is a Node ID (or H2G2ID)</param>
            <param name="siteID">Site ID</param>
            <param name="type">Filter Type</param>
            <param name="articleType">Article Type</param>
            <param name="show"></param>
            <param name="skip"></param>
        </member>
        <member name="M:BBC.Dna.Category.AddArticleMemberXML(BBC.Dna.Data.IDnaDataReader,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{BBC.Dna.Component.Phrase}})">
            <summary>
            Builds ARTICLEMEMBER xml based on current row in dataReader
            </summary>
            <param name="dataReader">The data reader with the data</param>
            <param name="articleKeyPhraseMap">The map of article key phrases</param>
            <returns>XML Element contain the articlemember data</returns>
        </member>
        <member name="P:BBC.Dna.Category.IncludeStrippedNames">
            <summary>
            The include stripped names property
            </summary>
        </member>
        <member name="T:BBC.Dna.Category.CategoryTypeFilter">
            <summary>
            Enumeration of the Category Filter type
            </summary>
        </member>
        <member name="F:BBC.Dna.Category.CategoryTypeFilter.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:BBC.Dna.Category.CategoryTypeFilter.TypedArticle">
            <summary>
            TypedArticle
            </summary>
        </member>
        <member name="F:BBC.Dna.Category.CategoryTypeFilter.Thread">
            <summary>
            Thread
            </summary>
        </member>
        <member name="F:BBC.Dna.Category.CategoryTypeFilter.User">
            <summary>
            User
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.CategoryList">
            <summary>
            The Category List component
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the CategoryList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.GetCategoryListForGUID(System.String)">
            <summary>
            Gets all the information to do with a given list.
            This is mainly called by the FastCategoryList Builder
            </summary>
            <param name="GUID">The GUID for the list you want to look at</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.CacheGetCategoryListDate(System.String)">
            <summary>
            Gets the last updated time of the category list 
            </summary>
            <param name="GUID">The category list GUID</param>
            <returns>Last Updated</returns>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.GetUserCategoryLists(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets all the Category lists for a given user.
            </summary>
            <param name="userID">The Id of the user you want to get the list for.</param>
            <param name="siteID">the id of the site you want to get the lists for</param>
            <param name="showUserInfo"> If this is true, the information on the owner of the list is also included in the XML.</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.GetCategoryListsNodes(System.String)">
            <summary>
            Gets all the info for a given list.
            </summary>
            <param name="GUID">The ID of the list you want to get the node info for.</param>
            <returns>Elemnt contain all the category list nodes</returns>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.ProcessNewCategoryList(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new list for the given user.
            </summary>
            <param name="userID">The ID of the user who is creating the list.</param>
            <param name="siteID">The site that the list is reside in.</param>
            <param name="GUID">The new GUID for the list</param>
            <returns>New category List Xml Element</returns>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.CreateNewCategoryList(System.Int32,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a new list for the given user.
            </summary>
            <param name="userID">The ID of the user who is creating the list</param>
            <param name="siteID">the site that the list is reside in.</param>
            <param name="destinationUrl">The destination URL</param>
            <param name="webSiteURL">The website URL</param>
            <param name="ownerFlag">The owner Flag</param>
            <param name="GUID">THe new GUID for the list</param>
            <returns>Created Category List element</returns>     
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.DeleteCategoryList(System.String)">
            <summary>
            Deletes the given list
            </summary>
            <param name="GUID">The ID of the list you want to delete.</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.AddNodeToCategoryList(System.Int32,System.String)">
            <summary>
            Adds a given node to a given list
            </summary>
            <param name="nodeID">the ID of the node you want to add</param>
            <param name="GUID">the ID of the list you want to add the node to.</param>
            <returns>New member ID</returns>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.RemoveNodeFromCategoryList(System.Int32,System.String)">
            <summary>
            Removes a given node from a given list
            </summary>
            <param name="nodeID">The id of the node you want to remove</param>
            <param name="GUID">the ID of the list you want to remove the node from.</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.RenameCategoryList(System.String,System.String)">
            <summary>
            Renames a given list.
            </summary>
            <param name="GUID">The ID of the list you want to rename</param>
            <param name="newDescription">The new name for the given list</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.SetListWidth(System.String,System.Int32)">
            <summary>
            Updates width of category list.
            </summary>
            <param name="GUID">The ID of the list you want to rename</param>
            <param name="listWidth">The width of the list (in pixels)</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryList.GetCategoryListOwner(System.String)">
            <summary>
            Gets the category list owner id
            </summary>
            <param name="categoryListID">The id of the list you want to get the owner for.</param>
            <returns>The id of the owner for the given categorylist</returns>       
        </member>
        <member name="T:BBC.Dna.Component.CategoryListPageBuilder">
            <summary>
            CategoryListBuilder class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CategoryListPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            CategoryListBuilder constructor
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryListPageBuilder.ProcessRequest">
             <summary>
             Process the request
             </summary>
             <remarks>
             URL :	id=####			- #### = the GUID for a specified list.
            			userid=####		- #### = the id of the user which lists belong to.
            			nodeid=####		- #### = the id of the node(s) you want to add / remove.
            			description=#	- # = the name of a list
            			cmd=####		- #### = create, delete, add, remove or rename
            
            			cmd=create		- this requires a description (50 chars max!).
            			cmd=delete		- this requires an id.
            			cmd=add			- this requires a nodeid and id.
            			cmd=remove		- this requires a nodeid and id.
            			cmd=rename		- this requires an id and description.
            
            			If no cmd and no id are used, then the list of lists for the given userid is displayed.
            			If no cmd, but a valid id are used, then this displays the list info for the given id.
            
            			Users can only see lists they have produced.
            			Editors can view any users list using the userid param.
            
             </remarks>
        </member>
        <member name="M:BBC.Dna.Component.CategoryListPageBuilder.TryGetPageParams(BBC.Dna.CategoryListPageParameters@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="parameters">Class containing all the Category List Page parameters.</param>
        </member>
        <member name="M:BBC.Dna.Component.CategoryListPageBuilder.TryCreateCategoryListPageXML(BBC.Dna.CategoryListPageParameters)">
            <summary>
            Creates the Category List page
            </summary>
            <param name="parameters">Class containing all the Category List Page parameters.</param>
        </member>
        <member name="P:BBC.Dna.Component.CategoryListPageBuilder.CategoryListMode">
            <summary>
            Accessor for CategoryListMode
            </summary>
        </member>
        <member name="T:BBC.Dna.CategoryListPageParameters">
            <summary>
            Class for the Category List Page parameters
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.ListWidth">
            <summary>
            Accessor for ListWidth
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.NodeList">
            <summary>
            Accessor for NodeList
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.Description">
            <summary>
            Accessor for Description
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.ViewMode">
            <summary>
            Accessor for ViewMode
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.GUID">
            <summary>
            Accessor for GUID
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.Command">
            <summary>
            Accessor for Command
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.UserID">
            <summary>
            Accessor for UserID
            </summary>
        </member>
        <member name="P:BBC.Dna.CategoryListPageParameters.NodeID">
            <summary>
            Accessor for NodeID
            </summary>
        </member>
        <member name="T:BBC.Dna.CategoryListPageParameters.eCatListViewMode">
            <summary>
            Enumeration for the viewModes
            </summary>
        </member>
        <member name="F:BBC.Dna.CategoryListPageParameters.eCatListViewMode.CLVM_NODES">
            <summary>
            Node view
            </summary>
        </member>
        <member name="F:BBC.Dna.CategoryListPageParameters.eCatListViewMode.CLVM_LISTS">
            <summary>
            List View
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ComingUp">
            <summary>
            Summary of the ComingUp Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ComingUp.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ComingUp component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ComingUp.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ComingUp.TryCreateComingUpXML(System.Int32,System.Int32)">
            <summary>
            Functions generates the TryCreateComingUp XML
            </summary>
            <param name="skip">Number of posts to skip</param>
            <param name="show">Number of posts to show</param>
        </member>
        <member name="M:BBC.Dna.Component.ComingUp.TryGetPageParams(System.Int32@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="skip">number of postings to skip</param>
            <param name="show">number to show</param>
        </member>
        <member name="T:BBC.Dna.Component.CommentBoxForum">
            <summary>
            CommentBoxForum - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the CommentBoxForum component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.GetUID">
            <summary>
            Gets the dnaguid parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.TryGetCommentForum(System.String)">
            <summary>
            Method called to try and get the comment forum. This function will create a new comment forum
            if one doesn't exist, given a unique identifier
            </summary>
            <param name="uid">The UID for the forum in question</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.GetCommentForum(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Calls the DB to get the Comment CommentBoxForum if one does not exist then it creates a new one
            Gets the CommentBoxForum posts in the guestbook style with DB skip and show
            </summary>
            <param name="uid">The unique identifier for the Comment CommentBoxForum</param>
            <param name="url">The URL of the page so to go back to</param>
            <param name="title">Title of the Comment CommentBoxForum </param>
            <param name="siteID">Site which the comment forum belongs to</param>
            <param name="fromPostIndex">Start Post Index</param>
            <param name="toPostIndex">Finish Post Index</param>
            <param name="show">If no to and from parameters we need the number of comments to show</param>
            <param name="moderationStatus">Moderation status to set the forum to</param>
            <param name="createIfNotExist">This is a flag to state that if the forum does not exist, then create it.</param>
            <param name="forumDuration">Optional param that lets you specify the duration for the forum that will override the default site option.
            Set to -1 if you want to use the default siteoption OR set 0 if you want it to be open forever</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.AddComment(System.String)">
            <summary>
            Function to try and add a comment with the 
            parameters passed in, assumes the comment box has already been created and exists
            </summary>
            <exception cref="T:BBC.Dna.Utils.DnaException">if there is an Invalid CommentBoxForum ID</exception>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.GenerateForumThreadPostsXML(System.String,System.Int32,System.Int32,System.Int32,BBC.Dna.Data.IDnaDataReader,System.String,System.String)">
            <summary>
            Generates/fills the full forum thread posts xml document
            </summary>
            <param name="uid">The unique identifier for the Comment CommentBoxForum</param>
            <param name="fromPostIndex">Start Post Index</param>
            <param name="toPostIndex">Finish Post Index</param>
            <param name="show">If no to and from parameters we need the number of comments to show</param>
            <param name="dataReader">Dna Data Reader object</param>
            <param name="title">Passed in title of the comment</param>
            <param name="url">the passed in host page url</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.UpdateCommentForumTitle(System.Int32,System.String)">
            <summary>
            Updates the comment forum title to the new one passed in
            </summary>
            <param name="forumID">The forumID</param>
            <param name="title"></param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.UpdateCommentForumURL(System.Int32,System.String)">
            <summary>
            Updates the comment forum host page url to the new one passed in
            </summary>
            <param name="forumID">The forumID</param>
            <param name="url">The new host page url</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.UpdateCanWriteStatus(System.Boolean)">
            <summary>
            Updates the forums can write flag depending on the site's or forum open status 
            </summary>
            <param name="forumClosed">A flag that states whether or not that the forum is closed</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.ExtractPostCount(BBC.Dna.Data.IDnaDataReader,System.Int32@)">
            <summary>
            Minor function to extract the parameter from the stored procedure for the forum post count
            </summary>
            <param name="dataReader">Dna Data Reader object</param>
            <param name="forumPostCount"></param>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.AddMoreAttribute(BBC.Dna.Data.IDnaDataReader,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the more attribute to the Top level element
            </summary>
            <param name="dataReader">the Stored Procedure object</param>
            <param name="forumPostCount">Total number of Posts</param>
            <param name="toPostIndex">Finish Post Index</param>
            <param name="returnedPostCount">Number of actual rows to returned</param>
            <returns>success true/false</returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.CreateForumThreadPosts(System.String,System.Int32,System.Int32,BBC.Dna.Data.IDnaDataReader,System.Int32,System.Int32,System.Xml.XmlNode)">
            <summary>
            Creates the XML fragment for the CommentBoxForum Thread Posts
            </summary>
            <param name="uid">The unique identifier for the Comment CommentBoxForum</param>
            <param name="fromPostIndex">Start Post Index</param>
            <param name="toPostIndex">Finish Post Index</param>
            <param name="dataReader">Dna Data Reader object</param>
            <param name="show">Number of Posts requested</param>
            <param name="forumPostCount">Total number of Posts</param>
            <param name="parent">Parent node of FORUMTHREADPOSTS element.</param>
            <returns>Actual number of posts returned</returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.CreateComment(System.String,System.Int32,System.String,System.String@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.Guid,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Int32@)">
            <summary>
            Function to actually add a comment to a given forum.
            </summary>
            <param name="uid">Unique ID for comment box. Specified/Generated on creation of forum</param>
            <param name="userID">UserXMLObject ID of the user posting the comment.</param>
            <param name="comment">The actual comment.</param>
            <param name="hostPageUrl">url.</param>
            <param name="forceModeration">Triggered due to suspicious content profanities , urls etc.</param>
            <param name="ignoreModeration">Editors and superusers can avoid moderation.</param>
            <param name="newPostId">Editors and superusers can avoid moderation.</param>
            <param name="isPreModerated">Editors and superusers can avoid moderation.</param>
            <param name="isPreModProcessed">Indicates a premod processing is in effect </param>
            <param name="isNotable">Indicates that the author hs notable status</param>
            <param name="postStyle">The post style of the comment</param>
            <param name="ipAddress">IP address of incoming request</param>
            <param name="bbcuid">Guid extracted from BBC-UID cookie</param>
            <param name="canRead">Editors and superusers can avoid moderation.</param>
            <param name="canWrite">Editors and superusers can avoid moderation.</param>
            <param name="contentSiteId">Returns siteId of comment box forum.</param>
            <returns>success true/false</returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.GetCommentForumDetails(System.String,System.Int32@,System.String@)">
            <summary>
            Gets the forumID and host URL for a given Unique ID
            </summary>
            <param name="uid">nique ID for the forum</param>
            <param name="forumID">ForumID from the database</param>
            <param name="url">Host URL of the page containing the comment forum</param>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.ProcessIncomingError">
            <summary>
            Checks for an incoming error in the url and puts it into the xml
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentBoxForum.ProcessModerationInfo">
            <summary>
            Adds moderation info Xml to the document if present
            </summary>
        </member>
        <member name="T:BBC.Dna.CommentForumListBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="inputContext"></param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.TryGetCommentForumList">
            <summary>
            Method called to try and get the comment forum list. 
            </summary>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.ProcessCommand(System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.UpdateTerm">
            <summary>
            Checks the parameters and updates the term passed in
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GetCommentListsFromUids">
            <summary>
            This can be called on a page which needs lists of comments, like the BlogSummary pages
            It removes the logic for this type of data from the commentforumlist page which doesn't require
            those lists
            </summary>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GetCommentListsFromUidPrefix">
            <summary>
            If the dna_list_ns parameter exists, this will generate a list of recent posts
            and a list of recent threads commented on
            </summary>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GeneratePageXmlByPrefix(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a comment forum list from a supplied uid prefix.
            </summary>
            <param name="dnaListNs">The prefix of the uid.</param>
            <param name="dnaListCount">The number of comment forums to retrieve.</param>
            <param name="siteID">Allow filtering on given site.</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GeneratePageXmlAll(System.Int32,System.Int32)">
            <summary>
            Gets the complete comment forum list with skip and show from the database from the params and then generates the page xml
            </summary>
            <param name="skip">Number of comment forums to skip</param>
            <param name="show">Number of comment forums to show</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GeneratePageXmlBySite(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the comment forum list by site id with skip and show from the database from the params and then generates the page xml
            </summary>
            <param name="siteID">site id of comment lists to return for</param>
            <param name="skip">Number of comment forums to skip</param>
            <param name="show">Number of comment forums to show</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GeneratePageXmlByUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the comment forum list by hostpageurl with skip and show from the database from the params and then generates the page xml
            </summary>
            <param name="hostpageurl">hostpage url to match comment lists for</param>
            <param name="skip">Number of comment forums to skip</param>
            <param name="show">Number of comment forums to show</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GeneratePageXmlByDnaUids(System.String[])">
            <summary>
            Get the comment from list from a collection of dnauids
            </summary>
            <param name="dnaUids">String Array containing the dnauids to return data for.</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GetPageParams(System.Int32@,System.String@,System.Int32@,System.Int32@,System.Int32@,System.String[]@,System.String@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="siteID">site id of comment lists to return for otherwise current site.</param>
            <param name="hostpageurl">hostpage url to match comment lists for</param>
            <param name="skip">Number of comment forums to skip</param>
            <param name="show">Number of comment forums to show</param>
            <param name="dnaUidCount">Number of dnauids specified to retrieve comment forum data for.</param>
            <param name="dnaUids">Array of dnauid values.</param>
            <param name="dnaListNs">Namespace prefix for the dna uid</param>
            <param name="dnaListCount">Count comment forum details to return related by the dna uid namespace</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.GenerateCommentForumListXml(BBC.Dna.Data.IDnaDataReader,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates the XML fragment for the Comment CommentBoxForum List
            </summary>
            <param name="dataReader">The SP reader</param>
            <param name="skip">Number of comment forums to skip</param>
            <param name="show">Number of comment forums to show</param>
            <param name="requestedSiteIDFilter">The requested Site Id filter if present</param>
            <param name="requestedUrlFilter">The requested HostPageUrl filter if present</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.AddCommentForumListXML(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode)">
            <summary>
            Generates the individual Comment CommentBoxForum Xml within the Comment CommentBoxForum List xml page
            </summary>
            <param name="dataReader">SP containing the comment forums</param>
            <param name="commentForumList">Parent node to attach to</param>
        </member>
        <member name="M:BBC.Dna.CommentForumListBuilder.SendTermUpdateEmail(System.String[],System.Int32,System.String,BBC.Dna.Moderation.Utils.TermAction,System.Int32)">
            <summary>
            Send the email to the configured recipients once a term is added/updated
            </summary>
            <param name="terms"></param>
            <param name="forumId"></param>
            <param name="termReason"></param>
            <param name="termAction"></param>
            <param name="userId"></param>
        </member>
        <member name="P:BBC.Dna.CommentForumListBuilder.SkipUidProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.CommentForumListBuilder.SkipUrlProcessing">
            <summary>
            Property to indicate whether the dnahostpageurl parameter is used.
            </summary>
        </member>
        <member name="T:BBC.Dna.CommentForumListCacheDependency">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.CommentForumListCacheDependency.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.CommentsList">
            <summary>
            Comments List - A derived DnaInputComponent object to get the list of comments for a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentsList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the Comments List object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentsList.CreateRecentCommentsList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the Recent Comments List
            </summary>
            <param name="userID">The user of the comments to get</param>
            <param name="siteID">Site of the comments</param>
            <param name="skip">Number of comments to skip</param>
            <param name="show">Number of comments to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentsList.RemovePrivateComments(System.Boolean)">
            <summary>
            Removes the Private comments from the list
            </summary>
            <param name="showPrivate">Whether to show the private posts</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.CommentsList.GetUsersMostRecentComments(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Does the correct call to the database to get the most recent comments
            </summary>
            <param name="userID">The user id to look for</param>
            <param name="siteId">SiteID of the comments to get</param>
            <param name="skip">The number of comments to skip</param>
            <param name="show">The number of comments to show</param>
            <param name="showUserHidden"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.ContactFormListBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.ContactFormListBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The class that is respoonsible for displaying the contact form lists
            </summary>
            <param name="inputContext">The current Input context</param>
        </member>
        <member name="M:BBC.Dna.ContactFormListBuilder.GetContactForms">
            <summary>
            Gets and Creates the contact forms list
            </summary>
        </member>
        <member name="M:BBC.Dna.ContactFormListBuilder.GetContactFormsAsXml">
            <summary>
            Gets and Creates the contact forms list a returns it as an xml node
            </summary>
            <returns>XmlNode representation of the contact forms</returns>
        </member>
        <member name="T:BBC.Dna.Component.ContentSignif">
            <summary>
            Summary of the ContentSignif Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignif.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ContentSignif component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignif.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ContentSignifAdminBuilder">
            <summary>
            Holds the ContentSignifAdminBuilder class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifAdminBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the ContentSignifAdminBuilder object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifAdminBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifAdminBuilder.TryGetPageParams(BBC.Dna.ContentSignifSettingsParameters@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="parameters">Class containing all the Content Signif Settings parameters.</param>
        </member>
        <member name="T:BBC.Dna.Component.ContentSignifSettings">
            <summary>
            Holds the ContentSignifSettings class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifSettings.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the ContentSignifSettings object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifSettings.GetSiteSpecificContentSignifSettings(System.Int32)">
            <summary>
            Gets site specific ContentSignif settings
            </summary>
            <param name="siteID">SiteID you want SignifContent settings for</param>
            <returns>Xml Element containing the signif settings</returns>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifSettings.SetSiteSpecificContentSignifSettings(System.Int32,BBC.Dna.ContentSignifSettingsParameters)">
            <summary>
            Sets the Site Specific Settings for the given site with the parameters
            </summary>
            <param name="siteID">The site</param>
            <param name="parameter">The parameters</param>
        </member>
        <member name="M:BBC.Dna.Component.ContentSignifSettings.DecrementContentSignif(System.Int32)">
            <summary>
            Decrements site's ContentSignif tables.
            </summary>
            <param name="siteID">Site to use</param>
        </member>
        <member name="T:BBC.Dna.ContentSignifSettingsParameters">
            <summary>
            Class containing the params for contentsignif settings admin
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param1">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param2">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param3">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param4">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param5">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param6">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param7">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param8">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param9">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param10">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param11">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param12">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param13">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param14">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param15">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param16">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param17">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param18">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param19">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param20">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param21">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param22">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param23">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param24">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param25">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param26">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param27">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param28">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param29">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param30">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param31">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param32">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param33">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param34">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.Param35">
            <summary>
            Accessor for the Param
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.DecrementContentSignif">
            <summary>
            Accessor for the DecrementContentSignif
            </summary>
        </member>
        <member name="P:BBC.Dna.ContentSignifSettingsParameters.UpdateSiteSettings">
            <summary>
            Accessor for the UpdateSiteSettings
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.SiteOptionsPageBuilder">
            <summary>
            The site options page builder class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SiteOptionsPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubArticleStatusBuilder
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SiteOptionsPageBuilder.ProcessRequest">
            <summary>
            Process the current request
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.TwitterProfile">
            <summary>
            Twitter Profile - A derived Dnacomponent object used for both creation and update
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Twitter Create Profile component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.#ctor(BBC.Dna.IInputContext,BBC.Dna.Data.IDnaDataReaderCreator,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            Overloaded constructor that takes in the context, DnaDataReaderCreator and DnaDiagnostics
            </summary>
            <param name="context"></param>
            <param name="dnaReaderCreator"></param>
            <param name="dnaDiagnostics"></param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.ProcessCommand(System.String)">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.GenerateTwitterProfilePageXml(System.String)">
            <summary>
            XML for Twitter create profile 
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.GetProfileFromBuzz(System.String)">
            <summary>
            Get specific profile details from Buzz
            </summary>
            <param name="twitterProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.CreateTwitterProfileXML(BBC.Dna.SocialAPI.BuzzTwitterProfile,System.String,System.Boolean)">
            <summary>
            Method to create the fill up the twitter profile with values
            </summary>
            <param name="twitterProfile"></param>
            <param name="commentForumParentURI"></param>
            <param name="isExists"></param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.GetTwitterScreenNamesFromDNA(System.String)">
            <summary>
            Gets the twitter screennames from DNA
            </summary>
            <param name="userIdList"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.CreateUpdateProfileOnBuzz(System.String)">
            <summary>
            Twitter Profile creation on Buzz
            </summary>
            <param name="siteName"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.AddValidUserToTheList(System.Collections.Generic.List{System.String},BBC.Dna.Sites.ISite,System.String@)">
            <summary>
            Adds twitteruserids to the list
            </summary>
            <param name="twitterUserScreenNameList"></param>
            <param name="site"></param>
            <param name="invalidTwitterUser"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.UpdateCommentForum(System.String,BBC.Dna.Api.Comments,BBC.Dna.Sites.ISite,BBC.Dna.Api.CommentForum)">
            <summary>
            If comment forum exists, then update an existing comment forum 
            Else create a new comment forum
            </summary>
            <param name="siteName"></param>
            <param name="commentObj"></param>
            <param name="site"></param>
            <param name="createCommentForum"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.CreateCommentForum(System.String,BBC.Dna.Api.Comments,BBC.Dna.Api.CommentForum,BBC.Dna.Sites.ISite)">
            <summary>
            Create a new comment forum
            </summary>
            <param name="siteName"></param>
            <param name="commentObj"></param>
            <param name="commentForum"></param>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.CheckUserExists(System.String)">
            <summary>
            Check if the user already exists in DNA
            </summary>
            <param name="twitterUserName"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfile.IsValidTwitterUser(System.String,System.Int32)">
            <summary>
            Checks if the user exists in Twitter.
            If Exists, returns the user details else returns exception
            </summary>
            <param name="twitterUserScreenName"></param>
            <param name="siteId"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Component.TwitterProfileList">
            <summary>
            Twitter Profile List - A derived Dnacomponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Twitter Profile List component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.#ctor(BBC.Dna.IInputContext,BBC.Dna.Data.IDnaDataReaderCreator,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            Overloaded constructor that takes in the context, DnaDataReaderCreator and DnaDiagnostics
            </summary>
            <param name="context"></param>
            <param name="dnaReaderCreator"></param>
            <param name="dnaDiagnostics"></param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.ProcessCommand(BBC.Dna.SocialAPI.BuzzTwitterProfiles,System.String)">
            <summary>
            Filtered profile list based on the site type
            </summary>
            <param name="profileList">BuzzTwitterProfiles</param>
            <param name="siteType">BuzzSiteType</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GetSiteSpecificProfileList(BBC.Dna.SocialAPI.BuzzTwitterProfiles,System.String)">
            <summary>
            Filter twitter profiles based on the site
            </summary>
            <param name="profileList"></param>
            <param name="siteType"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GenerateUserSpecificProfileList(BBC.Dna.SocialAPI.BuzzTwitterProfiles,System.Collections.Generic.List{System.Int32})">
            <summary>
            Filter twitter profiles based on the site list
            </summary>
            <param name="profileList"></param>
            <param name="siteIdList"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GenerateTwitterSiteListForUser(System.Int32)">
            <summary>
            Twitter sites for a specific user with the site type 5
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GenerateTwitterSiteList">
            <summary>
            Twitter Sites filtered by the SiteType value 5
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.AddTwitterSiteListXML(System.Collections.Generic.Dictionary{System.Int32,BBC.Dna.Sites.Site})">
            <summary>
            Generating twitter site list xml
            </summary>
            <param name="siteList"></param>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.AddProcessingSiteXML">
            <summary>
            Generating processing site xml
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GenerateProfileList">
            <summary>
            Integration with the BuzzApi and retrieves twitter profiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GenerateTwitterProfileListPageXml(BBC.Dna.SocialAPI.BuzzTwitterProfiles)">
            <summary>
            List of twitter profiles
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TwitterProfileList.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.UserReputationReportBuilder">
            <summary>
            Member List - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserReputationReportBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Member List component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.UserReputationReportBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.HostDashboardUserActivityFeed">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.HostDashboardUserActivityFeed.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.HostDashboardUserActivityFeed.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.HostDashboardUserActivityFeed.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.EditPostPageBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.EditPostPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.EditPostPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.EditPostPageBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.MBFrontPageBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.MBFrontPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.MBFrontPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.FrontPageRedirectorBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.FrontPageRedirectorBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.FrontPageRedirectorBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.PostToForumBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.PostToForumBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.PostToForumBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.PostToForumBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.UserContributionsBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.UserContributionsBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.UserContributionsBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.UserContributionsBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.HostDashboardActivityFeed">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.HostDashboardActivityFeed.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.HostDashboardActivityFeed.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.HostDashboardActivityFeed.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.HostDashboardBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.HostDashboardBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.HostDashboardBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.HostDashboardBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.SearchThreadPostPageBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.SearchThreadPostPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.SearchThreadPostPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.SearchThreadPostPageBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.MBBackupRestore">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.MBBackupRestore.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.MBBackupRestore.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.MBBackupRestore.ProcessCommand">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.MBBackupRestore.RestoreBoard">
            <summary>
            Deserialises and adds/updates topics
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.MBBackupRestore.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.MBAdminDesignBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.ProcessCommand">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.UpdateTopic">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.ExtractHtmlInput(System.String)">
            <summary>
            Helper to get valid html or escaped version
            </summary>
            <param name="querystringParam"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.UpdateConfig(System.Boolean)">
            <summary>
            Updates the config in the database
            </summary>
            <param name="updateLiveConfig"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.UpdateTopicPositions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.PublishMessageBoard">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.MBAdminDesignBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ModerateHome">
            <summary>
            ModerateHome - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerateHome.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ModerateHome component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerateHome.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerateHome.GetModerateHomeXml(BBC.Dna.ModHomeParameters)">
            <summary>
            Function to get the XML representation of the Moderate Home results
            </summary>
            <param name="modHomeParams">Params.</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerateHome.TryGetPageParams(BBC.Dna.ModHomeParameters@)">
            <summary>
            Try to gets the params for the page
            </summary>
            <param name="modHomeParams">Moderation Submission Parameters.</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerateHome.GenerateModerateHomePageXml(BBC.Dna.ModHomeParameters)">
            <summary>
            Calls the correct stored procedure given the inputs selected
            </summary>
            <param name="modHomeParams">Parameters</param>
        </member>
        <member name="P:BBC.Dna.Component.ModerateHome.PageOwnerElement">
            <summary>
            Generated Page Owner Element
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ModerationEmailManagementBuilder">
            <summary>
            The Moderation Email Management Component
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The context in which the component is being used</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.ProcessRequest">
            <summary>
            Process Request Override
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.UpdatePageViewForProcessedAction(System.String@,System.String@,System.String@,System.String@,System.Int32@,System.String@,System.Int32@,System.Int32,System.Int32,BBC.Dna.Moderation.EmailTemplateTypes@,System.String@)">
            <summary>
            Updates the page view params after an action has been processed
            </summary>
            <param name="nextAction">The next action to be preformed</param>
            <param name="selectedTemplateType">The current selected template</param>
            <param name="selectedInsert">The current select insert</param>
            <param name="viewModeObject">The view mode object</param>
            <param name="viewModeObjectID">The view mode object ID</param>
            <param name="actionObjectName">The object name the action was performed on</param>
            <param name="actionObjectTypeID">The id of the object that the action was performed</param>
            <param name="siteID">The site id used</param>
            <param name="modClassID">The mod class id used</param>
            <param name="eTemplateType">The current type of template being viewed</param>
            <param name="action">The new action</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.CreateUpdateEmailInsert(System.String@,System.Int32,System.Int32,BBC.Dna.Moderation.EmailTemplateTypes@,System.String@)">
            <summary>
            This method creates or updates email inserts
            </summary>
            <param name="actionObjectName">The name of the email insert to create/update</param>
            <param name="siteID">The siteid the insert belongs to</param>
            <param name="modClassID">The modclass the insert belongs to</param>
            <param name="eTemplateType">The type of view to add the insert to</param>
            <param name="action">The current action</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.CreateUpdateEmailTemplate(System.Int32,System.String)">
            <summary>
            Creates/Updates email templates
            </summary>
            <param name="modClassID">The modid for the template</param>
            <param name="action">The action being performed</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.ProcessAction(System.String@,System.String,System.Int32,System.Int32)">
            <summary>
            Processes the action required on a template or insert
            </summary>
            <param name="nextAction">Out param of the next action to take</param>
            <param name="editItemName">THe name of the item being edited</param>
            <param name="modClassID">The current mod class the item lives in</param>
            <param name="viewModeObjectID">The current view mode object id</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.AddSiteListXML">
            <summary>
            Creates and adds the basic site list information to the page
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.AddModerationViewXML(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Adds the current moderation view details to the page
            </summary>
            <param name="selectedModClass">The current mod class that's being requested</param>
            <param name="selectedSite">The current site that being requested</param>
            <param name="viewType">The type of view we're asking for</param>
            <param name="viewTypeID">The ID of the object we're trying to view</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.AddModerationPageXML(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Sets up the page details
            </summary>
            <param name="nextAction">The next action we need to make</param>
            <param name="selectedTemplateType">The selected template type</param>
            <param name="selectedInsert">The selected insert item</param>
            <param name="selectedModClass">The mod class being selected</param>
            <param name="selectedSite">The site id being used</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationEmailManagementBuilder.AddDefaultEmailModerationDetailsXML">
            <summary>
            Adds the default page XML Objects to the page
            </summary>
        </member>
        <member name="T:BBC.Dna.ModHomeParameters">
            <summary>
            Class to store all Mod Home parameters
            </summary>
        </member>
        <member name="F:BBC.Dna.ModHomeParameters._ownerID">
            <remarks name="owner">Owner id</remarks>
            <remarks name="siteID">Site id to run against</remarks>
            <remarks name="fastMod">to fast mod</remarks>
            <remarks name="notfastMod">or not fast mod</remarks>
            <remarks name="modclassid">mod class id</remarks>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.OwnerID">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.SiteID">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.FastMod">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.NotFastMod">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.ModClassID">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockForums">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockForumReferrals">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockUserPosts">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockSitePosts">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockAllPosts">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockArticles">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockArticleReferrals">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockGeneral">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockGeneralReferrals">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockNicknames">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:BBC.Dna.ModHomeParameters.UnlockAll">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="T:BBC.Dna.TermsFilterImportPageBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.TermsFilterImportPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.TermsFilterImportPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.TermsFilterImportPageBuilder.ProcessCommand">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.TermsFilterImportPageBuilder.UpdateTerms">
            <summary>
            Checks the parameters and updates the term passed in
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.TermsFilterImportPageBuilder.GetTermActions">
            <summary>
            Finds all the action assoications for a given term
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.TermsFilterImportPageBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.TermsFilterAdminPageBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.TermsFilterAdminPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.TermsFilterAdminPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.TermsFilterAdminPageBuilder.ProcessCommand">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.TermsFilterAdminPageBuilder.UpdateTerm">
            <summary>
            Checks the parameters and updates the term passed in
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.TermsFilterAdminPageBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.ForumPageBuilder">
            <summary>
            The article object
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.ForumPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumPageBuilder.ProcessThreadPosts(BBC.Dna.Objects.SubscribeState)">
            <summary>
            Processes the thread posts
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumPageBuilder.ProcessCommand">
            <summary>
            Takes the cmd parameter from querystring and do the processing based on the result.
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumPageBuilder.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.IUser">
            <summary>
            The IUser interface
            </summary>
        </member>
        <member name="M:BBC.Dna.IUser.CreateUser">
            <summary>
            This is the function that creates the viewing user.
            </summary>
        </member>
        <member name="M:BBC.Dna.IUser.BeginUpdateDetails">
            <summary>
            BeginUpdateUser() - Prepares user for update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.IUser.UpdateDetails">
            <summary>
            Updates changes to user since BeginUpdateDetails().
            </summary>
        </member>
        <member name="M:BBC.Dna.IUser.SetAcceptSubscriptions(System.Boolean)">
            <summary>
            Sets whether a user accepts subscriptions to their content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.IUser.SetPreferredSkinInDB(System.String)">
            <summary>
            Sets the preferred skin value
            </summary>
            <param name="skin">Skin to set</param>
        </member>
        <member name="M:BBC.Dna.IUser.GetSitesThisUserIsEditorOfXML">
            <summary>
            Generates the SiteList of sites that the user is editor of
            </summary>
        </member>
        <member name="M:BBC.Dna.IUser.HasSpecialEditPermissions(System.Int32)">
            <summary>
            Checks to see if the current user has special edit permissions for the given article
            </summary>
            <param name="h2g2ID">Id of the article you what to check for</param>
            <returns>True if they have, false if not</returns>
        </member>
        <member name="M:BBC.Dna.IUser.SetUsername(System.String)">
            <summary>
            Used when updating a user's record. Can only be called after calling BeginUpdateDetails
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:BBC.Dna.IUser.SetSiteSuffix(System.String)">
            <summary>
            Set a new SiteSuffix field. Can be called only after BeginUpdateDetails
            </summary>
            <param name="siteSuffix">New SiteSuffix</param>
        </member>
        <member name="M:BBC.Dna.IUser.SetUserData(System.String,System.Object)">
            <summary>
            Updates a value within the user data dictionary
            </summary>
            <param name="name">name of variable</param>
            <param name="value">object value</param>
            <returns>True if add to update reader</returns>
        </member>
        <member name="M:BBC.Dna.IUser.ConvertUser">
            <summary>
            Converts BBC.Dna.User to BBC.Dna.Objects.User
            A hack until user objects are unified.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.IUser.ShowFullDetails">
            <summary>
            ShowFullDetails Property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.Email">
            <summary>
            Users EMail Property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.UserID">
            <summary>
            UserID Property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.UserLoggedIn">
            <summary>
            UserLoggedIn Property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.LoginName">
            <summary>
            Login name property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsEditor">
            <summary>
            True if the user has editor privileges on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsSuperUser">
            <summary>
            True if the user is a super user on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsNotable">
            <summary>
            True if the user is a notable on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsVolunteer">
            <summary>
            True if the user is a member of one of the volunteer groups
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsReferee">
            <summary>
            True if the user is a referee on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsModerator">
            <summary>
            True if the user is a moderator on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsPreModerated">
            <summary>
            True if the user is in Pre Moderation on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsPostModerated">
            <summary>
            True if the user is in Pre Moderation on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsBanned">
            <summary>
            True if the user has been banned from the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsAutoSinBin">
            <summary>
            True if the user is in the Auto Sin Bin on the current site
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.UserName">
            <summary>
            Get the Username field
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.FirstNames">
            <summary>
            FirstNames field for this user
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.LastName">
            <summary>
            LastName field for this user
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.PreferredSkin">
            <summary>
            A users preferred skin
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.UserData">
            <summary>
            Public access to the user data dictionary object
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsScout">
            <summary>
            Is the user a member of the Scouts group?
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsSubEditor">
            <summary>
            Is the user a member of the subeditors group
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsTester">
            <summary>
            Is the user a member of the testers group
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.BbcUid">
            <summary>
            The users bbc uid from the cookie
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.AcceptSubscriptions">
            <summary>
            Returns whether a user accepts subscriptions to their content from other users.
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsGuardian">
            <summary>
            Is the user a member of the guardian group
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.TeamID">
            <summary>
            TeamID Property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.Journal">
            <summary>
            Journal Property
            </summary>
        </member>
        <member name="P:BBC.Dna.IUser.IsHost">
            <summary>
            True if the user is a host on the current site
            </summary>
        </member>
        <member name="T:BBC.Dna.ModerateExLinks">
            <summary>
            Functionality for the moderation of external content.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerateExLinks.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.ModerateExLinks.ProcessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerateExLinks.ProcessSubmission">
            <summary>
            Process Form Submission - Record Moderators Decision.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerateExLinks.GenerateXml(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Generate XML for Moderate External Links page.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ModeratePosts">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratePosts.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratePosts.ProcessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratePosts.GenerateXml(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates XML for ModeratePost page.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratePosts.ProcessSubmission">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratePosts.Update(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,BBC.Dna.Moderation.ModerationItemStatus,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Updates the moderation item and sends email for the decision
            </summary>
            <param name="siteId"></param>
            <param name="forumId"></param>
            <param name="threadId"></param>
            <param name="postId"></param>
            <param name="modId"></param>
            <param name="decision"></param>
            <param name="notes"></param>
            <param name="referId"></param>
            <param name="threadModStatus"></param>
            <param name="sendEmail"></param>
            <param name="emailType"></param>
            <param name="customText"></param>
        </member>
        <member name="T:BBC.Dna.ModerationDistressMessages">
            <summary>
            Moderation Distress Messages - Used by moderators to post preconfigured messages.
            eg If you are thinking about ... contact the Samaritins.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerationDistressMessages.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.ModerationDistressMessages.PostDistressMessage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="distressMessageId"></param>
            <param name="siteId"></param>
            <param name="forumId"></param>
            <param name="threadId"></param>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.ModerationDistressMessages.ProcessRequest">
            <summary>
            Get all moderation distress messages
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerationDistressMessages.GenerateXml(System.Int32)">
            <summary>
            Get Moderation Distress Messsages gor the given moderation class.
            </summary>
            <param name="modClassId"></param>
        </member>
        <member name="T:BBC.Dna.ModerationHistory">
            <summary>
            Class for creating Moderation history Xml.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerationHistory.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.ModerationHistory.ProcessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerationHistory.GenerateExLinkEventHistory(System.String)">
            <summary>
            Generate Event history XML for the given external link.
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:BBC.Dna.Component.ModerationReasons">
            <summary>
            Creaetes Moderation Failure Reasons XML.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationReasons.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationReasons.ProcessRequest">
            <summary>
            Produce Moderation Reasons XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationReasons.GenerateXml(System.Int32)">
            <summary>
            Get Moderation Reasons for a particular class only.
            </summary>
            <param name="moderationClass"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.ModerateNickNames">
            <summary>
            Functionality for the Moderation of NickNames.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerateNickNames.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.ModerateNickNames.ModerateNickName(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            ModerateNickName - Handles the moderation of a nickname.
            </summary>
            <param name="modId">Mod Id of the Moderation item.</param>
            <param name="siteId">SiteId of moderation item.</param>
            <param name="userId">UserId of user being moderated.</param>
            <param name="userName">UserName of user being moderated.</param>
            <param name="status">Moderation Descision.</param>
            <exception cref="T:BBC.Dna.Utils.DnaException">if there is an error sending email.</exception>
        </member>
        <member name="M:BBC.Dna.ModerateNickNames.QueueNicknameForModeration(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds nickname to the queue for moderation
            </summary>
            <param name="userName">The new user name</param>
            <param name="userId">Thes users id</param>
            <param name="siteId">The site id</param>
            <param name="modId">The outputted moderation id</param>
        </member>
        <member name="M:BBC.Dna.ModerateNickNames.ResetNickName(System.String,System.Int32,System.Int32)">
            <summary>
            Forces resetting of a nickname.
            </summary>
            <param name="userName"></param>
            <param name="userId"></param>
            <param name="siteId"></param>
            <exception cref="T:BBC.Dna.Utils.DnaException">Error occurred moderating nickname</exception>
        </member>
        <member name="M:BBC.Dna.ModerateNickNames.Update(System.Int32,System.Int32,System.String@)">
            <summary>
            Method for Updating NickName Moderation Item with the given decision.
            To standardise processing of nicknames not publicly available.
            
            </summary>
            <param name="modId">ModId.</param>
            <param name="status">Moderation decision pass, fail.</param>
            <param name="email">Returns user email address.</param>
        </member>
        <member name="M:BBC.Dna.ModerateNickNames.SendEmail(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sends Email to the given recipient. eg If a nickname is failed the user concerned will be sent a 
            notification email.
            </summary>
            <param name="userId"></param>
            <param name="siteId"></param>
            <param name="oldNickName"></param>
            <param name="userEmail"></param>
            <exception cref="T:BBC.Dna.Utils.DnaException">If there is an error sending email.</exception>
        </member>
        <member name="T:BBC.Dna.ModerationUserStatuses">
            <summary>
            Class for generating User Moderation Statuses XML.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerationUserStatuses.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.ModerationUserStatuses.ProcessRequest">
            <summary>
            Produce User Moderation User Statuses XML from database.
            Caching the XML would be a good idea before this is included on lots of moderation pages.
            </summary>
        </member>
        <member name="M:BBC.Dna.ModerationUserStatuses.GetDescription(System.Int32)">
            <summary>
            Returns Moderation Status Description Given Status Id.
            </summary>
            <param name="ModStatusId"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Component.ModeratorManagement">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.ProcessRequest">
            <summary>
            Process Request Override
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.GenerateXml(System.String,System.Int32)">
            <summary>
            Generates XML for ModeratorManagement page.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.ProcessSubmission(System.String)">
            <summary>
            Checks parameters and performs moderator actions.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.RemoveAccess(System.String)">
            <summary>
            Remove a users access to a site or mod class for the given group.
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.GiveAccess(System.String)">
            <summary>
            Give a user access to a class or site.
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.updateUser(System.String,System.Int32)">
            <summary>
            Update a users access to a class or site.
            </summary>
            <param name="groupName"></param>
            <param name="userId"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.FindUserFromUserId(System.Xml.XmlElement,System.String)">
            <summary>
            Find a user from userid.
            </summary>
            <param name="foundUsers"></param>
            <param name="email"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.FindUserFromEmail(System.Xml.XmlElement,System.String)">
            <summary>
            Find user from email.
            </summary>
            <param name="foundUsers"></param>
            <param name="email"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModeratorManagement.AddModerationClasses">
            <summary>
            determines which moderation classes should be shown
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ProcessRecommendation">
            <summary>
            Summary of the ProcessRecommendation Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ProcessRecommendation.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ProcessRecommendation component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ProcessRecommendation.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ProcessRecommendation.TryGetPageParams(System.Int32@,System.Int32@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="recommendationID"></param>
            <param name="h2g2ID"></param>
            <param name="comments"></param>
            <param name="command"></param>
            <param name="scoutEmail"></param>
            <param name="scoutEmailSubject"></param>
            <param name="scoutEmailText"></param>
            <param name="authorEmail"></param>
            <param name="authorEmailSubject"></param>
            <param name="authorEmailText"></param>
            <param name="accept"></param>
            <param name="reject"></param>
            <param name="cancel"></param>
            <param name="fetch"></param>
            <param name="fetchID"></param>
        </member>
        <member name="M:BBC.Dna.Component.ProcessRecommendation.TryCreateProcessRecommendationXML(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            	Constructs the XML for the recommendation processing page, and processes
            	requests to accept or reject scout recommendations.
            </summary>
            <param name="recommendationID"></param>
            <param name="h2g2ID"></param>
            <param name="comments"></param>
            <param name="command"></param>
            <param name="scoutEmail"></param>
            <param name="scoutEmailSubject"></param>
            <param name="scoutEmailText"></param>
            <param name="authorEmail"></param>
            <param name="authorEmailSubject"></param>
            <param name="authorEmailText"></param>
            <param name="accept"></param>
            <param name="reject"></param>
            <param name="cancel"></param>
            <param name="fetch"></param>
            <param name="fetchID"></param>
        </member>
        <member name="P:BBC.Dna.Component.ProcessRecommendation.ProcessRecommendationMode">
            <summary>
            Accessor for ProcessRecommendationMode
            </summary>
        </member>
        <member name="T:BBC.Dna.ProcessRecommendationForm">
            <summary>
            ProcessRecommendationForm object
            </summary>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateBlankForm">
            <summary>
            Creates the XML for a blank process recommendation form.
            </summary>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateFromRecommendationID(BBC.Dna.IUser,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the decision form for this particular recommendation.
            </summary>
            <param name="user"></param>
            <param name="recommendationID"></param>
            <param name="comments"></param>
            <param name="acceptButton">should the accept button be present?</param>
            <param name="rejectButton">should the reject button be present?</param>
            <param name="cancelButton">should the cancel button be present?</param>
            <param name="fetchButton">should the fetch button be present?</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateFromEntryID(BBC.Dna.IUser,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the decision form for this particular recommendation.
            </summary>
            <param name="user"></param>
            <param name="entryID"></param>
            <param name="comments"></param>
            <param name="acceptButton">should the accept button be present?</param>
            <param name="rejectButton">should the reject button be present?</param>
            <param name="cancelButton">should the cancel button be present?</param>
            <param name="fetchButton">should the fetch button be present?</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateScoutRejectionEmail(System.String,System.String,System.Int32,System.DateTime,System.String@,System.String@)">
            <summary>
            Builds the default personalised email message for this recommendation
            	being rejected.
            </summary>
            <param name="scoutName">scouts username</param>
            <param name="entrySubject">subject of the entry recommended</param>
            <param name="h2g2ID">ID of the entry</param>
            <param name="dateRecommended">date that entry was recommended</param>
            <param name="scoutEmailSubject">the subject line for the email</param>
            <param name="scoutEmailText">the body of the email</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateAuthorAcceptanceEmail(System.String,System.String,System.Int32,System.DateTime,System.String@,System.String@)">
            <summary>
            Builds the default personalised email message to the author
            	for this recommendation being accepted.
            </summary>
            <param name="authorName">authors username</param>
            <param name="entrySubject">subject of the entry recommended</param>
            <param name="h2g2ID">ID of the entry</param>
            <param name="dateRecommended">date that entry was recommended</param>
            <param name="authorEmailSubject">the subject line for the email</param>
            <param name="authorEmailText">the body of the email</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateScoutAcceptanceEmail(System.String,System.String,System.Int32,System.DateTime,System.String@,System.String@)">
            <summary>
            Builds the default personalised email message for this recommendation
            	being accepted.
            </summary>
            <param name="scoutName">scouts username</param>
            <param name="entrySubject">subject of the entry recommended</param>
            <param name="h2g2ID">ID of the entry</param>
            <param name="dateRecommended">date that entry was recommended</param>
            <param name="scoutEmailSubject">the subject line for the email</param>
            <param name="scoutEmailText">the body of the email</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.CreateEmail(System.String,System.String,System.Boolean,System.String,System.Int32,System.DateTime,System.String@,System.String@)">
            <summary>
            Builds the default personalised email message to the author or scout
            	for this recommendation being accepted/rejected.
            </summary>
            <param name="name">username for the email</param>
            <param name="nameType">Whether this is a scout or author email</param>
            <param name="accept">Whether this is an accept or reject email</param>
            <param name="entrySubject">subject of the entry recommended</param>
            <param name="h2g2ID">ID of the entry</param>
            <param name="dateRecommended">date that entry was recommended</param>
            <param name="emailSubject">the subject line for the email</param>
            <param name="emailText">the body of the email</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.SubmitAccept(BBC.Dna.IUser,System.Int32,System.Int32,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Updates the recommendations status in the DB to show that it has
            	been accepted by a member of staff. Also returns the details to
            	allow an acceptance email to be sent to the scout.
            </summary>
            <param name="user">user doing the acceptance</param>
            <param name="h2g2ID_Old"></param>
            <param name="recommendationID">ID of the scout recommendation to accept</param>
            <param name="comments">any comments to attached to the recommendation</param>
            <param name="scoutEmail">email address to send the scouts acceptance email to</param>
            <param name="scoutEmailSubject">subject line for the email to scout</param>
            <param name="scoutEmailText">text of the acceptance email to scout</param>
            <param name="authorEmail">email address to send the authors acceptance email to</param>
            <param name="authorEmailSubject">subject line for the email to author</param>
            <param name="authorEmailText">text of the acceptance email to author</param>
        </member>
        <member name="M:BBC.Dna.ProcessRecommendationForm.SubmitReject(BBC.Dna.IUser,System.Int32,System.String,System.String@,System.String@,System.String@)">
            <summary>
            Updates the recommendations status in the DB to show that it has
            	been rejected by a member of staff.
            </summary>
            <param name="user">user doing the rejecting</param>
            <param name="recommendationID">ID of the scout recommendation to reject</param>
            <param name="comments">any comments to attached to the recommendation</param>
            <param name="scoutEmail"> email address to send the scouts rejection email to</param>
            <param name="emailSubject">subject line for the email</param>
            <param name="emailText">text of the automatic rejection email</param>
        </member>
        <member name="T:BBC.Dna.Component.RecommendEntry">
            <summary>
            Summary of the RecommendEntry Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RecommendEntry.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the RecommendEntry component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.RecommendEntry.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RecommendEntry.TryGetPageParams(System.Int32@,System.String@,System.String@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="h2g2ID"></param>
            <param name="comments"></param>
            <param name="command"></param>
        </member>
        <member name="M:BBC.Dna.Component.RecommendEntry.TryCreateRecommendEntryXML(System.Int32,System.String,System.String)">
            <summary>
            Constructs the XML for the Recommend An Entry page for Scouts.
            	This is a simple page allowing a scout to suggest and entry for
            	inclusion in the edited guide, along with their comments as to
            	why it should be included.
            </summary>
            <param name="h2g2ID"></param>
            <param name="comments"></param>
            <param name="command"></param>
        </member>
        <member name="P:BBC.Dna.Component.RecommendEntry.RecommendEntryMode">
            <summary>
            Accessor for RecommendEntryMode
            </summary>
        </member>
        <member name="T:BBC.Dna.RecommendEntryForm">
            <summary>
            RecommendEntryForm object
            </summary>
        </member>
        <member name="M:BBC.Dna.RecommendEntryForm.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.RecommendEntryForm.CreateBlankForm">
            <summary>
            Creates the XML for a blank entry recommendation form.
            </summary>
        </member>
        <member name="M:BBC.Dna.RecommendEntryForm.CreateFromh2g2ID(BBC.Dna.IUser,System.Int32,System.String)">
            <summary>
            Creates the XML for a recommendation form for the entry with
            	this entry ID.
            </summary>
        </member>
        <member name="M:BBC.Dna.RecommendEntryForm.SubmitRecommendation(BBC.Dna.IUser,System.Int32,System.String)">
            <summary>
            Submits the recommendatoin if it is a valid one. Creates appropriate
            	XML to report whether or not the submission was successful.
            </summary>
        </member>
        <member name="T:BBC.Dna.SiteXmlBuilder">
            <summary>
            Creates DNA style XML for site objects
            </summary>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor
            </summary>
            <param name="context">The current context</param>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.CreateXmlSiteList(BBC.Dna.Sites.ISiteList)">
            <summary>
            Creates Site XML for site list
            </summary>
            <param name="sites">The site list</param>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GenerateXml(System.Xml.XmlNode,BBC.Dna.Sites.ISite)">
            <summary>
            Public method to generate the Sites XML representation
            </summary>
            <param name="siteOptionListXml">an XMLNode representing its site options. Can be null</param>
            <param name="site">The site</param>
            <returns>The node representing the site data</returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GenerateXml(System.Xml.XmlNode,BBC.Dna.Sites.ISite,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Public method to generate the Sites XML representation
            </summary>
            <param name="siteOptionListXml">an XMLNode representing its site options. Can be null</param>
            <param name="site">The site</param>
            <param name="element"> The element to add the xml to</param>
            <param name="fullDetails">False means just a few key bits of information, True is all details</param>
            <returns>The node representing the site data</returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GenerateAllSitesXml(BBC.Dna.Sites.ISiteList)">
            <summary>
            Create an Xml representation of the whole site list
            <param name="sites">The site list</param>
            </summary>
            <returns>XmlNode pointing to the root of the document</returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GenerateSitesForUserAsEditorXml(BBC.Dna.Sites.ISiteList)">
            <summary>
            Returns all sites that the user is an editor for
            </summary>
            <param name="sites"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GenerateSitesForUserAsEditorXml(BBC.Dna.Sites.ISiteList,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="sites"></param>
            <param name="fullSiteDetails"></param>
            <param name="rootTagName"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GenerateSiteOptions(BBC.Dna.Sites.ISite,System.Boolean)">
            <summary>
            Returns all the site options in XML format
            </summary>
            <param name="site">The site to read options from</param>
            <param name="preview">Use preview config or not</param>
            <returns>The XMl list of options</returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GetSiteOptionListXml(BBC.Dna.Sites.ISiteList)">
            <summary>
            Generate a list of site options for all sites.
            Does not include Global Site Options for each site to avoid duplication of XML.
            </summary>
            <param name="sites"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GetSiteOptionListForSiteXml(System.Int32,BBC.Dna.Sites.ISiteList,System.Boolean)">
            <summary>
            
            </summary>
            <param name="siteId"></param>
            <param name="sites"></param>
            <param name="includeGlobal"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SiteXmlBuilder.GetSiteOptionListForSiteXml(System.Int32,BBC.Dna.Sites.ISiteList)">
            <summary>
            Returns a list of SiteOptions for the given site.
            If a site option is not defined for the given site, a SiteOption with site id of 0 is
            given in it's place
            </summary>
            <param name="siteId">A site id</param>
            <param name="sites">The site list</param>
            <returns>List of site options for the given site</returns>
        </member>
        <member name="T:BBC.Dna.Component.SoloGuideEntries">
            <summary>
            SoloGuideEntries - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the SoloGuideEntries component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.TryActionSoloGuideEntries(System.String,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="userID"></param>
            <param name="oldGroupID"></param>
            <param name="newGroupID"></param>
            <param name="refreshGroups"></param>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.TryGetPageParams(System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Gets params from the request and validates input params.
            </summary>
            <param name="skip">Number of items to skip</param>
            <param name="show">Number of items to show</param>
            <param name="action">Number of items to skip</param>
            <param name="userID">User ID</param>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.GetSoloGuideEntriesXml(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to get the XML representation of the Solo Guide Entries results
            </summary>
            <param name="skip">Number of items to skip</param>
            <param name="show">Number of items to show</param>
            <param name="action">Number of items to skip</param>
            <param name="userID">User ID</param>
            <param name="oldGroupID"></param>
            <param name="newGroupID"></param>
            <param name="refreshGroups"></param>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.TryGetSoloGuideEntriesXml(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calls the correct stored procedure given the inputs selected
            </summary>
            <param name="skip">Number of items to skip</param>
            <param name="show">Number of items to show</param>
            <param name="action">Number of items to skip</param>
            <param name="userID">User ID</param>
            <param name="oldGroupID"></param>
            <param name="newGroupID"></param>
            <param name="refreshGroups"></param>
        </member>
        <member name="M:BBC.Dna.Component.SoloGuideEntries.GenerateSoloGuideEntriesXml(BBC.Dna.Data.IDnaDataReader,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            With the returned data set generate the XML for the Solo Guide Entries page
            </summary>
            <param name="dataReader">Data set to turn into XML</param>
            <param name="skip">Number of items to skip</param>
            <param name="show">Number of items to show</param>
            <param name="action">Number of items to skip</param>
            <param name="userID">User ID</param>
            <param name="oldGroupID"></param>
            <param name="newGroupID"></param>
            <param name="refreshGroups"></param>
        </member>
        <member name="T:BBC.Dna.Component.SubmitSubbedEntry">
            <summary>
            Summary of the SubmitSubbedEntry object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubmitSubbedEntry.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the SubmitSubbedEntry component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SubmitSubbedEntry.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubmitSubbedEntry.TryCreateSubmitSubbedEntryXML(System.Int32,System.String,System.String)">
            <summary>
            Functions generates the TryCreateSubmitSubbedEntryXML XML
            </summary>
            <param name="H2G2ID">H2G2 ID of the article to submit</param>
            <param name="comments">Comments</param>
            <param name="command">Command to action</param>
        </member>
        <member name="M:BBC.Dna.Component.SubmitSubbedEntry.TryGetPageParams(System.Int32@,System.String@,System.String@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="h2g2ID"></param>
            <param name="comments"></param>
            <param name="command"></param>
        </member>
        <member name="P:BBC.Dna.Component.SubmitSubbedEntry.SubmitSubbedEntryMode">
            <summary>
            Accessor for SubmitSubbedEntryMode
            </summary>
        </member>
        <member name="T:BBC.Dna.SubmitSubbedEntryForm">
            <summary>
            SubmitSubbedEntryForm object
            </summary>
        </member>
        <member name="M:BBC.Dna.SubmitSubbedEntryForm.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.SubmitSubbedEntryForm.CreateBlankForm">
            <summary>
            Creates the XML for a blank subbed entry form.
            </summary>
        </member>
        <member name="M:BBC.Dna.SubmitSubbedEntryForm.CreateFromh2g2ID(BBC.Dna.IUser,System.Int32,System.String)">
            <summary>
            Creates the XML for a recommendation form for the entry with
            	this entry ID.
            </summary>
        </member>
        <member name="M:BBC.Dna.SubmitSubbedEntryForm.SubmitSubbedEntry(BBC.Dna.IUser,System.Int32,System.String)">
            <summary>
            Submits the entry as finished with by the sub editor. Creates appropriate
            	XML to report whether or not the submission was successful.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ThreadEntrySearch">
            <summary>
            Summary of the ThreadEntrySearch object, gets a list of posts for the given search
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ThreadEntrySearch component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.TryCreateThreadEntrySearchXml">
            <summary>
            Method called to try to create the TryCreateThreadEntrySearch xml, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <returns>Whether the search has suceeded with out error</returns>
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.TryGetThreadSearchXml(System.String,System.Int32,System.Int32)">
            <summary>
            Public method to try and get the xml either from cache or DB
            </summary>
            <param name="search">Search term</param>
            <param name="skip">skip</param>
            <param name="show">show</param>
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.TryGetPageParams(System.String@,System.Int32@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.GetThreadSearchXml(System.String,System.Int32,System.Int32)">
            <summary>
            Calls the post list class to generate the posts matching the search
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ThreadEntrySearch.GetThreadSearchCachedXml(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the XML from cache
            </summary>
            <param name="search"></param>
            <param name="skip"></param>
            <param name="show"></param>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="T:BBC.Dna.Component.UserDetailsPageBuilder">
            <summary>
            Builds the sub-article details and builds them into the page XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserDetailsPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubArticleStatusBuilder
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.UserDetailsPageBuilder.ProcessRequest">
            <summary>
            Construct a user page from its various constituent parts based
            	on the request info available from the input context supplied during
            	construction.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserDetailsPageBuilder.UpdateUserDetails(System.String@,System.String@)">
            <summary>
            Updates the users details based on the current form submission. If
            	there is a problem such as the new password not being confirmed
            	correctly then will return true since the system itself has not
            	failed, but will set the sStatusMessage string to say what the
            	problem was so this can be relayed to the user.
            </summary>
            <param name="statusMessage">string describing the status of things after this
            		call, in particular any error messages.</param>
            <param name="statusType">string describing the type of things after this
            		call, in particular any error messages.</param>
            <returns>true for success, false for failure. A mistake in the users input
            	will still return true but will set the sStatusMessage string to
            	indicate what was wrong.</returns>
        </member>
        <member name="T:BBC.Dna.Component.EditReviewForum">
            <summary>
            Summary of the EditReviewForum object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.EditReviewForum.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the EditReviewForum component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.EditReviewForum.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.EditReviewForum.TryCreateEditReviewForumBuilderXML">
            <summary>
            Gets the params for the page
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.EditReviewForum.EditReviewForumMode">
            <summary>
            Accessor for EditReviewForumMode
            </summary>
        </member>
        <member name="T:BBC.Dna.EditReviewForumForm">
            <summary>
            EditReviewForumForm object
            </summary>
        </member>
        <member name="M:BBC.Dna.EditReviewForumForm.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.EditReviewForumForm.RequestUpdate(System.Int32,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Updates the review forum with the supplied data if it is valid, otherwise
            	produces the form with valid error messages, false if it didn't handle the reques
            </summary>
            <param name="reviewForumID"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="recommendable"></param>
            <param name="incubateTime"></param>
            <param name="currentSiteID"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.EditReviewForumForm.DoAddNew(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds in a new edit review forum
            </summary>
            <param name="name"></param>
            <param name="url"></param>
            <param name="recommendable"></param>
            <param name="incubateTime"></param>
            <param name="currentSiteID"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.EditReviewForumForm.CreateFromDB(System.Int32,System.Int32)">
            <summary>
            Creates the EditReviewForumForm with data from the reviewforum
            </summary>
            <param name="reviewForumID"></param>
            <param name="currentSiteID"></param>
            <returns>true if created from database or if it generated a proper error</returns>
        </member>
        <member name="T:BBC.Dna.Component.NewUsersPageBuilder">
            <summary>
            Builds the sub-article details and builds them into the page XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.NewUsersPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubArticleStatusBuilder
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.NewUsersPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.InfoBuilder">
            <summary>
            Builds the sub-article details and builds them into the page XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubArticleStatusBuilder
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateRecentConversations(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the latest conversation for a given site
            </summary>
            <param name="siteID">The site id</param>
            <param name="skip">Number to skip</param>
            <param name="show"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateRecentArticles(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the latest articles for a given site
            </summary>
            <param name="siteID">The site id</param>
            <param name="skip">Number to skip</param>
            <param name="show"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateTotalApprovedEntries(System.Int32)">
            <summary>
            Gets the total number of approved entries
            </summary>
            <param name="siteID">The site id</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateTotalRegisteredUsers">
            <summary>
            Gets the total number of registered users
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateUneditedArticleCount(System.Int32)">
            <summary>
            Gets the total number of uneditted articles
            </summary>
            <param name="siteID">The site id</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateProlificPosters(System.Int32)">
            <summary>
            Creates a list of prolific posters
            </summary>
            <param name="siteID">The site ID</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.InfoBuilder.CreateEruditePosters(System.Int32)">
            <summary>
            Creates a list of erudite posters
            </summary>
            <param name="siteID">The site ID</param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Component.ArticleSearch">
            <summary>
            Article Search - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ArticleSearch component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.DoArticleSearchWithParams(BBC.Dna.ArticleSearchParams)">
            <summary>
            Externally available Method called to try the Article Search, given the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <param name="asp">Class containing all the search parameters.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.TryArticleSearch">
            <summary>
            Method called to try the Article Search, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <returns>Whether the search has suceeded with out error</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.TryGetPageParams(BBC.Dna.ArticleSearchParams@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="asp">Class containing all the search parameters.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GenerateArticleSearchPageXml(BBC.Dna.ArticleSearchParams)">
            <summary>
            Calls the correct stored procedure given the inputs selected
            </summary>
            <param name="asp">Class containing all the search parameters.</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GenerateArticleSearchXml(BBC.Dna.Data.IDnaDataReader,BBC.Dna.ArticleSearchParams)">
            <summary>
            With the returned data set generate the XML for the Article Search page
            </summary>
            <param name="dataReader">The returned search resultset</param>
            <param name="asp">The Article Search Params</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.AddPollXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode)">
            <summary>
            AddPollXml - Delegates esponsibility of producing standard Poll Xml to the Poll Class.
            Only produces Poll Xml where a valid Poll exists in the resultset.
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="article">Parent node to add the xml to</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.AddMediaAssetXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode,System.Int32)">
            <summary>
            Adds the MediaAsset XML data to the XML document
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="parent">parent to add the xml to</param>
            <param name="mediaAssetID">Media asset id in question</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetArticleSearchHotlistStoredProcedureName(System.Int32,System.Int32,System.String)">
            <summary>
            Gets the name of the stored procedure to call for the hotlist gheneration
            </summary>
            <param name="contenttype">The content type to search for</param>
            <param name="searchDateType">The type of date search to do if any</param>
            <param name="phrases">The phrases to look for if any</param>
            <returns>String containing the name of the storedprocedure to call</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GeneratePhraseXml(System.Collections.ArrayList,System.Xml.XmlElement)">
            <summary>
            Generates the Phrase XML from an ArrayList of phrases
            </summary>
            <param name="phraselist">list of phrases</param>
            <param name="parent">Element to attach the xml to</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetArticleSearchCachedXml(BBC.Dna.ArticleSearchParams)">
            <summary>
            Gets the XML from cache
            </summary>
            <param name="asp">Class containing all the search parameters.</param>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetArticleSearchHotlistCachedXml">
            <summary>
            Gets the cached hotlist information if there is any
            </summary>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GenerateKeyPhraseHotlist(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Adds in the key phrase hotlist 
            </summary>
            <param name="siteID">Site id to run the searches against</param>
            <param name="skip">Number of articles to skip</param>
            <param name="show">Number of articles to show</param>
            <param name="contentType">Type of articles to articles to search for </param>
            <param name="sortBy">sortby option for the search</param>
            <param name="dateSearchType">Date search type</param>
            <param name="phrases">Key Phrases to search for</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GenerateArticleSearchHotlistXml(BBC.Dna.Data.IDnaDataReader,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds in the key phrase hotlist 
            </summary>
            <param name="dataReader">Data set to turn into XML</param>
            <param name="skip">Number of articles to skip</param>
            <param name="show">Number of articles to show</param>
            <param name="contentType">Type of articles to articles to search for </param>
            <param name="sortBy">sortby option for the search</param>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.ParseDateParams(System.String,System.String,System.DateTime@,System.DateTime@)">
            <summary>
            Parses and prepares date range params for ArticleSearch.
            </summary>
            <param name="startDateText">Start date</param>
            <param name="endDateText">End date</param>
            <param name="startDate">Parsed start date</param>
            <param name="endDate">Parsed end date</param>
            <returns><see cref="T:BBC.Dna.Utils.DateRangeValidation.ValidationResult"/></returns>
            <remarks>If no endDateText is passed in then endDate is set to startDate + 1 day.</remarks>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.ParseDateParams(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            Parses and prepares dates params for ArticleSearch.
            </summary>
            <param name="startYear">Start year</param>
            <param name="startMonth">Start month</param>
            <param name="startDay">Start day</param>
            <param name="endYear">End year</param>
            <param name="endMonth">End month</param>
            <param name="endDay">End day</param>
            <param name="startDate">Parsed start date</param>
            <param name="endDate">Parsed end date</param>
            <returns><see cref="T:BBC.Dna.Utils.DateRangeValidation.ValidationResult"/></returns>
            <remarks>If no endDay is passed in then endDate is set to startDate + 1 day.</remarks>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetGeocodeUri(System.String)">
            <summary>
            Formats the uri string to call to get get the required info back
            </summary>
            <param name="address">The address to try and find</param>
            <returns>Uri to call to get the info back</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetCoordinates(System.String)">
            <summary>
            Gets a Coordinate from an address.
            </summary>
            <param name="address">An address.
            <remarks>
            <example>70 Dunbar Road, Wood Green, London, UK</example>
            </remarks>
            </param>
            <returns>A spatial coordinate that contains the latitude and longitude of the address.</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetPostCoderUri(System.String)">
            <summary>
            Formats the uri string to call to get get the required info back from PostCoder
            </summary>
            <param name="postcode">The postcode to try and find</param>
            <returns>Uri to call to get the info back</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.GetPostCodeCoordinates(System.String)">
            <summary>
            Gets a Coordinate from a postcode.
            </summary>
            <param name="postcode">An postcode</param>
            <returns>A spatial coordinate that contains the latitude and longitude of the postcode.</returns>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.OSGridToLatLong(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            Convert OS grid reference to geodesic co-ordinates
            </summary>
            <param name="easting"></param>
            <param name="northing"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="T:BBC.Dna.Component.ArticleSearch.Coordinate">
            <summary>
            Coordiate structure. Holds Latitude and Longitude.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ArticleSearch.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for the struct
            </summary>
            <param name="latitude">Starting latitude</param>
            <param name="longitude">Starting Longitude</param>
        </member>
        <member name="P:BBC.Dna.Component.ArticleSearch.Coordinate.Latitude">
            <summary>
            Accessor for the Latitude
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ArticleSearch.Coordinate.Longitude">
            <summary>
            Accessor for the Longitude
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.DynamicListException">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.DynamicListException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:BBC.Dna.DynamicLists.dlistupdatesp">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.dlistupdatesp.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.dlistupdatesp.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.dlistupdatesp.LogEvent(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.dlistupdatesp.Process">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.Page.DnaBasePage">
            <summary>
            Summary description for DnaBasePage
            </summary>
            <summary>
            Summary description for DnaBasePage
            </summary>
            <summary>
            Summary description for DnaBasePage
            </summary>
            <summary>
            Summary description for DnaBasePage
            </summary>
        </member>
        <member name="T:BBC.Dna.IInputContext">
            <summary>
            Interface that represents all aspects of a DNA requestapp
            
            </summary>
        </member>
        <member name="M:BBC.Dna.IInputContext.AddAllSitesXmlToPage">
            <summary>
            Puts a complete site list XML chunk in the page
            </summary>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetSiteOptionValueInt(System.String,System.String)">
            <summary>
            Gets the given int site option for the current site
            <see cref="M:BBC.Dna.Sites.SiteOptionList.GetValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetSiteOptionValueBool(System.String,System.String)">
            <summary>
            Gets the given bool site option for the current site
            <see cref="M:BBC.Dna.Sites.SiteOptionList.GetValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetSiteOptionValueString(System.String,System.String)">
            <summary>
            Gets the given bool site option for the current site
            <see cref="M:BBC.Dna.Sites.SiteOptionList.GetValueString(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section">Site option section</param>
            <param name="name">Site option name</param>
            <returns></returns>
            <exception cref="T:BBC.Dna.Sites.SiteOptionNotFoundException"></exception>
            <exception cref="T:BBC.Dna.Sites.SiteOptionInvalidTypeException"></exception>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetCachedObject(System.String)">
            <summary>
            Gets an object out of the cache that matches the key, or null
            </summary>
            <param name="key">The key</param>
            <returns>The object, or null</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.CacheObject(System.String,System.Object,System.Int32)">
            <summary>
            Caches the object under the given key, and will cache it for up to the number of seconds passed in.
            </summary>
            <param name="key">The key</param>
            <param name="o">The object</param>
            <param name="seconds">Number of seconds</param>
        </member>
        <member name="M:BBC.Dna.IInputContext.DoesParamExist(System.String,System.String)">
            <summary>
            Get a values indicating whether a parameter exists on the input context.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="description">Description of the parameter for documentation purposes</param>
            <returns>true if the parameter exists, otherwise false.</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.TryGetParamString(System.String,System.String@,System.String)">
            <summary>
            Gets the specified parameter as a string. Boolean return value indicates whether the parameter was found or not.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="value">Reference to a string to receive the value</param>
            <param name="description">Description of the paramter for documentation purposes</param>
            <returns>bool if the parameter exists, otherwise false.</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.TryGetParamIntOrKnownValueOnError(System.String,System.Int32,System.String)">
            <summary>
            Tries to get the specified param as an int, or returns the "Known Value" if it fails.
            Alternative to the GetParamIntOrZero(...) Method if zero can be a valid value.
            </summary>
            <param name="paramName">The name of the param you want to get that value for</param>
            <param name="knownValue">The known value you want to return on failure</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>The parsed value, or the known value on failure</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamStringOrEmpty(System.String,System.String)">
            <summary>
            Gets the specified parameter as a string. Empty string returned if the parameter doesn't exist.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="description">Description of parameter for documentation purposes</param>
            <returns>string value of the parameter.</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetCookie(System.String)">
            <summary>
            Gets a specified DnaCookie.
            </summary>
            <param name="cookieName">Name of the cookie.</param>
            <returns>DnaCookie object.</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.AddCookie(System.Web.HttpCookie)">
            <summary>
            Adds a cookie
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamIntOrZero(System.String,System.String)">
            <summary>
            Gets the named parameter from the query string or form data.
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="name">Name of paramter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>Integer value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetAllParamNames">
            <summary>
            Gets a string array containing 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetAllParamsWithPrefix(System.String)">
            <summary>
            Returns the name value pairs of all the parameters in the current query that have the given prefix
            </summary>
            <param name="prefix"></param>
            <returns>A name value collection of all parameters in the query that have the given prefix</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamCountOrZero(System.String,System.String)">
            <summary>
            Counts the number of parameters of the given name in the request
            </summary>
            <param name="paramName">name of parameter to count</param>
            <param name="description">description of parameter for documentation purposes</param>
            <returns>Number of params</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamStringOrEmpty(System.String,System.Int32,System.String)">
            <summary>
            Get one of multiple named parameters
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="index">index of parameter</param>
            <param name="description">description of parameter</param>
            <returns>value of parameter</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamDoubleOrZero(System.String,System.String)">
            <summary>
            Gets the named parameter from the query string or form data in double format
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="name">Name of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>Double value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamDoubleOrZero(System.String,System.Int32,System.String)">
            <summary>
            Gets one of multiple named parameters from the query string or form data in double format
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="name">Name of parameter</param>
            <param name="index">Index of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>Double value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamIntOrZero(System.String,System.Int32,System.String)">
            <summary>
            Gets one of multiple named parameters from the query string or form data in int format
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="name">Name of parameter</param>
            <param name="index">Index of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>Integer value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamBoolOrFalse(System.String,System.String)">
            <summary>
            Gets the named parameter from the query string or form data in bool format
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="name">Name of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>bool value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetParamBoolOrFalse(System.String,System.Int32,System.String)">
            <summary>
            Gets one of multiple named parameters from the query string or form data in bool format
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="name">Name of parameter</param>
            <param name="index">Index of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>bool value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.GetSiteRoot(System.Int32)">
            <summary>
            Returns a formed siteURL
            </summary>
            <param name="siteid">Site id</param>
            <returns>Returned site url</returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.SendDNASystemMessage(System.Int32,System.Int32,System.String)">
            <summary>
            Sends a DNA System Message
            </summary>
            <param name="sendToUserID">User id to send the system message to</param>
            <param name="siteID">Site ID involved</param>
            <param name="messageBody">Body of the SYstem Message</param>
        </member>
        <member name="M:BBC.Dna.IInputContext.SendMailOrSystemMessage(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sends a mail or DNA System Message
            </summary>
            <param name="email">Email address </param>
            <param name="subject">Subject of the email</param>
            <param name="body">Body of the email</param>
            <param name="fromAddress">email of the from address</param>
            <param name="fromName">From whom is the message</param>
            <param name="insertLineBreaks">Put the line breaks in of not</param>
            <param name="userID">User ID involved</param>
            <param name="siteID">For which Site</param>
        </member>
        <member name="M:BBC.Dna.IInputContext.IsPreviewMode">
            <summary>
            Returns if in preview mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.IInputContext.CreateDnaDataReaderCreator">
            <summary>
            Returns a IDnaDataReaderCreator relevant to the current context
            </summary>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.IInputContext.ViewingUser">
            <summary>
            Gets the User object representing the viewing user.
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.CurrentSite">
            <summary>
            Gets the Site object of the current site.
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.CurrentDnaRequest">
            <summary>
            Gets the current dan request object
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.SkinSelector">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.UserAgent">
            <summary>
            The browser or UserAgent for this request
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.GetCurrentSignInObject">
            <summary>
            Get the current Signin object for this request. This could be either ProfileAPI or Identity web service
            depending on the sign in method for the site
            </summary>
            <returns>The current sign on object for the request</returns>
        </member>
        <member name="P:BBC.Dna.IInputContext.IsCurrentSiteMessageboard">
            <summary>
            Gets whether the current site is a messageboard
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.IpAddress">
            <summary>
            The IP address for this request
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.BBCUid">
            <summary>
            UID extracted from the BBC-UID cookie on this request
            </summary>
        </member>
        <member name="P:BBC.Dna.IInputContext.IsSecureRequest">
            <summary>
            Is secure request i.e has IDENTITY-HTTPS cookie
            </summary>
        </member>
        <member name="T:BBC.Dna.IOutputContext">
            <summary>
            Interface the represents the output context for a dna request.
            </summary>
        </member>
        <member name="M:BBC.Dna.IOutputContext.GetSkinPath(System.String)">
            <summary>
            Get the skin path.
            </summary>
            <param name="leaf">Name of the skin file.</param>
            <returns>String representing the skin path.</returns>
        </member>
        <member name="M:BBC.Dna.IOutputContext.Redirect(System.String)">
            <summary>
            Redirects to the specified URL rather than sending a response
            </summary>
            <param name="Url">URL to which to redirect</param>
        </member>
        <member name="M:BBC.Dna.IOutputContext.GetCachedXslTransform(System.String)">
            <summary>
            Gets a cached transform for a given xslt file. If there isn't a cached version, then it creates it and then adds it to the cache
            </summary>
            <param name="xsltFileName">The name of the xslt file you want to get the cached transform for</param>
            <returns>The transform for the xslt file.</returns>
        </member>
        <member name="M:BBC.Dna.IOutputContext.SetContentType(System.String)">
            <summary>
            Sets the Content-type header for this request
            </summary>
            <param name="contentType">value of the content type</param>
        </member>
        <member name="M:BBC.Dna.IOutputContext.IsHtmlCachingEnabled">
            <summary>
            Is Html caching enabled? Call this to find out.
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:BBC.Dna.IOutputContext.GetHtmlCachingTime">
            <summary>
            Gets the time, in seconds, to cache html output
            </summary>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:BBC.Dna.IOutputContext.CreateRequestCacheKey">
            <summary>
            Creates a key based on the request and it's query string params
            </summary>
            <returns>The key</returns>
        </member>
        <member name="M:BBC.Dna.IOutputContext.GetCachedObject(System.String)">
            <summary>
            Gets an object out of the cache that matches the key, or null
            </summary>
            <param name="key">The key</param>
            <returns>The object, or null</returns>
        </member>
        <member name="M:BBC.Dna.IOutputContext.CacheObject(System.String,System.Object,System.Int32)">
            <summary>
            Caches the object under the given key, and will cache it for up to the number of seconds passed in.
            </summary>
            <param name="key">The key</param>
            <param name="o">The object</param>
            <param name="seconds">Number of seconds</param>
        </member>
        <member name="M:BBC.Dna.IOutputContext.VerifySkinFileExists(System.String,System.String)">
            <summary>
            Verifies skin file exists in file system.
            </summary>
            <param name="skinName"></param>
            <param name="skinSet"></param>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.IOutputContext.Writer">
            <summary>
            Gets the TextWriter output is written to.
            </summary>
        </member>
        <member name="P:BBC.Dna.IOutputContext.DebugSkinFile">
            <summary>
            Debug property that holds the debug skin filename which is set via the d_skinfile URL param
            </summary>
        </member>
        <member name="P:BBC.Dna.IOutputContext.Cookies">
            <summary>
            Gets the cookie collection for the response
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateDnaDataReader(System.String)">
            <summary>
            Create a DnaDataReader for this input context.
            </summary>
            <param name="name">Name passed to DnaDataReader constructor</param>
            <returns>Instance of a DnaDataReader.</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateDnaDataReader(System.String,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            Create a DnaDataReader for this input context.
            </summary>
            <param name="name">Name passed to DnaDataReader constructor</param>
            <param name="dnaDiagnostics">The diagnostics object to use for log writing</param>
            <returns>Instance of a DnaDataReader.</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.UrlEscape(System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.UrlEscape(System.String)"/>
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.EnsureAllowedURLsExists(System.Boolean,BBC.Dna.IAppContext)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.EnsureAllowedURLsExists(System.Boolean,BBC.Dna.IAppContext)"/>
            </summary>
            <param name="context">The context</param>
            <param name="recacheData"></param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteOptionValueInt(System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteOptionValueBool(System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueBool(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteOptionValueString(System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueString(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteOptionValueInt(System.Int32,System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="siteId"></param>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteOptionValueBool(System.Int32,System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueBool(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="siteId"></param>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteOptionValueString(System.Int32,System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueString(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="siteId"></param>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.IsPreviewMode">
            <summary>
            Returns if preview flag set
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.SetCurrentSiteName">
            <summary>
            Sets the Site name from the si input parameter or sets it to h2g2 if none found
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.SetSkinName">
            <summary>
            Sets the skin name from the sk input parameter or sets it to brunel if none found
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddAllSitesXmlToPage">
            <summary>
            Put in the XML representation of all the sites into the page
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.DoesParamExist(System.String,System.String)">
            <summary>
            This function is used to check to see if a given param exists
            </summary>
            <param name="paramName">The name of the param you want to check for</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>True if it exists or false if not</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.TryGetParamString(System.String,System.String@,System.String)">
            <summary>
            This function returns the value for a given param
            </summary>
            <param name="paramName">The name of the param you want to get that value for</param>
            <param name="value">reference string that will take the value</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>True if it exists, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.TryGetParamIntOrKnownValueOnError(System.String,System.Int32,System.String)">
            <summary>
            Tries to get the specified param as an int, or returns the "Known Value" if it fails.
            Alternative to the GetParamIntOrZero(...) Method if zero can be a valid value.
            </summary>
            <param name="paramName">The name of the param you want to get that value for</param>
            <param name="knownValue">The known value you want to return on failure</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>The parsed value, or the known value on failure</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetCookie(System.String)">
            <summary>
            Function for getting a given cookie
            </summary>
            <param name="cookieName">The name of the cookie that you want to get</param>
            <returns>The reference to our new DnaCookie or null if it could not be found</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddCookie(System.Web.HttpCookie)">
            <summary>
            Function for add the given cookie
            </summary>
            <param name="cookie">The name of the cookie that you want to get</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamStringOrEmpty(System.String,System.String)">
            <summary>
            Get a parameter value, or empty string if the parameter does not exist
            </summary>
            <param name="paramName">name of parameter to find</param>
            <param name="description">Description of parameter for documenation purposes</param>
            <returns>string value of parameter or empty string</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamIntOrZero(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetAllParamNames">
            <summary>
            Returns a list of all the parameter names in the current query
            </summary>
            <returns>A list of strings with all the parameter names in the query</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetAllParamsWithPrefix(System.String)">
            <summary>
            Returns a list of all the parameter names in the current query
            </summary>
            <returns>A list of strings with all the parameter names in the query</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamCountOrZero(System.String,System.String)">
            <summary>
            Counts the number of parameters of the given name in the request
            </summary>
            <param name="paramName">name of parameter to count</param>
            <param name="description">description of parameter for documentation purposes</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamStringOrEmpty(System.String,System.Int32,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="index"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamDoubleOrZero(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamDoubleOrZero(System.String,System.Int32,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="index"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamIntOrZero(System.String,System.Int32,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="index"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamBoolOrFalse(System.String,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetParamBoolOrFalse(System.String,System.Int32,System.String)">
            <summary>
            <see cref="T:BBC.Dna.IInputContext"/>
            </summary>
            <param name="paramName"></param>
            <param name="index"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSiteRoot(System.Int32)">
            <summary>
            Gets the site URL
            </summary>
            <param name="siteid">Site ID involved</param>
            <returns>Site Url to fill in</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.SendEmail(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email
            </summary>
            <param name="email">Email address </param>
            <param name="subject">Subject of the email</param>
            <param name="body">Body of the email</param>
            <param name="fromAddress">email of the from address</param>
            <param name="fromName">From whom is the message</param>
            <param name="insertLineBreaks">Put the line breaks in of not</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.SendDNASystemMessage(System.Int32,System.Int32,System.String)">
            <summary>
            Sends a DNA System Message
            </summary>
            <param name="sendToUserID">User id to send the system message to</param>
            <param name="siteID">Site ID involved</param>
            <param name="messageBody">Body of the SYstem Message</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.SendMailOrSystemMessage(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sends a mail or DNA System Message
            </summary>
            <param name="email">Email address </param>
            <param name="subject">Subject of the email</param>
            <param name="body">Body of the email</param>
            <param name="fromAddress">email of the from address</param>
            <param name="fromName">From whom is the message</param>
            <param name="insertLineBreaks">Put the line breaks in of not</param>
            <param name="userID">User ID involved</param>
            <param name="siteID">For which Site</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateDnaDataReaderCreator">
            <summary>
            Creates a IDnaDataReaderCreator object relevent to the this Input Context
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetSkinPath(System.String)">
            <summary>
             Get the skin path.
            </summary>
            <param name="leaf">Name of the skin file.</param>
            <returns>String representing the skin path.</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.Redirect(System.String)">
            <summary>
            Redirects to the specified URL rather than sending a response
            </summary>
            <param name="Url">URL to which to redirect</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.SetContentType(System.String)">
            <summary>
            Sets the Content-type header for this request
            </summary>
            <param name="contentType">value of the content type</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.IsHtmlCachingEnabled">
            <summary>
            Checks to see if the current site and page is using html caching. It also depends on the user being logged in or not.
            Caching only works for logged out users
            </summary>
            <returns>True if caching is enaqbled and the user is logged out, false if caching is disabled or the user is logged in</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetHtmlCachingTime">
            <summary>
            Base implementaion always returns 0
            </summary>
            <returns>0</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateRequestCacheKey">
            <summary>
            Creates a key unique for this request.  It's based on the query string params
            </summary>
            <returns>the key</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetCachedObject(System.String)">
            <summary>
            Returns the object stored in the cache with the given key, or null is it's not found
            </summary>
            <param name="key">The key</param>
            <returns>The object, or null if not found</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CacheObject(System.String,System.Object,System.Int32)">
            <summary>
            Caches the given object, with the given key for the given number of seconds.
            If an object is already cached under the given key, it is replaced
            </summary>
            <param name="key">The key</param>
            <param name="o">The object</param>
            <param name="seconds">Number of seconds to cache for</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.FileCachePutItem(System.String,System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.IAppContext.FileCachePutItem(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.VerifySkinFileExists(System.String,System.String)">
            <summary>
            Verifies that specified skin exists in the file structure.
            </summary>
            <param name="skinName"></param>
            <param name="skinSet"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.#ctor(BBC.Dna.IDnaWebPage)">
            <summary>
            The DnaBasePage constructor.
            </summary>
            <param name="page">An interface to a DnaWebPage</param>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage._page">
            <summary>
            Which users are allowed to access this page. Default to any user.
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.Page_Load(System.Object,System.EventArgs)">
            <summary>
            This is where the page is initialised and all components get added.
            </summary>
            <param name="sender">The object that sent the request</param>
            <param name="e">Arguments passed in</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.DoPageLoad">
            <summary>
            This is the place where all the actual work is done
            Please add all new code here, and not in the main Page_Load method
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CheckForForbiddenUserAgents(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks to see if the user agent is one of the listed banned agents.
            </summary>
            <param name="userAgent">The user agent for the current request</param>
            <param name="bannedUserAgents">The list of banned agents to test against</param>
            <exception cref="T:System.Web.HttpException">This methos will throw a 403 Forbidden exception if a match is found</exception>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddServerBusy">
            <summary>
            Add to the ServerTooBusy stats
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddRequestDuration(System.Int32)">
            <summary>
            Addto the tracking of average request duration
            </summary>
            <param name="ttaken"></param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddLoggedOutRequest">
            <summary>
            Add a non SSO request to the stats
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddCacheHit">
            <summary>
            Add an XML cache hit
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddCacheMiss">
            <summary>
            Add an XML cache miss
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddRssCacheHit">
            <summary>
            Add an RSS cache hit
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddRssCacheMiss">
            <summary>
            Add an RSS cache miss
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddSsiCacheHit">
            <summary>
            Add an SSI cache hit
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddSsiCacheMiss">
            <summary>
            Add an SSI cache miss
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddHTMLCacheHit">
            <summary>
            Add an HTML cache hit
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddHTMLCacheMiss">
            <summary>
            Add an HTML cache miss
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.Page_Error(System.Object,System.EventArgs)">
            <summary>
            Called by the DnaWebPage when an exception goes off.
            Used to write the exception to the logs
            </summary>
            <param name="sender">The object that sent the request</param>
            <param name="e">Arguments passed in</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.InitialiseRequest">
            <summary>
            Initialises all the required objects needed for the current request 
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.InitialisePage">
            <summary>
            Initialises the page by setting up all the member vairables
            </summary>
            <returns>True if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.FinalisePage">
            <summary>
            Finalises the page by add required member variable XML to the page
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateViewingUser">
            <summary>
            Sets up the Viewing User component
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddComponent(BBC.Dna.IDnaComponent)">
            <summary>
            Add a component to the Page.
            </summary>
            <param name="component">The component to add to the page.</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.InsertPageComponent(BBC.Dna.Component.DnaComponent)">
            <summary>
            This is used to insert Dna Components into the current page
            </summary>
            <param name="Component">The component that you want to insert into the page</param>
            <returns>True if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateTransformer">
            <summary>
            Creates the correct transformer based on the request
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.Render(System.Web.UI.HtmlTextWriter)">
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> that receives the page content.</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.Page_Unload(System.Object,System.EventArgs)">
            <summary>
            Called by the DnaWebPage. Used to write to the logs and close any profile contections
            </summary>
            <param name="sender">The object that sent the request</param>
            <param name="e">Arguments passed in</param>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.cacheXsltLock">
            <summary>
            Used to impliment locking for the cached xslt transforms
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.GetCachedXslTransform(System.String)">
            <summary>
            Tries to find a cached transform using the xslt filename. If it doesn't find one, it creates it and caches it.
            </summary>
            <param name="xsltFileName">The name of the cache file you want to reuse</param>
            <returns>The Xsl transformer if it finds one or creates one</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateCompiledTransformWithLargeStack(System.String)">
            <summary>
            Takes the path to an XSLT stylesheet and creates a compiled transformer
            </summary>
            <param name="xsltFileName">path to the .xsl file</param>
            <returns>the XslCompiledTransform object created from the stylesheet</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.CreateCompiledTransform(System.String)">
            <summary>
            Takes the path to an XSLT stylesheet and creates a compiled transformer
            </summary>
            <param name="xsltFileName">path to the .xsl file</param>
            <returns>the XslCompiledTransform object created from the stylesheet</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.ClearTemplates">
            <summary>
            This removes the xsltransformcache item from the Cache, which in turn forces all the cached transforms to be cleared form
            the cache as well.
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.IsUserAllowed">
            <summary>
            Test whether the http authentication for this request is suitable for this page
            Some pages are not allowed for anonymous users. Some are restricted to editor only.
            Subclassed pages should change the value of _allowedUsers appropriately
            </summary>
            <returns>true if the current request has suitable authentication. False otherwise.</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.IsSecureAccessAllowed">
            <summary>
            Checks whether if the page must be accessed by secure means that it is
            </summary>
            <returns>true if the page must be accessed securely.</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.IsDnaUserAllowed">
            <summary>
            Checks whether the page is accessible by types of logged on user
            </summary>
            <returns>true if the current user is allowed to view the page. False otherwise.</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.FileCacheGetItem(System.String,System.String,System.DateTime@,System.String@)">
            <summary>
            <see cref="T:BBC.Dna.IAppContext"/>
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaBasePage.AddCookieToResponse(System.Web.HttpCookie)">
            <summary>
            Adds a cookie to the response
            </summary>
            <param name="cookie">The cookie you want to add</param>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.GetConnectionDetails">
            <summary>
            Get Profile Connection Details property. Just returns the web.config Connection Strings
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.TheSiteList">
            <summary>
            The SiteList for the app
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.AllowedURLs">
            <summary>
            Allowed URLs for the app
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.Diagnostics">
            <summary>
            All diagnostics should be written through this instance of IDnaDiagnostics
            </summary>
            <see cref="T:BBC.Dna.Utils.IDnaDiagnostics"/>
            <remarks>It's this object that implements log writing</remarks>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.MaximumRequestCount">
            <summary>
            The maximum number of concurrent requests the app allows
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.UseXSLTTransformerWithLargeStack">
            <summary>
            Use the XSLT Transformer with a large stack
            The transformer only works on IIS7 when it has a larger stack
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.CurrentServerName">
            <summary>
            <see cref="P:BBC.Dna.AppContext.CurrentServerName"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.IsRunningOnDevServer">
            <summary>
            <see cref="P:BBC.Dna.AppContext.IsRunningOnDevServer"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.SkinName">
            <summary>
            Property to get the SkinName
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.ViewingUser">
            <summary>
            Get the User object representing the viewing user.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.CurrentSite">
            <summary>
            Get the Site object representing the current site.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.IsCurrentSiteMessageboard">
            <summary>
            Gets whether the current site is a messageboard
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.UserAgent">
            <summary>
            UserAgent for this request
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.IpAddress">
            <summary>
            IP address of request as passed through from the front end server
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.BBCUid">
            <summary>
            Guid extracted from the BBC-UID cookie
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.IsSecureRequest">
            <summary>
            Is secure request has IDENTITY-HTTPS cookie
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.Writer">
            <summary>
            Gets the TextWriter output is written to.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.DebugSkinFile">
            <summary>
            Debug property that holds the debug skin filename which is set via the d_skinfile URL param
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.Cookies">
            <summary>
            Gets the cookie collection for the response
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.Request">
            <summary>
            Gets the DNA Wrapped Request object
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.Response">
            <summary>
            Gets the DNA Wrapped Response object
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.Server">
            <summary>
            Gets the DNA Wrapped Server object
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.SkinSelector">
            <summary>
            giving access to skinselector object
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.CurrentDnaRequest">
            <summary>
            The current dna request object
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.WholePageBaseXmlNode">
            <summary>
            Gets the root XmlNode for the current web page
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.BannedUserAgents">
            <summary>
            List for holding all the banned user agent names, or parts of.
            e.g. BingBot.htm or 'http://www.bing.com/bingbot.htm' or www.bing.com
            The more info, the more specific banning can be done.
            The list of banned agents is taken from the config file as a '|' seperated list
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.UseDotNetRendering">
            <summary>
            Property indicating whether we should use .NET rendering of the aspx page.
            True if we should (overriding the transformation step
            False if we should use the XSLT transform mechanism
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.PageType">
            <summary>
            Get the string representing the page type.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.GetCurrentSignInObject">
            <summary>
            Get the current Signin object for this request. This could be either ProfileAPI or Identity web service
            depending on the sign in method for the site
            </summary>
            <returns>The current sign on object for the request</returns>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.PageData">
            <summary>
            The WholePage object containing the XML data as constructed
            Useful for a .NET rendered page
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaBasePage.IsRequestAnonymous">
            <summary>
            Set this property to true if this request should not check for an SSO cookie and verify the user's identity
            This mode is used for RSS requests (requests where the skin = xml) but might be used in other scenarios.
            When this flag is set to true (and it must be set prior to the full initialisation of the page otherwise the
            default false will be used, and the user will be verified) the ViewingUser object will always show UserLoggedIn == false;
            </summary>
        </member>
        <member name="T:BBC.Dna.Page.DnaBasePage.UserTypes">
            <summary>
            Enum representing the possible categories of user we might get
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Any">
            <summary>
            Any user allowed, including anonymous users
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Authenticated">
            <summary>
            Any authenticated user (no anonymous users)
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Tester">
            <summary>
            Tester
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Volunteer">
            <summary>
            A member of one of the volunteer groups
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Moderator">
            <summary>
            A moderator
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Editor">
            <summary>
            Editor (or host)
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.Administrator">
            <summary>
            Machine administrator
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.EditorAndAbove">
            <summary>
            All allowed admins
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.ModeratorAndAbove">
            <summary>
            Moderator, Editor and Administrator are allowed
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaBasePage.UserTypes.VolunteerAndAbove">
            <summary>
            Allow all users who are volunteers, moderators, editors and administrators
            </summary>
        </member>
        <member name="T:BBC.Dna.Page.DnaBasePage.TransformerLargeStack">
            <summary>
            A private class used to load XSLT files on another thread with a large stack
            Implemented to get around the reduced stack size in IIS 7
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.CommentForumList">
            <summary>
            Comment CommentBoxForum List - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentForumList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the CommentForumList component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.CommentForumList.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentForumList.TryUpdateCommentForum">
            <summary>
            Method called to update the statuses of any of the comment forums. 
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.CommentForumList.TryGetCommentForumList">
            <summary>
            Method called to try and get the comment forum list. 
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.DnaFormComponent">
            <summary>
            Derive from this class if your component is going to use the Dna Template Form system
            It holds base functionality that the template system requires to generate it's templates.
            </summary>
        </member>
        <member name="T:BBC.Dna.IDnaFormComponent">
            <summary>
            This is the interface for components that require the new dna form templates
            ( New version of the Multistep C++ )
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaFormComponent.GetRequiredFormFields">
            <summary>
            The get property that returns the required form fields for a builder
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.DnaFormComponent.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The context that the component is to run in.</param>
        </member>
        <member name="P:BBC.Dna.Component.DnaFormComponent.GetRequiredFormFields">
            <summary>
            Derived components must declare what are it's required form fields.
            Add the fields in this method.
            </summary>
        </member>
        <member name="T:BBC.Dna.DnaEmailException">
            <summary>
            Exception for failure to send email.
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaEmailException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="sender"></param>
            <param name="recipient"></param>
            <param name="ccAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="P:BBC.Dna.DnaEmailException.Recipient">
            <summary>
            Return to address
            </summary>
        </member>
        <member name="P:BBC.Dna.DnaEmailException.Sender">
            <summary>
            Return Sender
            </summary>
        </member>
        <member name="P:BBC.Dna.DnaEmailException.Body">
            <summary>
            Return Email Body
            </summary>
        </member>
        <member name="P:BBC.Dna.DnaEmailException.Subject">
            <summary>
            Return Email Subject
            </summary>
        </member>
        <member name="P:BBC.Dna.DnaEmailException.CCAddress">
            <summary>
            The Carbon Copy 
            </summary>
        </member>
        <member name="T:BBC.Dna.DnaMessage">
            <summary>
            Class for Sending Emails and System Messages.
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaMessage.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaMessage.SendEmailOrSystemMessage(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="recipientId"></param>
            <param name="recipient"></param>
            <param name="sender"></param>
            <param name="ccAddress"></param>
            <param name="siteId"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <exception>DnaEmailException</exception>
        </member>
        <member name="M:BBC.Dna.DnaMessage.SendEmailViaDatabase(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Email queued in the database
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sender"></param>
            <param name="recipient"></param>
            <param name="ccAddress"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:BBC.Dna.DnaMessage.SendEmail(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends Email.
            Uses smtp server configuration from Web.Config.
            This will be deprecated soon
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sender"></param>
            <param name="recipient"></param>
            <param name="ccAddress"></param>
            <param name="siteId"></param>
            <exception cref="T:BBC.Dna.DnaEmailException">If there is an error sending email.</exception>
        </member>
        <member name="M:BBC.Dna.DnaMessage.SendSystemMessage(System.Int32,System.Int32,System.String)">
            <summary>
            Sends a System Message.
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaMessage.AddLineBreaks(System.String)">
            <summary>
            Method to add line breaks to email body.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:BBC.Dna.Page.DnaWebPage">
            <summary>
            The new DNA web page. All pages are derived from this class
            </summary>
        </member>
        <member name="T:BBC.Dna.IDnaWebPage">
            <summary>
            The dna WebPage Interface. Impliments all calls needed by DNA from the System.Web.UI.Page.
            </summary>
        </member>
        <member name="M:BBC.Dna.IDnaWebPage.OnPageLoad">
            <summary>
            The OnPageload method
            </summary>
        </member>
        <member name="M:BBC.Dna.IDnaWebPage.IsHtmlCachingEnabled">
            <summary>
            The IsHtmlCachingEnabled mthod
            </summary>
            <returns>True if enabled, false if not</returns>
        </member>
        <member name="M:BBC.Dna.IDnaWebPage.GetHtmlCachingTime">
            <summary>
            The GetHtmlCachingTime method
            </summary>
            <returns>The length of time that html is to be cached for (In seconds)</returns>
        </member>
        <member name="M:BBC.Dna.IDnaWebPage.DotNetRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            The dotnetrender method
            </summary>
            <param name="writer">The writer in which to render</param>
        </member>
        <member name="M:BBC.Dna.IDnaWebPage.OnPostProcessRequest">
            <summary>
            Used to do any post processing of the request
            </summary>
        </member>
        <member name="M:BBC.Dna.IDnaWebPage.UpdateDataSourceControls">
            <summary>
            Used to update any xml data source controls
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.Request">
            <summary>
            The Request object property
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.Response">
            <summary>
            The Response object property
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.Server">
            <summary>
            The Server object property
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.PageType">
            <summary>
            The Page Type property
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.Timestamp">
            <summary>
            The TimeStamp property
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.AllowedUsers">
            <summary>
            The Allowed Users property
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.IncludeTopFives">
            <summary>
            Defaultly includes the topfives in the current page. Override this to stop the inclusion.
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.DnaXmlDataSourceContolIDs">
            <summary>
            Used to add the controls that require the final whlepage xml to be their data source
            </summary>
        </member>
        <member name="P:BBC.Dna.IDnaWebPage.MustBeSecure">
            <summary>
            The Must Be Secure property
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.#ctor">
            <summary>
            The DnaWebPage constructor
            Creates a new DnaBasePage for the web page
            </summary>
        </member>
        <member name="F:BBC.Dna.Page.DnaWebPage._basePage">
            <summary>
            The DnaBasePage object. This handles all the work needed to complete the request
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.Render(System.Web.UI.HtmlTextWriter)">
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> that receives the page content.</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.DotNetRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            This method is called from the DnaBasePage, and basically gets this page to render itself.
            </summary>
            <param name="writer">The writer in which to render</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Called by ASP.NET when the page is called
            </summary>
            <param name="sender">The object that sent the request</param>
            <param name="e">Arguments passed in</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.Page_Unload(System.Object,System.EventArgs)">
            <summary>
            Called by ASP.NET at the end of the request
            </summary>
            <param name="sender">The object that sent the request</param>
            <param name="e">Arguments passed in</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.Page_Error(System.Object,System.EventArgs)">
            <summary>
            Called by ASP.NET when it recieves an unhandled exception
            </summary>
            <param name="sender">The object that sent the request</param>
            <param name="e">Arguments passed in</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.OnPageLoad">
            <summary>
            Base function that gets overriden by the different DNA Pages.
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.UpdateDataSourceControls">
            <summary>
            Used to update any xml data source controls after the page components have finished processing the request
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.OnPostProcessRequest">
            <summary>
            Called after the components have processed the request.
            Override this if you need to do any post process request actions.
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.AddComponent(BBC.Dna.IDnaComponent)">
            <summary>
            Adds a component to base page
            </summary>
            <param name="component">The component that you want to add to the base page</param>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.IsHtmlCachingEnabled">
            <summary>
            Used to see if htlm caching has been enabled or not
            </summary>
            <returns>True if enables, fasle if not</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.GetHtmlCachingTime">
            <summary>
            Used to get the length of time html is cached for
            </summary>
            <returns>The length of time in seconds</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.GetSiteOptionValueInt(System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueInt(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.GetSiteOptionValueBool(System.String,System.String)">
            <summary>
            <see cref="M:BBC.Dna.AppContext.GetSiteOptionValueBool(System.Int32,System.String,System.String)"/>
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.IsDnaUserAllowed">
            <summary>
            Used to see if the user is allowed to vview the requested page
            </summary>
            <returns>True if allowed, fasle if not</returns>
        </member>
        <member name="M:BBC.Dna.Page.DnaWebPage.GetSite(System.String)">
            <summary>
            Gets the ISite object representing the give site
            </summary>
            <param name="siteName">Name of the site</param>
            <returns>An ISite object, or null if not found</returns>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.PageType">
            <summary>
            Get the string representing the page type.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.DnaXmlDataSourceContolIDs">
            <summary>
            Get property for getting the list of control ids that require the whole page xml to be
            set as there data source.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.AllowedUsers">
            <summary>
            Gets the allowed user for the current page. Can be overriden by derived pages
            The default is to allow all users.
            </summary>
            <seealso cref="T:BBC.Dna.Page.DnaBasePage.UserTypes"/>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.MustBeSecure">
            <summary>Gets whether the page must be accessed securely. Can be overriden by derived pages
            The default is to allow all requests (ie not secure).
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.IncludeTopFives">
            <summary>
            Defaultly includes the topfives in the current page. Override this to stop the inclusion.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.Request">
            <summary>
            Gets the DNA wrapped Request object
            If it does not exist, it will create it on demand
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.Response">
            <summary>
            Gets the DNA wrapped Response object
            If it does not exist, it will create it on demand
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.Server">
            <summary>
            Gets the DNA wrapped Server object
            If it does not exist, it will create it on demand
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.Timestamp">
            <summary>
            Gets the timestamp for the request
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.UseDotNetRendering">
            <summary>
            Property indicating whether we should use .NET rendering of the aspx page.
            True if we should (overriding the transformation step
            False if we should use the XSLT transform mechanism
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.SetDnaXmlDataSource">
            <summary>
            Property to state whether or not to set the data for the DnaXmlDataSource control in a page
            to that of the Outer Text of the DnaWebPage XML
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.ViewingUser">
            <summary>
            Get the User object representing the viewing user.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.CurrentSite">
            <summary>
            Get the Site object representing the current site.
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaWebPage.DnaWebPageXml">
            <summary>
            Gets the root node of the current dna page
            </summary>
        </member>
        <member name="T:BBC.Dna.Page.DnaXmlSourceDetails">
            <summary>
            Setup class for adding aspx control ids and xpath info to the DnaXmlDataSource controls list
            </summary>
        </member>
        <member name="M:BBC.Dna.Page.DnaXmlSourceDetails.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="controlID">The id of the control you want the whole page XML to be it's data source</param>
            <param name="xpath">The XPath to the particular part of the tree you want to source from. If left blank, then it uses the root</param>
        </member>
        <member name="P:BBC.Dna.Page.DnaXmlSourceDetails.ControlID">
            <summary>
            Get property for the control id
            </summary>
        </member>
        <member name="P:BBC.Dna.Page.DnaXmlSourceDetails.XPath">
            <summary>
            Get property for the XPath location
            </summary>
        </member>
        <member name="T:BBC.Dna.ForumPost">
            <summary>
            Class to build xml for a forum post
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumPost.AddPostXml(BBC.Dna.Data.IDnaDataReader,BBC.Dna.Component.DnaComponent,System.Xml.XmlNode,BBC.Dna.IInputContext)">
            <summary>
            Method to generate POST XML and add to a parent node 
            </summary>
            <param name="reader">DataReader result of stored procedure returning forum post data.</param>
            <param name="component">DnaComponent to add posts to.</param>
            <param name="parentNode">Parent Node to xml the generated xml to.</param>
            <param name="context">The Input Context</param>
        </member>
        <member name="M:BBC.Dna.ForumPost.AddCommentXml(BBC.Dna.Api.CommentForum,BBC.Dna.Api.CommentInfo,BBC.Dna.Component.DnaComponent,System.Xml.XmlNode,BBC.Dna.IInputContext,System.Int32)">
            <summary>
            Generates post xml for a comment forum and comment
            </summary>
            <param name="forum"></param>
            <param name="comment"></param>
            <param name="component"></param>
            <param name="parentNode"></param>
            <param name="context"></param>
            <param name="postIndex"></param>
        </member>
        <member name="M:BBC.Dna.ForumPost.AddPostXmlInternal(BBC.Dna.Component.DnaComponent,System.Xml.XmlNode,BBC.Dna.IInputContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Internal actually generates the xml
            </summary>
            <param name="component"></param>
            <param name="parentNode"></param>
            <param name="context"></param>
            <param name="hidden"></param>
            <param name="inReplyTo"></param>
            <param name="prevSibling"></param>
            <param name="nextSibling"></param>
            <param name="firstChild"></param>
            <param name="userID"></param>
            <param name="subject"></param>
            <param name="datePosted"></param>
            <param name="bodyText"></param>
            <param name="hostPageUrl"></param>
            <param name="commentForumTitle"></param>
            <param name="entryId"></param>
            <param name="threadId"></param>
            <param name="postIndex"></param>
            <param name="canRead"></param>
            <param name="canWrite"></param>
            <param name="userNode"></param>
        </member>
        <member name="T:BBC.Dna.IAllowedURLs">
            <summary>
            Interface for the allowed URLs (white list)
            </summary>
        </member>
        <member name="M:BBC.Dna.IAllowedURLs.DoesAllowedURLListContain(System.Int32,System.String)">
            <summary>
            Checks if the allowed url lists contains the string to check
            </summary>
            <param name="siteID">The site in question</param>
            <param name="stringToCheck">The string to check</param>
            <returns>true if it finds it</returns>
        </member>
        <member name="M:BBC.Dna.IAllowedURLs.GetAllowedURLList(System.Int32)">
            <summary>
            Gets the Allowed URL list for a given site
            </summary>
            <param name="siteID">The site in question</param>
            <returns>The list of Allowed URLS for a Site</returns>
        </member>
        <member name="M:BBC.Dna.IAllowedURLs.LoadAllowedURLLists(BBC.Dna.IAppContext)">
            <summary>
            Called to Load all the Sites lists of allowed URLs
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:BBC.Dna.ArticleModeration">
            <summary>
            Article moderation class
            </summary>
        </member>
        <member name="M:BBC.Dna.ArticleModeration.#ctor(BBC.Dna.IAppContext)">
            <summary>
            Default Article moderation constructor
            </summary>
            <param name="appContext">An app context so that the class can use stored procedures</param>
        </member>
        <member name="M:BBC.Dna.ArticleModeration.ModerateArticle(BBC.Dna.IUser,BBC.Dna.Sites.ISite,System.Int32,System.Boolean)">
            <summary>
            Checks to see if the article needs to be placed in the moderation system
            </summary>
            <param name="articleOwner">The user who owns the article.</param>
            <param name="site">The site that the article was created in</param>
            <param name="h2g2ID">The h2g2id of the article you want to moderate</param>
            <param name="profanitiesFound">A flag that states whether or not a profanity was found</param>
            <returns>True if the article was placed in the moderation queue, False if not</returns>
        </member>
        <member name="M:BBC.Dna.ArticleModeration.IsArticleModerated(System.Int32)">
            <summary>
            Checks to see if the article is currently moderated
            </summary>
            <param name="h2g2ID">The h2g2ID of the article you want to check against</param>
            <returns>True if the article is in pre/post moderated or we failed to find the status,
            False if the article is unmoderated</returns>
        </member>
        <member name="M:BBC.Dna.ArticleModeration.GetArticleModerationStatus(System.Int32)">
            <summary>
            Gets the current moderation status for a given article
            </summary>
            <param name="h2g2ID">The h2g2 id of the article you want to check against</param>
        </member>
        <member name="T:BBC.Dna.ArticleModeration.ArticleModerationStatus">
            <summary>
            The various moderation statuses
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ArticleModerationStatus.UnDefined">
            <summary>
            Undefined moderation status
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ArticleModerationStatus.UnModerated">
            <summary>
            Unmoderated status
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ArticleModerationStatus.PostModerated">
            <summary>
            Post moderated status
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ArticleModerationStatus.PreModerated">
            <summary>
            Pre moderated status
            </summary>
        </member>
        <member name="T:BBC.Dna.ArticleModeration.ModerationTriggers">
            <summary>
            The various moderation triggers
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ModerationTriggers.ByNoUser">
            <summary>
            Triggered by unknown user
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ModerationTriggers.Profanities">
            <summary>
            Triggered by profanities
            </summary>
        </member>
        <member name="F:BBC.Dna.ArticleModeration.ModerationTriggers.Automatic">
            <summary>
            Triggered by automatic
            </summary>
        </member>
        <member name="T:BBC.Dna.MediaAssetParameters">
            <summary>
            Class to store all Article Search parameters
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.MediaAssetID">
            <summary>
            Accessor for MediaAssetID
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.Action">
            <summary>
            Accessor for Action
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.IsOwner">
            <summary>
            Accessor for IsOwner
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.Skip">
            <summary>
            Accessor for Skip
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.Show">
            <summary>
            Accessor for Show
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.SortBy">
            <summary>
            Accessor for SortBy
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.H2G2ID">
            <summary>
            Accessor for H2G2ID
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.UserID">
            <summary>
            Accessor for UserID
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.ContentType">
            <summary>
            Accessor for ContentType
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.AddToLibrary">
            <summary>
            Accessor for AddToLibrary
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.UpdateDataLoaded">
            <summary>
            Accessor for UpdateDataLoaded
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.IsExternalLink">
            <summary>
            Accessor for IsExternalLink
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.IsManualUpload">
            <summary>
            Accessor for IsManualUpload
            </summary>
        </member>
        <member name="P:BBC.Dna.MediaAssetParameters.Rpmaid">
            <summary>
            Accessor for Rpmaid
            </summary>
        </member>
        <member name="T:BBC.Dna.MediaAssetParameters.MediaAssetAction">
            <summary>
            Enumerates the types of action allowed
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.create">
            <summary>
            action = create
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.update">
            <summary>
            action = update
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.view">
            <summary>
            action = view
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.showusersassets">
            <summary>
            action = showusersassets
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.showusersarticleswithassets">
            <summary>
            action = showusersarticleswithassets
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.showftpuploadqueue">
            <summary>
            action = showftpuploadqueue
            </summary>
        </member>
        <member name="F:BBC.Dna.MediaAssetParameters.MediaAssetAction.reprocessfaileduploads">
            <summary>
            action = reprocessfaileduploads
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ModStatsPerTopic">
            <summary>
            Simple class to hold ModStatsPerTopic
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.ForumID">
            <summary>
            Accessor for ForumID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.UserID">
            <summary>
            Accessor for UserID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.NumFail">
            <summary>
            Accessor for NumFail
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.NumPass">
            <summary>
            Accessor for NumPass
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.NumRefer">
            <summary>
            Accessor for NumRefer
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.TopicTitle">
            <summary>
            Accessor for TopicTitle
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.UserName">
            <summary>
            Accessor for UserName
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsPerTopic.Email">
            <summary>
            Accessor for Email
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ModStatsTopicTotals">
            <summary>
            Simple class to hold ModStatsTopicTotals
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.ForumID">
            <summary>
            Accessor for ForumID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.TopicTitle">
            <summary>
            Accessor for TopicTitle
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.NumFail">
            <summary>
            Accessor for NumFail
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.NumPass">
            <summary>
            Accessor for NumPass
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.NumRefer">
            <summary>
            Accessor for NumRefer
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.NumComplaints">
            <summary>
            Accessor for NumComplaints
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ModStatsTopicTotals.Total">
            <summary>
            Accessor for Total
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.HostsPostsPerTopic">
            <summary>
            Simple class to hold HostsPostsPerTopic
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.HostsPostsPerTopic.ForumID">
            <summary>
            Accessor for ForumID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.HostsPostsPerTopic.UserID">
            <summary>
            Accessor for UserID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.HostsPostsPerTopic.TotalPosts">
            <summary>
            Accessor for TotalPosts
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.HostsPostsPerTopic.TopicTitle">
            <summary>
            Accessor for TopicTitle
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.HostsPostsPerTopic.UserName">
            <summary>
            Accessor for UserName
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.HostsPostsPerTopic.Email">
            <summary>
            Accessor for Email
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.MessageBoardStatistics">
            <summary>
            Summary of the MessageBoardStatistics Page object, holds the MessageBoardStatistics for a date and site
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MessageBoardStatistics component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.TryCreateMessageBoardStatisticsXML(System.DateTime)">
            <summary>
            Functions generates the Create MessageBoard Statistics XML
            </summary>
            <param name="entryDate">Entry Date</param>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.SendMessageBoardStatsEmail(System.DateTime,System.String,System.String)">
            <summary>
            Sends the MessageBoard Statistics email
            </summary>
            <param name="entryDate">The date for the stats</param>
            <param name="emailFrom">From email address</param>
            <param name="emailTo">To email address</param>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.TryGetPageParams(System.DateTime@,System.String@,System.String@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="entryDate">Entry Date</param>
            <param name="emailFrom">Email from entry</param>
            <param name="emailTo">Email to entry</param>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.ParseDateParams(System.String,System.String,System.DateTime@,System.DateTime@)">
            <summary>
            Parses and prepares date range params for UserStatistics.
            </summary>
            <param name="startDateText">Start date</param>
            <param name="endDateText">End date</param>
            <param name="startDate">Parsed start date</param>
            <param name="endDate">Parsed end date</param>
            <returns><see cref="T:BBC.Dna.Utils.DateRangeValidation.ValidationResult"/></returns>
            <remarks>If no endDateText is passed in then endDate is set to startDate + 1 day.</remarks>
        </member>
        <member name="M:BBC.Dna.Component.MessageBoardStatistics.ParseDate(System.String,System.DateTime@)">
            <summary>
            Parses and prepares a date param.
            </summary>
            <param name="entryDateText">the date</param>
            <param name="entryDate">Parsed date</param>
            <returns><see cref="T:BBC.Dna.Utils.DateRangeValidation.ValidationResult"/></returns>
        </member>
        <member name="T:BBC.Dna.Component.ModerationClasses">
            <summary>
            Class for generating User Moderation Classes XML.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationClasses.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationClasses.ProcessRequest">
            <summary>
            Produce User Moderation User Statuses XML from database.
            Caching the XML would be a good idea before this is included on lots of moderation pages.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ModerationMemberDetails">
            <summary>
            Summary of the More User Subscriptions Page object, holds the list of User Subscriptions of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ModerationMemberDetails.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreLinks component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ModerationMemberDetails.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.MonthSummary">
            <summary>
            Summary of the MonthSummary Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MonthSummary.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MonthSummary component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MonthSummary.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MonthSummary.TryCreateMonthSummaryXML">
            <summary>
            Functions generates the TryCreateMonthSummaryXML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MonthSummary.CacheGetTimeOfMostRecentGuideEntry">
            <summary>
            Gets the time of last posted entry
            </summary>
            <returns>Time of last posted entry</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoreJournal">
            <summary>
            Summary of the MoreJournal Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreJournal.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreJournal component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreJournal.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreJournal.TryCreateMoreJournalXML(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements generating the XML for the More Journal page
            </summary>
            <param name="journalID">Journal ID of the page to return</param>
            <param name="userID">User ID of the page to return</param>
            <param name="skip">Number of articles to skip</param>
            <param name="show">Number of articles to show</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreJournal.AddJournalGetTitle(System.Xml.XmlElement)">
            <summary>
            Adds in the ForumTitle XML to the given parent (the H2G2 node)
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:BBC.Dna.Component.MoreJournal.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Implements getting the params for the page
            </summary>
            <param name="journalID">Journal ID of the page to return</param>
            <param name="userID">User ID of the page to return</param>
            <param name="skip">Number of articles to skip</param>
            <param name="show">Number of articles to show</param>
        </member>
        <member name="T:BBC.Dna.Component.MorePages">
            <summary>
            Summary of the MorePages Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MorePages.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MorePages component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MorePages.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MorePages.TryCreateMorePagesXML(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements generating the XML for the More Pages page
            </summary>
            <param name="skip">Number of articles to skip</param>
            <param name="show">Number of articles to show</param>
            <param name="userID">User ID of the page to return</param>
            <param name="type">type is either 1 (approved) 2 (normal) 3 (cancelled) or 4 (normal and approved)</param>
            <param name="guideType">See if we've been given a specified article type to search for</param>
        </member>
        <member name="M:BBC.Dna.Component.MorePages.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Implements getting the params for the page
            </summary>
            <param name="skip">Number of posts to skip</param>
            <param name="show">Number of posts to show</param>
            <param name="userID">User ID of the page to return</param>
            <param name="type">type is either 1 (approved) 2 (normal) 3 (cancelled) or 4 (normal and approved)</param>
            <param name="guideType">See if we've been given a specified article type to search for</param>
        </member>
        <member name="P:BBC.Dna.Component.MorePages.PageOwnerElement">
            <summary>
            Generated Page Owner Element
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.MorePosts">
            <summary>
            Summary of the MorePosts object, holds the list of posts for a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MorePosts.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MorePosts component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MorePosts.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MorePosts.TryCreateMorePosts">
            <summary>
            Method called to try to create the TryCreateMorePosts xml, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <returns>Whether the search has suceeded with out error</returns>
        </member>
        <member name="M:BBC.Dna.Component.MorePosts.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Gets the params for the page
            </summary>
            
        </member>
        <member name="M:BBC.Dna.Component.MorePosts.GenerateMorePostsPageXml(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calls the post list class to generate the most recent posts
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MorePosts.GetMorePostsCachedXml(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the XML from cache
            </summary>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoreRoutes">
            <summary>
            Summary of the More Routes Page object, holds the list of User Subscriptions of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreRoutes.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreRoutes component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreRoutes.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreRoutes.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="userID">The user of the routes to get</param>
            <param name="skip">number of routes to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the routes.</param>
            <param name="routeID">ID of the route for the action.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreRoutes.TryUpdateRoute(System.String,System.Int32,System.Int32)">
            <summary>
            Method called to delete the routes. 
            </summary>
            <param name="action">The action to apply to the routes.</param>
            <param name="userID">The user of the routes to get</param>
            <param name="routeID">ID of the route for the action.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreRoutes.TryCreateMoreRoutesXML(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method called to try to create the TryCreateMoreRoutes XML from the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <param name="userID">The user of the routes to get</param>
            <param name="skip">number of routes to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the routes.</param>
            <param name="routeID">ID of the route for the action.</param>
            <returns>Whether the search has suceeded with out error.</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoreRoutes.GenerateMoreRoutesPageXml(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Calls the RoutesList class to generate the most recent Routes
            </summary>
            <param name="userID">The user of the routes to get</param>
            <param name="skip">number of routes to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the route.</param>
            <param name="routeID">ID of the route for the action.</param>
        </member>
        <member name="T:BBC.Dna.AllowedURLs">
            <summary>
            Class for the allowed URLs (white list)
            </summary>
        </member>
        <member name="M:BBC.Dna.AllowedURLs.LoadAllowedURLLists(BBC.Dna.IAppContext)">
            <summary>
            Allowed URL List Class
            </summary>
            <param name="context">The context</param>
        </member>
        <member name="M:BBC.Dna.AllowedURLs.GetAllowedURLList(System.Int32)">
            <summary>
            Gets the list of allowed urls for a particular site
            </summary>
            <param name="siteID">The site of the list required</param>
            <returns>List of allowed URLs</returns>
        </member>
        <member name="M:BBC.Dna.AllowedURLs.DoesAllowedURLListContain(System.Int32,System.String)">
            <summary>
            Function to check the given sites allowed URL List for a particular string
            </summary>
            <param name="siteID">The site in question</param>
            <param name="stringToCheck">String to check</param>
            <returns>True if the value contains the string in the list</returns>
        </member>
        <member name="T:BBC.Dna.NamespacePhrases">
            <summary>
            The namespace phrases class
            </summary>
        </member>
        <member name="M:BBC.Dna.NamespacePhrases.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The input context so the class can access the site options</param>
        </member>
        <member name="M:BBC.Dna.NamespacePhrases.ParseTokenizedPhrases(System.Collections.Generic.List{BBC.Dna.TokenizedNamespacedPhrases})">
            <summary>
            This method parses a list of key value pair phrases and namespaces into a list of phrases
            </summary>
            <param name="phraseAndNamespaces">A list of namespaces phrases to parse. The Key = namespace, Value = tokenizedphrases</param>
            <returns>The list of phrases parsed from the key value pairs.</returns>
        </member>
        <member name="M:BBC.Dna.NamespacePhrases.AddNameSpacePhrasesToArticle(System.Collections.Generic.List{BBC.Dna.TokenizedNamespacedPhrases},System.Int32)">
            <summary>
            Adds the given namespaced keyphrases to an article
            </summary>
            <param name="phraseAndNamespaces">A list of namespaced phrases to parse. The Key = namespace, Value = tokenizedphrases</param>
            <param name="h2g2ID">The h2g2id of the article you want add the phrases to</param>
        </member>
        <member name="M:BBC.Dna.NamespacePhrases.GetSiteDelimiterToken(BBC.Dna.IInputContext)">
            <summary>
            Gets the sites delimiting token for the current site
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.PostJournal">
            <summary>
            Summary of the PostJournal Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PostJournal.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the PostJournal component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.PostJournal.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PostJournal.TryCreatePostJournalXML(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the TryCreatePostJournal XML
            </summary>
            <param name="body"></param>
            <param name="subject"></param>
            <param name="preview"></param>
            <param name="post"></param>
            <param name="postStyle"></param>
            <param name="profanityTriggered"></param>
            <param name="nonAllowedURLsTriggered"></param>
            <param name="emailAddressTriggered"></param>
        </member>
        <member name="M:BBC.Dna.Component.PostJournal.TryGetPageParams(System.String@,System.String@,System.Boolean@,System.Boolean@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="body"></param>
            <param name="subject"></param>
            <param name="preview"></param>
            <param name="post"></param>
            <param name="postStyle"></param>
            <param name="profanityTriggered"></param>
            <param name="nonAllowedURLsTriggered"></param>
            <param name="emailAddressTriggered"></param>
        </member>
        <member name="M:BBC.Dna.Component.PostList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the PostList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PostList.CreateRecentPostsList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the Recent Posts List
            </summary>
            <param name="userID">The user of the posts to get</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <param name="postType">Type of posts to look for</param>
            <param name="siteID">Site of the posts</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.PostList.RemovePrivatePosts(System.Boolean)">
            <summary>
            Removes the Private posts from the list
            </summary>
            <param name="showPrivate">Whether to show the private posts</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.PostList.MarkAllRead(System.Int32)">
            <summary>
            Marks all the posts as read
            </summary>
            <param name="userID">The user id</param>
        </member>
        <member name="M:BBC.Dna.Component.PostList.GetUsersMostRecentPosts(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Does the correct call to the database to get the most recent posts
            </summary>
            <param name="userID">The user id to look for</param>
            <param name="skip"></param>
            <param name="show"></param>
            <param name="postType">The types of posts</param>
            <param name="siteId"></param>
            <param name="showUserHidden"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.RecentCommentForumPostsBuilder">
            <summary>
            Class to build top 5 recent posts to comment forums (i.e. Blogs)
            </summary>
        </member>
        <member name="M:BBC.Dna.RecentCommentForumPostsBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            RecentCommentForumPostsBuilder constructor
            </summary>
            <param name="context">The input context</param>
        </member>
        <member name="M:BBC.Dna.RecentCommentForumPostsBuilder.TryGetRecentCommentForumPosts">
            <summary>
            Try and get the recent comment forum posts.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.RecentSearch">
            <summary>
            Creates recent Search XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RecentSearch.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of RecentSearch
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.RecentSearch.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RecentSearch.GetRecentSearchFromCache">
            <summary>
            Checks and returns RecentSearch XML from cache
            </summary>
            <returns>Whether cache available and used</returns>
        </member>
        <member name="M:BBC.Dna.Component.RecentSearch.AddSearchTerm(System.String,BBC.Dna.Component.RecentSearch.SEARCHTYPE)">
            <summary>
            Adds a new search term to the database
            </summary>
            <param name="search">Search term</param>
            <param name="type">Type of search</param>
            <returns>true on success</returns>
        </member>
        <member name="T:BBC.Dna.Component.RecentSearch.SEARCHTYPE">
            <summary>
            List of valid search types
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.RecentSearch.SEARCHTYPE.ARTICLE">
            <summary>
            Search type article
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.RecentSearch.SEARCHTYPE.FORUM">
            <summary>
            Search type FORUM - 1
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.RecentSearch.SEARCHTYPE.USER">
            <summary>
            Search type USER - 2
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.RecentSearch.SEARCHTYPE.HIERARCHY">
            <summary>
            Search type HIERARCHY - 3
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.RecentSearch.SEARCHTYPE.KEYPHRASE">
            <summary>
            Search type KEYPHRASE 
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.RefereeList">
            <summary>
            Class to store the RefereeList Details
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RefereeList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the RefereeList component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.RefereeList.ProcessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RefereeList.FetchTheList">
            <summary>
            Fetches the list
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ReservedArticles">
            <summary>
            Summary of the ReservedArticles Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReservedArticles.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ReservedArticles component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ReservedArticles.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReservedArticles.TryCreateReservedArticlesXML">
            <summary>
            Functions generates the Try Create Reserved Articles XML
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ReviewForumBuilder">
            <summary>
            Summary of the ReviewForumBuilder Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForumBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ReviewForumBuilder component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForumBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForumBuilder.TryCreateReviewForumBuilderXML(System.Int32,System.Int32,System.Int32,BBC.Dna.Component.ReviewForum.OrderBy,System.Boolean,System.Boolean)">
            <summary>
            Functions generates the Try Create Review Forum Builder XML
            </summary>
            <param name="ID">ID of the review forum to get</param>
            <param name="skip">Number to skip</param>
            <param name="show">Number to show</param>
            <param name="orderBy">Ordering of the review forum</param>
            <param name="direction">Direction of ordering </param>
            <param name="entry">Whether we need to add a description at the top</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForumBuilder.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,BBC.Dna.Component.ReviewForum.OrderBy@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="ID">ID of the review forum to get</param>
            <param name="skip">Number to skip</param>
            <param name="show">Number to show</param>
            <param name="orderBy">Ordering of the review forum</param>
            <param name="direction">Direction of ordering </param>
            <param name="entry">Whether we need to add a description at the top</param>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForumBuilder.GuideEntryElement">
            <summary>
            Gets the Guide Entry Entry Element
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ReviewSubmissionForum">
            <summary>
            Class to store the ReviewSubmissionForum Details
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ReviewSubmissionForum component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.RequestSubmitArticle(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Given the id, generates an xmlobject that contains information
            	about valid forums that it can go into.
            </summary>
            <param name="H2G2ID">Id of article that we want to submit</param>
            <param name="siteID">SiteID that it came from</param>
            <param name="submitterComments">text that is in the form - leave empty if no text</param>
            <param name="selectedReviewForumID">the reviewForum that should be selected</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.SubmitArticle(BBC.Dna.IUser,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Submits an article to a review forum
            </summary>
            <param name="user"></param>
            <param name="H2G2ID"></param>
            <param name="siteID"></param>
            <param name="response"></param>
            <param name="reviewForumID"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.SubmittedWithEmptyComments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the form and adds the no comment error message
            </summary>
            <param name="H2G2ID"></param>
            <param name="siteID"></param>
            <param name="reviewForumID"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.RemoveThreadFromForum(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Remove the thread from the Forum
            </summary>
            <param name="userID"></param>
            <param name="rFID"></param>
            <param name="H2G2ID"></param>
            <param name="threadID"></param>
            <param name="forumID"></param>
            <param name="hasPermission"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.AddGracefulErrorXml(System.String,System.String,System.String,System.String)">
            <summary>
            Helper function to format Error Xml.
            </summary>
            <param name="errortype">A categorisation of error</param>
            <param name="errormessage">Error description.</param>
            <param name="linkHREF">link HREF</param>
            <param name="linkBody">link description.</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.AddGracefulErrorXml(System.String,System.String,System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Helper function to format Error Xml.
            </summary>
            <param name="errortype">A categorisation of error</param>
            <param name="errormessage">Error description.</param>
            <param name="linkHREF">link HREF</param>
            <param name="linkBody">link description.</param>
            <param name="parent">Optional node to insert error into.</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewSubmissionForum.NotifyAuthorOnPersonalSpace(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Posts a message to the editor of an article that it has been submitted to a review forum
            </summary>
            <param name="submitterID"></param>
            <param name="editorID"></param>
            <param name="userName"></param>
            <param name="H2G2ID"></param>
            <param name="siteID"></param>
            <param name="reviewForumID"></param>
            <param name="forumID"></param>
            <param name="threadID"></param>
            <param name="postID"></param>
            <param name="subject"></param>
            <param name="comments"></param>
        </member>
        <member name="T:BBC.Dna.Component.RoutesList">
            <summary>
            RoutesList.
            List of user routes/clippings/bookmarks created by the user.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RoutesList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the RoutesList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RoutesList.CreateRoutesList(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Accesses DB and creates Routes List.
            Routes created by users.
            </summary>
            <param name="userID">The user of the routes to get</param>
            <param name="siteID">Site of the routes</param>
            <param name="skip">number of routes to skip</param>
            <param name="show">number to show</param>
            <param name="showPrivate">Indicates whether private routes should be included.</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="T:BBC.Dna.Component.ScoutRecommendations">
            <summary>
            Summary of the ScoutRecommendations Page object, holds the list of ScoutRecommendations of a scout
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ScoutRecommendations.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ScoutRecommendations component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ScoutRecommendations.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ScoutRecommendations.CreateBlankForm">
            <summary>
            Creates the XML for a blank scout recommendations form.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.SignifContent">
            <summary>
            Holds the SignifContent class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SignifContent.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the SignifContent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SignifContent.GetMostSignifContent(System.Int32)">
            <summary>
            Gets site specic most significant content
            </summary>
            <param name="siteID">SiteID you want SignifContent for</param>
            <returns>Xml Element containing the most SIGNIFCONTENT</returns>
        </member>
        <member name="M:BBC.Dna.Component.SignifContent.DecrementContentSignif(System.Int32)">
            <summary>
            Decrements site's ContentSignif tables.
            </summary>
            <param name="siteID">Site to use</param>
        </member>
        <member name="T:BBC.Dna.Component.SiteManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SiteManager.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreLinks component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SiteManager.GenerateXML(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.SiteManager.UpdateSite">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.SiteManager.CreateSite(System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.SiteManager.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SiteManager.IsSiteLanguageCompatibleWithModClass(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Component.SiteSummary">
            <summary>
            Summary of the More User Subscriptions Page object, holds the list of User Subscriptions of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SiteSummary.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreLinks component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SiteSummary.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.SkinUploadServer">
            <summary>
            Summary of the MoreComment Page object, holds the list of comments for a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SkinUploadServer.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the SkinUploadServer component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SkinUploadServer.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.StatisticsReport">
            <summary>
            Summary of the StatisticsReport Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.StatisticsReport.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the StatisticsReport component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.StatisticsReport.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.StatisticsReport.TryCreateStatisticsReportXML(System.Int32,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Functions generates the StatisticsReport XML
            </summary>
            <param name="skip">Number of posts to skip</param>
            <param name="show">Number of posts to show</param>
            <param name="entryDate">entry Date</param>
            <param name="interval">Report interval</param>
        </member>
        <member name="M:BBC.Dna.Component.StatisticsReport.TryGetPageParams(System.Int32@,System.Int32@,System.DateTime@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="skip">number of postings to skip</param>
            <param name="show">number to show</param>
            <param name="entryDate">Entry Date of search</param>
            <param name="interval">Interval of search</param>
        </member>
        <member name="M:BBC.Dna.Component.StatisticsReport.ParseDate(System.String,System.DateTime@)">
            <summary>
            Parses and prepares a date param.
            </summary>
            <param name="entryDateText">the date</param>
            <param name="entryDate">Parsed date</param>
            <returns><see cref="T:BBC.Dna.Utils.DateRangeValidation.ValidationResult"/></returns>
        </member>
        <member name="T:BBC.Dna.Component.SubAllocationForm">
            <summary>
            SubAllocationForm - creates form elements
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubAllocationForm
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.InsertSubEditorList">
            <summary>
            Gets the list of sub editors and their details and inserts the
            	XML representation into this form object.
            </summary>
            <returns>true for success or false for failure</returns>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.SubmitAllocation(System.Int32,System.Int32,System.String,System.Int32[])">
            <summary>
            Submits the automatic allocation of the next iNumberToAllocate entries
            	from the accepted recommendations queue to this sub editor.
            </summary>
            <param name="subID">Sub editor user id</param>
            <param name="allocatorID">Allocator User ID</param>
            <param name="comments">Any comments about entries</param>
            <param name="entryIDs">Total number allocated -returned</param>
            <returns>Whether allocations submitted successfully</returns>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.SubmitAutoAllocation(System.Int32,System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            Submits the automatic allocation of the next iNumberToAllocate entries
            	from the accepted recommendations queue to this sub editor.
            </summary>
            <param name="subID">Sub editor user id</param>
            <param name="numberToAllocation">Number to allocation</param>
            <param name="allocatorID">Allocator User ID</param>
            <param name="comments">Any comments about entries</param>
            <param name="totalAllocated">Total number allocated -returned</param>
            <returns>Whether allocations submitted successfully</returns>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.SubmitDeallocation(System.Int32,System.Int32[],System.Int32@)">
            <summary>
            Deallocates the specified entries from whichever sub editor they
            happen to be allocated to currently, so long as they have not
            already been returned.
            </summary>
            <param name="deallocatorID">user doing the deallocation</param>
            <param name="entryIDs">array of entry IDs to be deallocated</param>
            <param name="totalDeallocated">total number of entries in the array</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.InsertNotificationStatus">
            <summary>
            Inserts the total number of subs who have not yet been notified of
            	their most recent batch of allocations.
            </summary>
            <returns>true for success or false for failure</returns>
        </member>
        <member name="M:BBC.Dna.Component.SubAllocationForm.AddErrorMessage(System.String,System.String)">
            <summary>
            Adds XML specifying a particular error type to the form object.
            </summary>
            <param name="errorType">the string value to put in the type attribute of the
            		error XML</param>
            <param name="errorText">optional text to place inside the error tag, giving
            		further information on the error</param>
            <returns>true for success or false for failure</returns>
        </member>
        <member name="T:BBC.Dna.Component.SubbedArticleStatusBuilder">
            <summary>
            Builds the sub-article details and builds them into the page XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubbedArticleStatusBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubArticleStatusBuilder
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SubbedArticleStatusBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.SubmitReviewForum">
            <summary>
            Summary of the SubmitReviewForum Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubmitReviewForum.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the SubmitReviewForum component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SubmitReviewForum.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubmitReviewForum.TryCreateSubmitReviewForumXML(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Functions generates the TryCreateSubmitReviewForumXML XML
            </summary>
            <param name="H2G2ID">H2G2 ID of the article to submit</param>
            <param name="action">Action to take</param>
            <param name="response">Response Comments</param>
            <param name="reviewForumID">Review Forum ID to submit an article </param>
            <param name="rFID">rfID ID of the thread to Delete</param>
        </member>
        <member name="M:BBC.Dna.Component.SubmitReviewForum.TryGetPageParams(System.Int32@,System.String@,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="H2G2ID">H2G2 ID of the article to submit</param>
            <param name="action">Action to take</param>
            <param name="response">Response Comments</param>
            <param name="reviewForumID">Review Forum ID to submit an article </param>
            <param name="rFID">rfID ID of the thread to Delete</param>
        </member>
        <member name="T:BBC.Dna.Component.SubNotificationEmail">
            <summary>
            Class to store the SubNotificationEmail
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubNotificationEmail.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the SubNotificationEmail component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SubNotificationEmail.CreateNotificationEmail(System.Int32,System.Boolean@,System.String@,System.String@,System.String@)">
            <summary>
             Checks to see if this sub editor has any allocations that they have
            	not yet been notified about, and if so builds the email to send
            	in order to notify them.
             </summary>
             <param name="subID">user id of the sub to create the notification for</param>
             <param name="toSend">returned whether or not an email to send was created</param>
             <param name="emailAddress">the subs email address</param>
             <param name="emailSubject">the subject line for the email</param>
             <param name="emailText">the text of the email</param>
        </member>
        <member name="T:BBC.Dna.Component.SystemMessageMailbox">
            <summary>
            Summary of the SystemMessageMailbox object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SystemMessageMailbox.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the SystemMessageMailbox component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SystemMessageMailbox.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SystemMessageMailbox.TryCreateSystemMessageMailboxXML(System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the SystemMessageMailbox XML
            </summary>
            <param name="skip">Number of posts to skip</param>
            <param name="show">Number of posts to show</param>
            <param name="enteredUserID">Entered User ID, if super user or editor</param>
        </member>
        <member name="M:BBC.Dna.Component.SystemMessageMailbox.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="skip">number of messages to skip</param>
            <param name="show">number to show</param>
            <param name="enteredUserID">Entered User ID, if super user or editor</param>
            <param name="command">Command action if there is one - Delete message</param>
            <param name="toDeleteMessageID">To Delete message ID</param>
        </member>
        <member name="T:BBC.Dna.Component.SubEditorAllocationPageBuilder">
            <summary>
            SubEditorAllocationPageBuilder
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubEditorAllocationPageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubEditorAllocationPageBuilder
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.SubEditorAllocationPageBuilder.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SubEditorAllocationPageBuilder.ProcessAllocationSubmission(System.String)">
            <summary>
            Checks to see if there is a submission of entry allocations to subs
            	in this request, and processes it if there is.
            </summary>
            <param name="command">outlines what action to complete</param>
            <returns>True if any submission was process successfully (or there was none),
            	false if something went wrong</returns>
        </member>
        <member name="M:BBC.Dna.Component.SubEditorAllocationPageBuilder.SendNotificationEmails(System.Int32@)">
            <summary>
            Sends out an email containing a summary of the new allocations made
            	to each sub editor.
            </summary>
            <param name="totalSent">total number of emails sent returned</param>
            <returns>True if emails sent okay, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.SubEditorAllocationPageBuilder.AddErrorMessage(System.String,System.String)">
            <summary>
            Adds XML specifying a particular error type to the form object.
            </summary>
            <param name="errorType">the string value to put in the type attribute of the
            		error XML</param>
            <param name="errorText">optional text to place inside the error tag, giving
            		further information on the error</param>
            <returns>true for success or false for failure</returns>
        </member>
        <member name="M:BBC.Dna.Component.TagItem.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the TagItem object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.TagItem.InitialiseFromThreadId(System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Setup the initial items for the threadID
            </summary>
            <param name="threadID"></param>
            <param name="siteID"></param>
            <param name="userID"></param>
            <param name="subject"></param>
            <param name="getTagLimits"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.TokenizedNamespacedPhrases">
            <summary>
            This class is used when you have tokenized phrases or namespaces.
            The phrases are contained in one string with tokens for seperators.
            e.g. "One|a|Three" where | is the token
            </summary>
        </member>
        <member name="M:BBC.Dna.TokenizedNamespacedPhrases.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="nameSpace">A string that contains tokenized namespaces</param>
            <param name="phrases">A string that contains tokenized phrases</param>
            <param name="token">The token that is used to seperate the namespaces and phrases</param>
            <remarks>IMPORTANT!!! There should be the same amount of phrases as namespaces. If a phrase does not
            have a namespace, then an empty string should be present e.g "one||three"</remarks>
        </member>
        <member name="M:BBC.Dna.TokenizedNamespacedPhrases.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="nameSpace">A string that contains tokenized namespaces</param>
            <param name="phrases">A string that contains tokenized phrases</param>
            <remarks>IMPORTANT!!! There should be the same amount of phrases as namespaces. If a phrase does not
            have a namespace, then an empty string should be present e.g "one||three"</remarks>
        </member>
        <member name="P:BBC.Dna.TokenizedNamespacedPhrases.TokenSet">
            <summary>
            Get property that tell you if the token has been set for this instance.
            If not, you should use the 'static public string GetSiteDelimiterToken()' method in NamespacePhrases.
            </summary>
        </member>
        <member name="P:BBC.Dna.TokenizedNamespacedPhrases.Token">
            <summary>
            The token get property
            </summary>
        </member>
        <member name="P:BBC.Dna.TokenizedNamespacedPhrases.TokenizedNameSpace">
            <summary>
            The namespace get property
            </summary>
        </member>
        <member name="P:BBC.Dna.TokenizedNamespacedPhrases.TokenizedPhrases">
            <summary>
            The phrases get property
            </summary>
        </member>
        <member name="T:BBC.Dna.TypedArticle">
            <summary>
            The typed article component is used to create and maintain articles
            It uses the new Dna Template Form system which is the C# replacement for the
            old C++ Multistep.
            </summary>
        </member>
        <member name="F:BBC.Dna.TypedArticle._typedArticleNode">
            <summary>
            Create the base node for the component
            </summary>
        </member>
        <member name="M:BBC.Dna.TypedArticle.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default contructor for the typed article component
            </summary>
            <param name="context">The input context for the current request</param>
        </member>
        <member name="M:BBC.Dna.TypedArticle.ProcessRequest">
            <summary>
            Called by the dna framework so that the component can have a chance at processing the request
            </summary>
        </member>
        <member name="M:BBC.Dna.TypedArticle.CreateArticle">
            <summary>
            Create the article with the params passed via the URL
            </summary>
        </member>
        <member name="M:BBC.Dna.TypedArticle.AddKeyPhrasesToArticle(System.Int32)">
            <summary>
            Adds key phrases to the article from the users input
            </summary>
            <param name="h2g2ID">The h2g2 id of the article you want to add the key phrases to</param>
        </member>
        <member name="M:BBC.Dna.TypedArticle.AddRedirectForArticle(System.Int32)">
            <summary>
            Adds the redirect for the successful create/update
            </summary>
        </member>
        <member name="M:BBC.Dna.TypedArticle.SetArticleForumArchiveStatus(System.Int32,System.Boolean)">
            <summary>
            Sets the archive status for the article's forum
            </summary>
            <param name="h2g2ID">The h2g2id of the article you want to update</param>
            <param name="archive">A flag to state whether or not to archive</param>
        </member>
        <member name="M:BBC.Dna.TypedArticle.HideUnHideArticle(System.Int32,System.Int32)">
            <summary>
            Sets the hidden status for the article
            </summary>
            <param name="h2g2ID">The h2g2ID of the article you want to update</param>
            <param name="hiddenStatus">The new hidden status of the article</param>
        </member>
        <member name="M:BBC.Dna.TypedArticle.UpdateUserSubscriptions(System.Int32)">
            <summary>
            Updates all users who are subscribed to the current user
            </summary>
            <param name="h2g2ID">The h2g2ID of the article you want to check against</param>
        </member>
        <member name="M:BBC.Dna.TypedArticle.TryParseGuideBody">
            <summary>
            Used to make sure that the input for the guide body parses correctly as valid XML
            </summary>
            <returns>A string that represents the XML for the guide body</returns>
        </member>
        <member name="M:BBC.Dna.TypedArticle.GetStatusForArticle">
            <summary>
            Gets the status from the template input, but also checks to see if the user is able to set the status
            to that value. If not the default status is returned, 3
            </summary>
            <returns>The current status of the article</returns>
        </member>
        <member name="M:BBC.Dna.TypedArticle.EditArticle">
            <summary>
            The edit article method. This is responsible for setting the template values with the article
            that we want to edit.
            </summary>
        </member>
        <member name="M:BBC.Dna.TypedArticle.UpdateArticle">
            <summary>
            The update article method. This is responsible for updating the given article with the new values.
            </summary>
        </member>
        <member name="P:BBC.Dna.TypedArticle.GetRequiredFormFields">
            <summary>
            The get property that returns a list of the required form fields for the template builder
            </summary>
        </member>
        <member name="T:BBC.Dna.UIField">
            <summary>
            Class to store info on an UIField
            </summary>
        </member>
        <member name="M:BBC.Dna.UIField.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for the UIField Component
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.UIField.LoadFieldFromDatabase(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Loads the field from the database
            </summary>
            <param name="dataReader">dataReader with the field info</param>
        </member>
        <member name="M:BBC.Dna.UIField.LoadFieldFromXml(System.Xml.XmlElement)">
            <summary>
            Loads a field with data from an UIField XML element
            </summary>
            <param name="field">Xml element containing the field data in the uifield xml format</param>
        </member>
        <member name="M:BBC.Dna.UIField.Validate">
            <summary>
            Validate fields
            </summary>
            <returns>true if valid false if not</returns>
        </member>
        <member name="M:BBC.Dna.UIField.ParseValue(System.String)">
            <summary>
            Checks that the string as xml parses OK
            </summary>
            <param name="value">The string to check</param>
            <returns>Whether the string parses to an xml document</returns>
        </member>
        <member name="M:BBC.Dna.UIField.HasProfanities(System.String)">
            <summary>
            Checks that the string parses without any profanities
            </summary>
            <param name="value">The string to check</param>
            <returns>Whether the string parses without any profanities</returns>
        </member>
        <member name="P:BBC.Dna.UIField.UIFieldID">
            <summary>
            Accessor for UIFieldID
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Name">
            <summary>
            Accessor for Name
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Label">
            <summary>
            Accessor for Label
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Type">
            <summary>
            Accessor for Type
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Description">
            <summary>
            Accessor for Description
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.IsKeyPhrase">
            <summary>
            Accessor for IsKeyPhrase
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.KeyPhraseNamespace">
            <summary>
            Accessor for KeyPhraseNamespace
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Required">
            <summary>
            Accessor for Required
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.DefaultValue">
            <summary>
            Accessor for DefaultValue
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Escape">
            <summary>
            Accessor for Escape
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.RawInput">
            <summary>
            Accessor for RawInput
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.IncludeInGuideEntry">
            <summary>
            Accessor for IncludeInGuideEntry
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValidateEmpty">
            <summary>
            Accessor for ValidateEmpty
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValidateNotEqualTo">
            <summary>
            Accessor for ValidateNotEqualTo
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValidateParsesOK">
            <summary>
            Accessor for ValidateParsesOK
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.NotEqualToValue">
            <summary>
            Accessor for NotEqualToValue
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValidateCustom">
            <summary>
            Accessor for ValidateCustom
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Step">
            <summary>
            Accessor for Step
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.Permissions">
            <summary>
            Accessor for UIFieldPermissions
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.RawValue">
            <summary>
            Accessor for RawValue
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.EscapedValue">
            <summary>
            Accessor for EscapedValue
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ProfanityFilterState">
            <summary>
            Accessor for ProfanityFilterState
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValueString">
            <summary>
            Accessor for ValueString
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValueInt">
            <summary>
            Accessor for ValueInt
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValueDouble">
            <summary>
            Accessor for ValueDouble
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValueDateTime">
            <summary>
            Accessor for ValueDateTime
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.ValueBool">
            <summary>
            Accessor for ValueBool
            </summary>
        </member>
        <member name="P:BBC.Dna.UIField.XML">
            <summary>
            Accessor for getting the XML
            </summary>
        </member>
        <member name="T:BBC.Dna.UIField.UIFieldType">
            <summary>
            UIField Types
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldType.Number">
            <summary>
            Number type
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldType.String">
            <summary>
            String type
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldType.Date">
            <summary>
            Date type
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldType.Bool">
            <summary>
            Bool type
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldType.File">
            <summary>
            File type
            </summary>
        </member>
        <member name="T:BBC.Dna.UIField.UIFieldPermissions">
            <summary>
            UIField Permissions Level
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldPermissions.Standard">
            <summary>
            Standard user access
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldPermissions.Editor">
            <summary>
            Editor type
            </summary>
        </member>
        <member name="F:BBC.Dna.UIField.UIFieldPermissions.SuperUser">
            <summary>
            SuperUser type
            </summary>
        </member>
        <member name="T:BBC.Dna.ExceptionMsgs">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BBC.Dna.ExceptionMsgs.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BBC.Dna.ExceptionMsgs.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BBC.Dna.ExceptionMsgs.INVALID_FORUMID">
            <summary>
              Looks up a localized string similar to The Forum ID passed was invalid..
            </summary>
        </member>
        <member name="T:BBC.Dna.ExtraInfoTagValue">
            <summary>
            Simple container class for extra info tag values
            </summary>
        </member>
        <member name="M:BBC.Dna.ExtraInfoTagValue.#ctor(System.String,System.String)">
            <summary>
            Default constructor for creating an extra info tag value
            </summary>
            <param name="tagname">The name of the tag</param>
            <param name="value">The value that represnts the tag</param>
        </member>
        <member name="P:BBC.Dna.ExtraInfoTagValue.TagName">
            <summary>
            Get property for the tagname
            </summary>
        </member>
        <member name="P:BBC.Dna.ExtraInfoTagValue.Value">
            <summary>
            Get property for the value
            </summary>
        </member>
        <member name="T:BBC.Dna.ExtraInfo">
            <summary>
            The ExtraInfo class
            </summary>
        </member>
        <member name="M:BBC.Dna.ExtraInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.ExtraInfo.TryCreate(System.Int32,System.String)">
            <summary>
            This method creates the extra info object from text
            </summary>
            <param name="type">The type of the entry the extrainfo belongs to</param>
            <param name="extraInfo">The string that the extrainfo should be created from. Can be left blank</param>
            <returns>True if the extrainfo was parsed correctly, false if not</returns>
        </member>
        <member name="M:BBC.Dna.ExtraInfo.AddExtraInfoTagValue(System.String,System.String)">
            <summary>
            This method allows you to add new tags to the extra info block
            </summary>
            <param name="tagName">The name of the new tag</param>
            <param name="value">The value that represents the new tag</param>
        </member>
        <member name="M:BBC.Dna.ExtraInfo.GetExtraInfoTagList">
            <summary>
            Gets the extra info tag values as a list of ExtraInfoTagValues
            </summary>
            <returns>A list of the tags and values</returns>
        </member>
        <member name="P:BBC.Dna.ExtraInfo.IsCreated">
            <summary>
            Use this property to see if the extra info has been created
            </summary>
        </member>
        <member name="T:BBC.Dna.FileCache">
            <summary>
            A class to cache and retrieve string data from a filesystem cache.
            Compatible with the Ripley C++ file cache
            </summary>
        </member>
        <member name="M:BBC.Dna.FileCache.GetItem(System.String,System.String,System.String,System.DateTime@,System.String@)">
            <summary>
            Get a string from a file cache if it's newer than a given expiry date
            </summary>
            <param name="cacheRoot">path to the root of the cache directory</param>
            <param name="cacheName">Name of the subdirectory in which to look for this item</param>
            <param name="itemName">Name of the cache file to create</param>
            <param name="Expires">If the date on the file is older than this date, don't return the string. 
            This value will contain the actual date of the file on return from this method</param>
            <param name="Value">String containing the contents of this cache item</param>
            <returns>True if a valid item is returned from the cache, false if no item found or it's out of date</returns>
        </member>
        <member name="M:BBC.Dna.FileCache.PutItem(System.String,System.String,System.String,System.String)">
            <summary>
            Puts a string value into a file-based cache. Compatible with Ripley's caching methods
            </summary>
            <param name="cacheRoot">Directory root of the global file cache</param>
            <param name="cacheName">Name of subdirectory to cache in</param>
            <param name="itemName">Name of file to cache</param>
            <param name="Text">String value to store in cache (usualy XML but doesn't have to be</param>
            <returns>True if cached successfully. False otherwise.</returns>
        </member>
        <member name="M:BBC.Dna.FileCache.InvalidateItem(System.String,System.String,System.String)">
            <summary>
            Invalidates a file cache by setting 
            </summary>
            <param name="cacheRoot"></param>
            <param name="cacheName"></param>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Forum">
            TODO: Replace with BBC.Dna.Objects.ForumHelper
             <summary>
             The forum object
             </summary>
        </member>
        <member name="M:BBC.Dna.Forum.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor. This is derived from the DnaInputComponent
            </summary>
            <param name="context">An object that impliments the IInputContext interface</param>
        </member>
        <member name="M:BBC.Dna.Forum.GetForumStyle(System.Int32)">
            <summary>
            Gets the style for a given forum
            </summary>
            <param name="forumID">The id of the forum you want to get the sytle for</param>
            <returns>The style of the given forum, OR 0 if it fails to find the forum</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetPostsInForum(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets all the posts in a given forum and creates the XML tree.
            </summary>
            <param name="forumID">The id of the forum you want to get the posts for</param>
            <param name="skip">The number of posts to skip before displaying</param>
            <param name="show">The number of posts to display</param>
        </member>
        <member name="M:BBC.Dna.Forum.GetMostRecent(System.Int32)">
            <summary>
            Get sthe most recent posts for a given forum id
            </summary>
            <param name="forumID">The id of the forum you want to get the posts for</param>
        </member>
        <member name="M:BBC.Dna.Forum.GetThreadList(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets the thread list for a given forum
            </summary>
            <param name="forumID">The ID of the forum you want to get the list for</param>
            <param name="show">The number of threads you want to pull out</param>
            <param name="skip">The number of threads you want to skip</param>
            <param name="threadID">The threadid you want to start getting threads from. Alternative to skip</param>
            <param name="overflow">If true pulls back one thread before and after the set of shown threads</param>
            <param name="threadOrder">The order in which you want to get the post back.</param>
        </member>
        <member name="M:BBC.Dna.Forum.CreateFirstPoster(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode)">
            <summary>
            Creates the first poster block for the thread lists
            </summary>
            <param name="reader">The DNADataReader that contains the post details</param>
            <param name="threadNode">The node that you want to add the poster block to</param>
        </member>
        <member name="M:BBC.Dna.Forum.CreateLastPoster(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode)">
            <summary>
            Creates the last poster block for a thread
            </summary>
            <param name="reader">The DNADataReader that contains the post details</param>
            <param name="threadNode">The node that you want to add the poster to</param>
        </member>
        <member name="M:BBC.Dna.Forum.CreateThreadPostingXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode,System.String)">
            <summary>
            Creates the XML block for a posting in a thread
            </summary>
            <param name="reader">The IDnaDataReader that contains the information about the posting</param>
            <param name="threadNode">The node to add the posting node to</param>
            <param name="usersPrefix">Pass in 'First' if the post is the first post in the thread, and 'last' if it's the last.</param>
            <returns>The new post node</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetMostRecentThreadDate(System.Int32)">
            <summary>
            Gets the most recent thread date
            </summary>
            <param name="forumID">The forum you want to check against</param>
            <returns>The date of the most recent thread entry date for the forum</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetIndexForThreadInForum(System.Int32,System.Int32)">
            <summary>
            Gets the index of a given thread in a given forum
            </summary>
            <param name="forumID">The forum the thread belongs to</param>
            <param name="threadID">The thread you want to get the index for</param>
            <returns>The index of the requested thread, or 0 if it was not found</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetSiteIDForForum(System.Int32)">
            <summary>
            Gets the site id for the site that the forum belongs to.
            </summary>
            <param name="forumID">The forum id you want to get the site id for</param>
            <returns>The id of the site that the forum belongs to</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetSiteIDForThread(System.Int32)">
            <summary>
            Gets the site id for the site that the thread belongs to.
            </summary>
            <param name="threadid">The id of the thread you want to get the site id for</param>
            <returns>The id of the site that the thread belongs to</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetSiteIDForForumOrThread(System.Int32,System.Int32)">
            <summary>
            Gets the sites id that the forum was created in.
            </summary>
            <param name="forumID">The forum id that you want to get the siteid for. Set to 0 if you are using threadid</param>
            <param name="threadID">The Thread id that you want to get the siteid for. Set to 0 if you are using forumid</param>
            <returns>The id of the site that the forum or thread belongs to, 0 if it could not be found</returns>
        </member>
        <member name="M:BBC.Dna.Forum.FilterOnThreadPermissions(System.Int32)">
            <summary>
            This method updates all the THREADs CanRead/CanWrite permissions in the FORUMTHREADS block depending on the viewing user.
            </summary>
            <param name="forumID">The forumid of the forum you want to filter</param>
        </member>
        <member name="M:BBC.Dna.Forum.FilterOnPostPermissions(System.Int32)">
            <summary>
            This method updates all the POSTs CanRead/CanWrite permissions in the FORUMTHREADPOSTS block depending on the viewing user.
            </summary>
            <param name="forumID">The forumid of the forum you want to filter</param>
        </member>
        <member name="M:BBC.Dna.Forum.FilterOnJournalPostPermissions(System.Int32)">
            <summary>
            This method updates all the POSTs CanRead/CanWrite permissions in the JOURNALPOSTS block depending on the viewing user.
            </summary>
            <param name="forumID">The forumid of the forum you want to filter</param>
        </member>
        <member name="M:BBC.Dna.Forum.FilterOnPermissions(System.Int32,System.String,System.String)">
            <summary>
            Updates the Threads/Posts CanRead/CanWrite permissions for the viewing user.
            </summary>
            <param name="forumID">The forum you want to check the permissions against.</param>
            <param name="tagName">The name of the node that you want to update the children of.</param>
            <param name="childTagName">The name of the child nodes that will be updated.</param>
            <remarks>Do not call this method directly, instead use the FilterOnThreadPermissions(), FilterOnPostsPermissions() or FilterOnPostPermissions()</remarks>
        </member>
        <member name="M:BBC.Dna.Forum.GetPostEditableAttribute(System.Int32,System.DateTime)">
            <summary>
            Given a user id and a date created time return whether or not a post would be editable by
            the viewing user on this site
            </summary>
            <param name="postEditorID">posts editor</param>
            <param name="dateCreated">Date post was created</param>
            <returns>0 if not editable or the number of minutes left until it is not</returns>
        </member>
        <member name="M:BBC.Dna.Forum.GetJournal(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the journal forum
            </summary>
            <param name="journalID">The ID of the journal you want to get the list for</param>
            <param name="show">The number of threads you want to pull out</param>
            <param name="skip">The number of threads you want to skip</param>
            <param name="showUserHidden">Whether to show user hidden</param>
        </member>
        <member name="M:BBC.Dna.Forum.GetTitle(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Another method for the title where there extra params are not needed. See Get Title
            </summary>
            <param name="forumID">ID of forum</param>
            <param name="threadID">ID of forum thread</param>
            <param name="includeArticle">flag to include article data</param>
        </member>
        <member name="M:BBC.Dna.Forum.GetTitle(System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.String@,System.Int32@,System.String@)">
            <summary>
            Builds an XML representation of the forum source, vis:
            </summary>
            <param name="forumID">ID of forum</param>
            <param name="threadID">ID of forum thread</param>
            <param name="includeArticle">flag to include article data</param>
            <param name="type">Type of forum</param>
            <param name="ID">ID either H2G2ID or club ID</param>
            <param name="title">Title</param>
            <param name="siteID">Site ID</param>
            <param name="url">URL involved</param>
        </member>
        <member name="M:BBC.Dna.Forum.PostToJournal(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            posts a new entry to the user's journal
            </summary>
            <param name="userID">ID of user posting</param>
            <param name="journalID">Forum ID of the user's journal</param>
            <param name="userName">username (not used, I think)</param>
            <param name="subject">Subject line of posting</param>
            <param name="body">body of journal posting</param>
            <param name="siteID"></param>
            <param name="postStyle"></param>
            <param name="profanityFound">if profanites are found</param>
            <param name="nonAllowedURLsFound">if non allowed urls are found</param>
            <param name="emailAddressFound">Indicates an email address was found.</param>
        </member>
        <member name="M:BBC.Dna.Forum.PostToForum(System.Int32,System.Int32,System.Int32@,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Prepares all the pre-requisites for a post.
            </summary>
            <param name="userId"> Post using the specified user.</param>
            <param name="forumId"></param>
            <param name="threadId"></param>
            <param name="replyTo"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="postStyle">Th estyle of the post</param>
            <param name="ignoreModeration"> Allow automated posts.</param>
            <param name="postId"> New postId</param>
            <param name="isQueued"> Indicates whether post was Queued</param>
            <param name="isPreModPosting"></param>
            <param name="isPreModerated"></param>
        </member>
        <member name="M:BBC.Dna.Forum.PostToForum(System.Int32,System.Int32,System.Int32@,System.Int32,System.String,System.String,System.Int32,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.String,System.Guid,System.Boolean,System.Boolean,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            A barebones PostToForum Method.
            </summary>
        </member>
        <member name="P:BBC.Dna.Forum.ForumID">
            <summary>
            The get property for the forums id
            </summary>
        </member>
        <member name="P:BBC.Dna.Forum.SiteID">
            <summary>
            The get property for the forums site id
            </summary>
        </member>
        <member name="T:BBC.Dna.GuideEntrySetup">
            TODO: Replace with BBC.Dna.Objects.Article and GuideEntry
             <summary>
             The guide entry setup class. Used to help the initialisation of the guideentries.
             It has all the setting set to thier defaults.
             </summary>
        </member>
        <member name="M:BBC.Dna.GuideEntrySetup.#ctor(System.Int32)">
            <summary>
            The default constructor
            </summary>
            <param name="h2g2ID">The id of the guid entry you want to view</param>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.h2g2ID">
            <summary>
            The h2g2 ID property
            Set this to state whicxh entry to get from the database
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.ShowEntryData">
            <summary>
            The show entry data property.
            Set this to determine whether or not to include entry data in the XML.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.ShowPageAuthors">
            <summary>
            The show page authors property
            Set this to determine whether or not to include the page authors in the XML.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.ShowReferences">
            <summary>
            The show References property
            Set this to determine whether or not to include References in the XML.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.SafeToCache">
            <summary>
            The safe to cache property
            Set this to determine whether or not the guide entry is safe to be cached.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.ShowHidden">
            <summary>
            The show hidden property
            Set this to determine whether or not to display hidden entries.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.ProfanityTriggered">
            <summary>
            The profanity triggered property
            Set this if a profanity was triggered when getting the information from the user.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.NonAllowedURLsTriggered">
            <summary>
            The non allowed urls triggered property
            Set this if a non allowed url was triggered when getting the information from the user.
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntrySetup.IsBeingEdited">
            <summary>
            The being edited property
            Set this if the guide entry is in editing mode.
            </summary>
        </member>
        <member name="T:BBC.Dna.GuideEntry">
            <summary>
            The GuideEntry object
            </summary>
        </member>
        <member name="M:BBC.Dna.GuideEntry.#ctor(BBC.Dna.IInputContext,BBC.Dna.GuideEntrySetup)">
            <summary>
            The default constructor for the guideentry object
            </summary>
            <param name="context">An object that impliments the IInputContext interface. e.g. basePage</param>
            <param name="setup">A guide entry setup object. This has all the flags that state how the guideentry is to be made</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.Initialise">
            <summary>
            Initialises the guide entry using the set object
            </summary>
            <returns>True if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.UpdatePermissionsForViewingUser">
            <summary>
            This method updates all the canread / canwrite flags based on the viewing user
            </summary>
        </member>
        <member name="M:BBC.Dna.GuideEntry.CreateEntryFromData(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method is used to create the entry from the given data
            </summary>
            <param name="showEntryData">Flag to state whether or not to show the entry data</param>
            <param name="editing">Flag to state whether or not we are currently editing the entry</param>
            <param name="showPageAuthors">Flag to state whether or not to show the page authors</param>
            <param name="profanityTriggered">Flag to state whether or not a profanity was triggered</param>
            <param name="nonAllowedURLsTriggered">Flag to state whether or not a non allowed URL was found</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.AddArticleInfo(System.Boolean,System.Boolean,System.Xml.XmlNode)">
            <summary>
            This method adds all the article info to the entry
            </summary>
            <param name="showEntryData">A flag that states whether or not to add the entry data to the XML</param>
            <param name="showPageAuthors">A flag to state whether or not to add the authors list to the XML</param>
            <param name="parentNode">The node that you want to insert the article info block</param>
            <returns>The node that represents the articleinfo block</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.CreateReferences(System.Xml.XmlNode)">
            <summary>
            Creates the References for the current article. This is done by searching the body text
            for links.
            </summary>
            <param name="articleInfoNode">The node that you want to add the resultant xml block to</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.AddEntryData(System.Xml.XmlNode)">
            <summary>
            Creates the entry's data
            </summary>
            <param name="parentNode">The node that you want to add the xml to</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.AddStatusTag(System.Xml.XmlNode,System.Int32)">
            <summary>
            This method works out and inserts the status of the entry into the tree
            </summary>
            <param name="parentNode">The node you want to insert the status into</param>
            <param name="status">The status that you want to represent in the XML</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.GetDescriptionForStatusValue(System.Int32)">
            <summary>
            This method gets the description for a given status value
            </summary>
            <param name="status">The status value you want to get the description for</param>
            <returns>The description for the given status value</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.GetEntryFromDataBase(System.Boolean@,System.Boolean@)">
            <summary>
            This method reads in the entry form the database and sets up all the member fields
            </summary>
            <param name="safeToCache">A flag to state whether or not this entry is safe to cache. Usually set to false whhen an error occures.</param>
            <param name="failingGracefully">A flag that states whether or not this method is failing gracefully.</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.ValidateH2G2ID">
            <summary>
            Validates the h2g2id to make sure it correctly translates to an entry id
            </summary>
            <remarks>This is the C# version of the C++ IsValidChecksum(...) function.</remarks>
            <returns>True if valid, false if not</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.ValidateH2G2ID(System.Int32)">
            <summary>
            Validates the h2g2id to make sure it correctly translates to an entry id
            </summary>
            <remarks>This is the C# version of the C++ IsValidChecksum(...) function.</remarks>
            <returns>True if valid, false if not</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.CreateFromCacheText(System.String)">
            <summary>
            Creates the guide entry from a cached text version.
            </summary>
            <param name="cachedEntry">The cached entry you want to create from</param>
        </member>
        <member name="M:BBC.Dna.GuideEntry.UpdatePermissionsForUser">
            <summary>
            Updates the can read/write permissions depending on the status of the user
            </summary>
            <remarks>This is the C# version of the C++ ChangeArticleXMLPermissionsForUser(...) function.</remarks>
        </member>
        <member name="M:BBC.Dna.GuideEntry.HasEditPermission(BBC.Dna.IUser)">
            <summary>
            Checks to see if a user has edit permissions for the current guide entry
            </summary>
            <param name="user">The user you want to check against</param>
            <returns>True if they are able to edit, false if not</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.CheckIsSubEditor(BBC.Dna.IUser)">
            <summary>
            Checks to see the given user is a subeditor for the entry
            </summary>
            <param name="user">The user you want to check for subeditor status</param>
            <returns>True if they are, fasle if not</returns>
        </member>
        <member name="M:BBC.Dna.GuideEntry.IsTypeOfArticle(System.Int32)">
            <summary>
            Gets whether the given type number is in the range of the Article Types
            </summary>
            <param name="articleType"></param>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.GuideEntry.H2G2ID">
            <summary>
            Get property for the h2g2id
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.EntryID">
            <summary>
            Get property for the guides entry id
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Status">
            <summary>
            Get property for the guides status value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Style">
            <summary>
            Get property for the guides Style value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Type">
            <summary>
            Get property for the guides Type value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Submittable">
            <summary>
            Get property for the guides Submittable value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Subject">
            <summary>
            Get property for the guides subject value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.ForumID">
            <summary>
            Get property for the guide entry forumid
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.AuthorsUserID">
            <summary>
            Get property for the guide entries author Id
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.IsDeleted">
            <summary>
            Get property that states whether or not the entry is deleted
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Longitude">
            <summary>
            Get property for the entries longitude value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.Latitude">
            <summary>
            Get property for the entries latitude value
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.IsPlainText">
            <summary>
            Get property to see if the entry is plain text
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.IsGuideML">
            <summary>
            Get property to see if the entry is GuideML
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.IsHTML">
            <summary>
            Get property to see if the entry is HTML
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.IsSubmittable">
            <summary>
            The property that states whether or not the entry is Submittable
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.CanRead">
            <summary>
            The can read property
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.DefaultCanRead">
            <summary>
            The default state of can read property
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.CanWrite">
            <summary>
            The can write property
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.DefaultCanWrite">
            <summary>
            The default state of can write property
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.CanChangePermissions">
            <summary>
            The can change permissions property
            </summary>
        </member>
        <member name="P:BBC.Dna.GuideEntry.DefaultCanChangepermissions">
            <summary>
            The default state of the can change permissions property
            </summary>
        </member>
        <member name="T:BBC.Dna.GuideEntry.GuideEntryType">
            <summary>
            Enumeration of Guide Type
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPEARTICLE">
            <summary>
            Start of Article Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPEARTICLE_RANGEEND">
            <summary>
            End of ArticleType numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPECLUB">
            <summary>
            Start of Club Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPECLUB_RANGEEND">
            <summary>
            End of Club Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPEREVIEWFORUM">
            <summary>
            Start of Review Forum Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPEREVIEWFORUM_RANGEEND">
            <summary>
            End of Review Forum Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPEUSERPAGE">
            <summary>
            Start of User Page Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPEUSERPAGE_RANGEEND">
            <summary>
            End of User Page Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPECATEGORYPAGE">
            <summary>
            Start of Category page Type numbers
            </summary>
        </member>
        <member name="F:BBC.Dna.GuideEntry.GuideEntryType.TYPECATEGORYPAGE_RANGEEND">
            <summary>
            End of Category Page Type numbers
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Hierarchy">
            <summary>
            Hierarchy - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Hierarchy component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.GetSiteIDFromParams">
            <summary>
            Gets Site ID from the Params
            </summary>
            <returns>The site id in the params</returns>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.GetHierarchyForSite(System.Int32)">
            <summary>
            Gets the hierarchy data for the Site
            </summary>
            <param name="siteID">Get the hierarchy for a given site</param>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.GenerateHierarchyForSiteXML(System.Int32,BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Generates the Xml structure containing the Hierarchy data
            </summary>
            <param name="siteID">Get the hierarchy for a given site</param>
            <param name="dataReader">Results from the database</param>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.AddElement(System.Xml.XmlElement)">
            <summary>
            Helper function to create elements within the hierarchy nodes
            </summary>
            <param name="element">if given then attach the new element 'Node' to this</param>
            <returns>New Element (Node)</returns>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.AddCachedXmlElement(System.Xml.XmlElement,System.Int32)">
            <summary>
            Add the hierarchy nodes to the cache
            </summary>
            <param name="siteID">Adds the hierarchy for the given site</param>
            <param name="HierarchyNodes"></param>
        </member>
        <member name="M:BBC.Dna.Component.Hierarchy.TryGetCachedXmlElementOrNull(System.Int32)">
            <summary>
            Gets the cached hierarchy nodes
            </summary>
            <param name="siteID">Get the hierarchy for the given site</param>
            <returns>The XmlElement containing the hierarchy nodes</returns>
        </member>
        <member name="T:BBC.Dna.HtmlTransformer">
            <summary>
            Concrete DnaTransformer class implementing HTML transformation.
            </summary>
        </member>
        <member name="T:BBC.Dna.DnaTransformer">
            <summary>
            The Dna XML Transformer. Used to transform the Dna page into html or xml or any other format
            </summary>
        </member>
        <member name="T:BBC.Dna.IDnaTransformer">
            <summary>
            Interface representing a Dna transformer object. Implement this to transform the xml representation of a dna component into an desired output format.
            </summary>
        </member>
        <member name="M:BBC.Dna.IDnaTransformer.TransformXML(BBC.Dna.IDnaComponent)">
            <summary>
            Transform the xml of a Dna component.
            </summary>
            <param name="component">Dna component to transform.</param>
            <returns>true if component's xml is transformed, otherwise false.</returns>
        </member>
        <member name="M:BBC.Dna.IDnaTransformer.GetCachedOutput">
            <summary>
            Returns the cached output if avaliable, or null if there isn't any
            </summary>
            <returns>cached output, or null if none exists</returns>
        </member>
        <member name="M:BBC.Dna.IDnaTransformer.IsCachedOutputAvailable">
            <summary>
            Determines whether, for this request, there is a fully cached output page available
            </summary>
            <returns>true if there is cached output available. false if not.</returns>
        </member>
        <member name="M:BBC.Dna.IDnaTransformer.WriteCachedOutput">
            <summary>
            Writes the current request's cached output to the response. 
            </summary>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.#ctor(BBC.Dna.IOutputContext)">
            <summary>
            Default constructor for the Transformer object
            </summary>
            <param name="context">The context for the page that the _transformer will be using</param>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.TransformXML(BBC.Dna.IDnaComponent)">
            <summary>
            The abstract Transform method
            </summary>
            <param name="component">The IDNACompnent you are transforming</param>
            <returns>true if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.CreateTransformer(BBC.Dna.IInputContext,BBC.Dna.IOutputContext)">
            <summary>
            Static method that creates and returns a transformer object of the correct type
            </summary>
            <param name="inputContext">Our Input context</param>
            <param name="outputContext">Our Output context</param>
            <returns>The new Http transformer</returns>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.GetCachedOutput">
            <summary>
            Base class implementation always returns null
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.CreateTransformerRequestCacheKey">
            <summary>
            Creates a key based on the request that's unique for this type of transformer
            </summary>
            <returns>The key</returns>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.IsCachedOutputAvailable">
            <summary>
            <see cref="T:BBC.Dna.IDnaTransformer"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DnaTransformer.WriteCachedOutput">
            <summary>
            Default implementation of WriteCachedOutput - will simply write the cached output if it's available
            </summary>
        </member>
        <member name="P:BBC.Dna.DnaTransformer.OutputContext">
            <summary>
            Gets the output context
            </summary>
        </member>
        <member name="P:BBC.Dna.DnaTransformer.XsltFileName">
            <summary>
            Property for getting the xsltfile that will be used for doing the transform
            </summary>
        </member>
        <member name="M:BBC.Dna.HtmlTransformer.#ctor(BBC.Dna.IOutputContext)">
            <summary>
            Constructor for the HTML transformer.
            </summary>
            <param name="outputContext">Output context of the request.</param>
        </member>
        <member name="M:BBC.Dna.HtmlTransformer.GetCachedOutput">
            <summary>
            If there exists some cached html output for this request, it is returned.
            If not, null is returns
            </summary>
            <returns>cached output, or null if there isn't any</returns>
        </member>
        <member name="M:BBC.Dna.HtmlTransformer.IsCachedOutputAvailable">
            <summary>
            <see cref="T:BBC.Dna.IDnaTransformer"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.HtmlTransformer.TransformXML(BBC.Dna.IDnaComponent)">
            <summary>
            The main transformation function. This takes a component and then transforms the XML Doc with the required xslt file.
            This function will also check to see if a redirect has been inserted into the tree, and if so execute the redirect without the
            transformation.
            </summary>
            <remarks>Note that only the first redirect will be executed, so first come first served!!!</remarks>
            <param name="component">The IDNACompnent you are transforming</param>
            <returns>true if ok, false if not</returns>
        </member>
        <member name="T:BBC.Dna.ICache">
            <summary>
            The dna Cache Interface. Impliments all calls needed by DNA from the HttpContext.Cache.
            </summary>
        </member>
        <member name="M:BBC.Dna.ICache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <param name="dependency"></param>
            <param name="expiry"></param>
            <param name="duration"></param>
        </member>
        <member name="M:BBC.Dna.ICache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <param name="dependency"></param>
            <param name="expiry"></param>
            <param name="duration"></param>
            <param name="priority"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.ICache.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.ICache.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.IPAddressRequester">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.IPAddressRequester.RequestIPAddress(System.Int32,System.String,System.Int32,BBC.Dna.IInputContext)">
            <summary>
            Request the IP Address of a post.
            </summary>
            <param name="entryId"></param>
            <param name="reason"></param>
            <param name="context"></param>
            <param name="modId"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.IPollFactory">
            <summary>
            Interface representing a PollFactory. Implement this to create polls.
            </summary>
        </member>
        <member name="M:BBC.Dna.IPollFactory.CreatePoll(BBC.Dna.IAppContext,BBC.Dna.IUser)">
            <summary>
            Creates poll entry in the database
            </summary>
            <returns>A poll</returns>
        </member>
        <member name="T:BBC.Dna.IResponse">
            <summary>
            The DNA Response Interface. Impliments all calls needed by DNA from the HttpResponse.
            </summary>
        </member>
        <member name="M:BBC.Dna.IResponse.Redirect(System.String)">
            <summary>
            The redirect method
            </summary>
            <param name="url">The url you want to redirect to</param>
        </member>
        <member name="M:BBC.Dna.IResponse.Write(System.String)">
            <summary>
            The write method
            </summary>
            <param name="s">The string you want to be written to the response</param>
        </member>
        <member name="P:BBC.Dna.IResponse.Output">
            <summary>
            The Output property
            </summary>
        </member>
        <member name="P:BBC.Dna.IResponse.ContentType">
            <summary>
            The content type property
            </summary>
        </member>
        <member name="P:BBC.Dna.IResponse.StatusCode">
            <summary>
            The status code property
            </summary>
        </member>
        <member name="P:BBC.Dna.IResponse.ContentEncoding">
            <summary>
            The content encoding property
            </summary>
        </member>
        <member name="P:BBC.Dna.IResponse.Cookies">
            <summary>
            Gets the cookie collection for the response
            </summary>
        </member>
        <member name="T:BBC.Dna.IServerUtility">
            <summary>
            The dna ServerUtility Interface. Impliments all calls needed by DNA from the HttpServerUtility.
            </summary>
        </member>
        <member name="M:BBC.Dna.IServerUtility.MapPath(System.String)">
            <summary>
            The Map Path method
            </summary>
            <param name="path">The virtual path</param>
            <returns>The physical path</returns>
        </member>
        <member name="M:BBC.Dna.IServerUtility.GetLastError">
            <summary>
            The Get Last Error method
            </summary>
            <returns>The last exception that occured</returns>
        </member>
        <member name="M:BBC.Dna.IServerUtility.HtmlDecode(System.String)">
            <summary>
            The Html Decode method
            </summary>
            <param name="decodeString">The string to decode</param>
            <returns>The decoded result</returns>
        </member>
        <member name="M:BBC.Dna.IServerUtility.Transfer(System.String)">
            <summary>
            The Transfer method
            </summary>
            <param name="path">The path to transfer to</param>
        </member>
        <member name="P:BBC.Dna.IServerUtility.ScriptTimeout">
            <summary>
            The Script Timeout property
            </summary>
        </member>
        <member name="T:BBC.Dna.Link">
            <summary>
            Class to encapsulate Link functionality.
            Creates strandardised Link XML from a resultset.
            Shoul dbe extended to add / edit / delete links .
            </summary>
        </member>
        <member name="M:BBC.Dna.Link.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Link.CreateLinkXML(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            CreateLinkXML from a dataReader.
            Allows standard Link XML to be generated from different resultsets.
            </summary>
            <param name="dataReader"></param>
            <param name="parent"></param>
            <param name="createAuthorXML"></param>
            <param name="createSubmitterXML"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Link.GetUserLinks(System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets the links for a user
            </summary>
            <param name="userID"></param>
            <param name="linkGroup"></param>
            <param name="showPrivate"></param>
            <param name="skip"></param>
            <param name="show"></param>
        </member>
        <member name="M:BBC.Dna.Link.GetUserLinkGroups(System.Int32)">
            <summary>
            Adds User Link Groups
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:BBC.Dna.Link.ClipPageToUserPage(System.String,System.Int32,System.String,System.String,BBC.Dna.IUser,System.Boolean)">
            <summary>
            Clips the given page to the Users user page
            </summary>
            <param name="pageType"> textual type of page we're clipping</param>
            <param name="objectID">ID of page we're clipping</param>
            <param name="linkDescription">Textual description (link text)</param>
            <param name="linkGroup">textual (optional) group containing link (user defined)</param>
            <param name="user">User who's clipping</param>
            <param name="isPrivate">Whether the link is private</param>
        </member>
        <member name="M:BBC.Dna.Link.MoveLinks(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Moves the list of links
            </summary>
            <param name="moveLinkList">list of links to move</param>
        </member>
        <member name="M:BBC.Dna.Link.ChangeLinksPrivacy(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Boolean}})">
            <summary>
            Changes the privacy option of a link
            </summary>
            <param name="linksPrivacyList">List of links to change the privacy of</param>
        </member>
        <member name="M:BBC.Dna.Link.DeleteLinks(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            Delete the list of links
            </summary>
            <param name="deleteLinksList">List of links to delete</param>
            <param name="userID">User ID involved</param>
            <param name="siteID">Site ID involved</param>
        </member>
        <member name="T:BBC.Dna.Component.LinksList">
            <summary>
            LinksList.
            List of user links/clippings/bookmarks created by the user.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.LinksList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the LinksList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.LinksList.CreateLinksList(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Accesses DB and creates Links List.
            Links created by users.
            </summary>
            <param name="userID">The user of the links to get</param>
            <param name="siteID">Site of the links</param>
            <param name="skip">number of links to skip</param>
            <param name="show">number to show</param>
            <param name="showPrivate">Indicates whether private links should be included.</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="T:BBC.Dna.Component.LinkSubscriptionList">
            <summary>
            LinkSubscriptionList.
            List of user links/clippings/bookmarks created by users that the given user has subscribed too.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.LinkSubscriptionList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the LinkSubscriptionsList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.LinkSubscriptionList.CreateLinkSubscriptionList(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Accesses DB and creates Link Subscription List.
            Links created by users that the given user is subscribed too.
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="siteID">Site of the posts</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <param name="showPrivate">Indicates whether private links should be included.</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="T:BBC.Dna.DynamicLists.TableEntry">
            <summary>
            Represents a table and its alias
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.TableEntry.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.TableEntry.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.TableEntry.Equals(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.TableEntry.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.TableEntry.MakeField(System.String)">
            <summary>
            Creates a fully qualified field in the form
            of tablealias.fieldname 
            </summary>
            <param name="FieldName">Name of the field</param>
            <returns>Populated FieldEntry object</returns>
        </member>
        <member name="F:BBC.Dna.DynamicLists.TableEntry._Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.TableEntry._Alias">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.TableEntry._IsSubSelect">
            <summary>
            Indicates whether this rtable is actually a sub select rather than a concrete table
            </summary>
        </member>
        <member name="P:BBC.Dna.DynamicLists.TableEntry.IsSubSelect">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.DynamicLists.TableEntry.Name">
            <summary>
            Name of table .
            </summary>
        </member>
        <member name="P:BBC.Dna.DynamicLists.TableEntry.Alias">
            <summary>
            Alias of table .
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.FieldEntry">
            <summary>
            Represents a fully qualified field
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.FieldEntry.#ctor(BBC.Dna.DynamicLists.TableEntry,System.String)">
            <summary>
            
            </summary>
            <param name="Table"></param>
            <param name="FieldName"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.FieldEntry.#ctor(BBC.Dna.DynamicLists.TableEntry,System.String,System.String,BBC.Dna.DynamicLists.TableEntry,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.FieldEntry.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ConditionEntry">
            <summary>
            Single condition (e.g 1 > 2)
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ConditionEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a condition with two string expressions
            </summary>
            <param name="expressionL">Left hand side expression</param>
            <param name="op">Right hand side expression</param>
            <param name="expressionR">operator</param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ConditionEntry.#ctor(BBC.Dna.DynamicLists.FieldEntry,System.String,System.String)">
            <summary>
            Constructs a condition with a field and a string expression
            Using this overload allows clients to identify fields. This is
            how Select fields are identified by filters
            </summary>
            <param name="fieldL"></param>
            <param name="op"></param>
            <param name="expressionR"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ConditionEntry.#ctor(BBC.Dna.DynamicLists.FieldEntry,System.String,BBC.Dna.DynamicLists.FieldEntry)">
            <summary>
            Constructs a condition with a field and a string expression
            Using this overload allows clients to identify fields from values. 
            This is how Select fields are identified by filters
            </summary>
            <param name="fieldL"></param>
            <param name="op"></param>
            <param name="fieldR"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ConditionEntry.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ConditionEntry.Equals(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ConditionEntry.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ConditionEntry.expressionL">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ConditionEntry.op">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ConditionEntry.expressionR">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ConditionEntry.fieldL">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ConditionEntry.fieldR">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.InnerJoinEntry">
            <summary>
            Holds information about an inner join (table + conditions) 
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.InnerJoinEntry.#ctor(BBC.Dna.DynamicLists.TableEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.InnerJoinEntry.#ctor(BBC.Dna.DynamicLists.TableEntry,BBC.Dna.DynamicLists.ConditionEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.InnerJoinEntry.Equals(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.InnerJoinEntry.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.InnerJoinEntry.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.InnerJoinEntry.JoinTable">
            <summary>
            Table+Alias of table to join to
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.InnerJoinEntry.Conditions">
            <summary>
            inner join conditions. 
            Populated by derived classes with ConditionEntry objects
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterBase">
            <summary>
            Base class for list filters
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterBase.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            Represents a single filter for the list
            </summary>
            <param name="ListType">Valid list type ("ARTICLES", "FORUMS", etc...)</param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterBase.GetWhereClause">
            <summary>
            Constructs where clause in the form
            "((x == y) AND (d == x))"
            </summary>
            <returns>SQL snippet for where clause</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterBase.IsSupported">
            <summary>
            Tells whether this filter is supported for the ListType
            </summary>
            <returns>true if supported, false otherwise</returns>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListFilterBase.ListType">
            <summary>
            List type class
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListFilterBase.InnerJoins">
            <summary>
            Collection of inner joins. Populated by derived classes.
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListFilterBase.WhereConditions">
            <summary>
            Collection of WHERE clause conditions. They will
            be separated by AND. Populated by derived classes
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterModeration">
            <summary>
            In most cases moderated items can be removed when we inner join in
            the ListType class. For all other cases, this filter is needed
            If we wanted moderation items to be optional, then all moderation conditions
            will have to be taken out of ListType class and put into here
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterModeration.IsSupported">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterModeration.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterSiteID">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterSiteID.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterSiteID.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterVoteCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterVoteCount.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterVoteCount.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterBookmarkCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterBookmarkCount.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterBookmarkCount.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterRating">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterRating.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterRating.IsSupported">
            <summary>
            Only supported for ARTICLES
            </summary>
            <returns>true if supported. false otherwise</returns>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterCategories">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterCategories.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterCategories.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterKeyPhrases">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterKeyPhrases.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Collections.Generic.List{BBC.Dna.Component.Phrase})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterKeyPhrases.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterSignificance">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterSignificance.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="ListType"></param>
            <param name="Score"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterSignificance.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterDateUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterDateUpdated.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="ListType"></param>
            <param name="DaysAgo"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterDateUpdated.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterDateCreated">
            <summary>
            Filter for "Date Created is more recent than..."
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterDateCreated.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterDateCreated.IsSupported">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterArticleType">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterArticleType.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterArticleType.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterArticleStatus">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterArticleStatus.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterArticleStatus.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterArticleDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterArticleDate.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterArticleDate.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterThreadType">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterThreadType.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterThreadType.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterUIDPrefix">
            <summary>
            Allows a uid prefix to be spcified to filter comment forums .
            WHERE uid LIKE @prefix%
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterUIDPrefix.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterUIDPrefix.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListFilterEventDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterEventDate.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListFilterEventDate.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByBase">
            <summary>
            Filter for ORDERBY clause. Derive from this to create
            new ORDER BY clauses
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByBase.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            Constructs an OrderBy filter. Only one of these should be needed.
            </summary>
            <param name="ListType">Instance of ListTypeBase derived class</param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByBase.IsSupported">
            <summary>
            Tells whether orderby filter is supported for ListType
            </summary>
            <returns></returns>
        </member>
        <member name="F:BBC.Dna.DynamicLists.OrderByBase.ListType">
            <summary>
            Type of list we're working with
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.OrderByBase.OrderByField">
            <summary>
            Orderby field. Populated by derived classes
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.OrderByBase.InnerJoins">
            <summary>
            Collection of inner joins required for orderby. 
            Populated by derived classes.
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByRating">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByRating.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByRating.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByBookmarkCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByBookmarkCount.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByBookmarkCount.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByCommentForumPostCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByCommentForumPostCount.#ctor(BBC.Dna.DynamicLists.ListTypeBase,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByCommentForumPostCount.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByVoteCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByVoteCount.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByVoteCount.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByEventDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByEventDate.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByEventDate.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByDateCreated">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByDateCreated.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByDateCreated.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderByDateUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByDateUpdated.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderByDateUpdated.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.OrderBySignificance">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderBySignificance.#ctor(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.OrderBySignificance.IsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeBase">
            <summary>
            Derive from this class to create a new list type
            Override abstract methods to return correct data for list type
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetInnerJoins">
            <summary>
            Return inner joins required for this list type
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetSelectFields">
            <summary>
            Return fully qualified select fields for this list type
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetSelectTable">
            <summary>
            Override to get select table for this list type
            </summary>
            <returns>select table</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetListTypeName">
            <summary>
            Override to return name of list type, e.g. "ARTICLES" or "CLUBS"
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetItemXmlResourceName">
            <summary>
            Override to get name of xml resource for list type. return null
            if item has no xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetSiteIDField">
            <summary>
            Override to return fully qualified name of field from
            where to get the SiteID
            </summary>
            <returns>tablealias.fieldname or null if no siteid</returns>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListTypeBase.ItemXml">
            <summary>
            XML doc to dictate the final format of dynamic list items. Maps
            field names to xml element/attrtibutes
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListTypeBase.SelectFields">
            <summary>
            Fields to go into select list. Field aliases
            must be generated from the item index in the collection
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.GetXml">
            <summary>
            Get item XML schema for this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddFieldID(BBC.Dna.DynamicLists.FieldEntry)">
            <summary>
            Adds item/@itemid field
            </summary>
            <param name="field">Name of numeric id field</param>
            <returns>same as AddField</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddFieldDateCreated(BBC.Dna.DynamicLists.FieldEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddFieldDateUpdated(BBC.Dna.DynamicLists.FieldEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddFieldTitle(BBC.Dna.DynamicLists.FieldEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddFieldCreator(BBC.Dna.DynamicLists.TableEntry)">
            <summary>
            Adds creator block
            </summary>
            <param name="UsersTable">Table from where to pull user fields</param>
            <returns>Field alias of IDField, or null if failed</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddField(BBC.Dna.DynamicLists.FieldEntry,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddField(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddValue(System.String,System.String)">
            <summary>
            Adds a hardcoded value to xml
            </summary>
            <param name="value">value</param>
            <param name="xpath">xpath</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddFieldorValue(System.String,System.String)">
            <summary>
            Adds a field or hardcoded value
            </summary>
            <param name="name">fully qualified field name or a value</param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeBase.AddField(BBC.Dna.DynamicLists.TableEntry,System.String,System.String)">
            <summary>
            Adds a field to the select list and populates xpath with an automatically
            generated field alias.
            </summary>
            <param name="table">Table where field comes from. If null, SelectTable is used.</param>
            <param name="name">Field name</param>
            <param name="xpath">XPath expression to populate with field alias</param>
            <returns>Field alias, or null if failed to add field (bad xpath?)</returns>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeArticles">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeArticles.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeArticles.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeArticles.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeArticles.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeArticles.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeArticles.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeClubs">
            <summary>
            Select fields and inner joins for Clubs list
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeClubs.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeClubs.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeClubs.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeClubs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeClubs.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeClubs.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeForums">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeForums.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeForums.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeForums.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeForums.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeForums.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeForums.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeThreads">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeThreads.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeThreads.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeThreads.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeThreads.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeThreads.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeThreads.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeCommentForums">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCommentForums.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCommentForums.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCommentForums.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCommentForums.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCommentForums.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCommentForums.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeCategories">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCategories.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCategories.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCategories.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCategories.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCategories.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCategories.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeUsers">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeUsers.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeUsers.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeUsers.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeUsers.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeUsers.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeUsers.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeTopicForums">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeTopicForums.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeTopicForums.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeTopicForums.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeTopicForums.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeTopicForums.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeTopicForums.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.GetSiteIDField">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.GetItemXmlResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.GetListTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.AddFieldAuthor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.GetSelectTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListTypeCampaignDiaryEntries.GetInnerJoins">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.ListDefinition">
            <summary>
            - Loads list definition XML
            - Create SQL out of list definition
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlVersion">
            <summary>
            Xml Version of Dynamic List Definition.
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlListName">
            <summary>
            Name (string id) of list
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlType">
            <summary>
            List type
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlArticleType">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlStatus">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlRating">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlScore">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlLastUpdated">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlDateCreated">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlArticleStartDate">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlArticleEndDate">
            <summary>
            Filters
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlCategories">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlKeyPhrases">
            <summary>
            
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlOrderBy">
            <summary>
            OrderBy
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlLength">
            <summary>
            List length (TOP x)
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlVoteCount">
            <summary>
            Number of votes
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlBookmarkCount">
            <summary>
            Bookmark count .
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlThreadType">
            <summary>
            Type of thread ('notice', 'event')
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlEventDate">
            <summary>
            Number of days
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.SiteURLName">
            <summary>
            Name of site this list is for
            </summary>
        </member>
        <member name="F:BBC.Dna.DynamicLists.ListDefinition.xmlUIDPrefix">
            <summary>
            UID prefix for Comment Forums.
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListDefinition.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListDefinition.GetListType(System.String)">
            <summary>
            Creates appropriate list type
            </summary>
            <returns>A class derived from ListTypeBase</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListDefinition.CreateListFilterCollection(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            Creates array list of list filters based on xml input parameters
            </summary>
            <returns>ArrayList of ListFilterBase derived classes</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListDefinition.CreateOrderByClass(BBC.Dna.DynamicLists.ListTypeBase)">
            <summary>
            Creates order by class for type of list and sort option (xmlOrderBy)
            </summary>
            <param name="ListType"></param>
            <returns>New instance of OrderBy class, or null is no such orderby exists</returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.ListDefinition.ToSQL">
            <summary>
            Creates and returns SQL representation of list definition
            </summary>
        </member>
        <member name="T:BBC.Dna.Location">
            <summary>
            Class to store all Location Data
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.LocationID">
            <summary>
            Accessor for LocationID
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.Latitude">
            <summary>
            Accessor for Latitude
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.Longitude">
            <summary>
            Accessor for Longitude
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.SiteID">
            <summary>
            Accessor for SiteID
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.CreatedDate">
            <summary>
            Accessor for Created Date
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.Type">
            <summary>
            Accessor for Type
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.Title">
            <summary>
            Accessor for Title
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.Description">
            <summary>
            Accessor for Description
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.OwnerID">
            <summary>
            Accessor for OwnerID
            </summary>
        </member>
        <member name="P:BBC.Dna.Location.ZoomLevel">
            <summary>
            Accessor for ZoomLevel
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ManageRoute">
            <summary>
            Summary of the ManageRoute Page object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ManageRoute.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the ManageRoute component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ManageRoute.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ManageRoute.TryGetPageParams(System.String@,BBC.Dna.Route@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="action">The action to apply to the route.</param>
            <param name="route">Route object containg a list of locations</param>
        </member>
        <member name="M:BBC.Dna.Component.ManageRoute.TryCreateUpdateViewRoute(System.String,BBC.Dna.Route)">
            <summary>
            Method called to create / update or just view the route. 
            </summary>
            <param name="action">The action to apply to the route.</param>
            <param name="route">Route object containg a list of locations</param>
        </member>
        <member name="M:BBC.Dna.Component.ManageRoute.GetRoutePageXml(System.String,BBC.Dna.Route)">
            <summary>
            Calls the stored procedure to get the Route
            </summary>
            <param name="action">The action to apply to the route.</param>
            <param name="routeData">Route object containg a list of locations</param>
        </member>
        <member name="M:BBC.Dna.Component.ManageRoute.GenerateMangeRouteXml(BBC.Dna.Data.IDnaDataReader,System.String)">
            <summary>
            Generates the XML for the Route
            </summary>
            <param name="dataReader">The recordset of location data</param>
            <param name="action">The action to apply to the route.</param>
        </member>
        <member name="T:BBC.Dna.Component.MediaAsset">
            <summary>
            Class handling the building of the MediaAsset page and it's associated requests
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for the Media Asset class
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.ProcessRequest">
            <summary>
            Called by the dna framework so that the component can have a chance at processing the request
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetArticlesAssets(System.Int32,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Public method to allow the caller to get the media asset info linked
            	to an article's h2g2id,
            	it is not a failure if no media asset id is retrieved ie no record exists
            </summary>
            <param name="H2G2ID"></param>
            <param name="mediaAssetID"></param>
            <param name="mimeType"></param>
            <param name="hidden"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.ProcessShowFTPUploadQueue">
            <summary>
            Processes the showftpuploadqueue action to view a
            	list the status of the ftp upload queue
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.RemoveLinkedArticleAsset(System.Int32)">
            <summary>
            Public method to allow the caller to remove the media asset linked
            	to an article's h2g2id
            </summary>
            <param name="H2G2ID"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetUsersMediaAssetsSP(System.Int32)">
            <summary>
            Gets the correct get users media assets depending on the content type
            </summary>
            <param name="contentType"></param>
            <returns>The SP name to call</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetUsersArticlesWithMediaAssetsSP(System.Int32)">
            <summary>
            Gets the correct get users articles with assets depending on the content type
            </summary>
            <param name="contentType"></param>
            <returns>The SP name to call</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetMediaAssetSP(System.Int32)">
            <summary>
            Gets the correct get media asset SP depending on the content type
            </summary>
            <param name="contentType"></param>
            <returns>The SP name to call</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.ProcessShowUsersArticlesWithMediaAssets(BBC.Dna.MediaAssetParameters)">
            <summary>
            Generate the XML page to show the as particular users Media Assets
            </summary>
            <param name="mediaAssetParams"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GenerateMediaAssetXML(BBC.Dna.Data.IDnaDataReader,BBC.Dna.MediaAssetParameters)">
            <summary>
            Generates the XML for a call to view a particular media asset
            </summary>
            <param name="dataReader"></param>
            <param name="mediaAssetParams"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.RemoveLinkedArticlesAssets(System.Int32)">
            <summary>
            Removes the the mediaasset ids for a given article (H2G2ID)
            </summary>
            <param name="H2G2ID"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.CheckUsersFileUploadLimit(System.Int32,System.Int32,System.Int32@,System.Boolean@,System.DateTime@)">
            <summary>
            Calls the stored procedure to check the users upload limit 
                   against the new file size (in essence whther to allow the upload or not)
            </summary>
            <param name="fileLength"></param>
            <param name="currentUserID"></param>
            <param name="totalUploadSize"></param>
            <param name="withinLimit"></param>
            <param name="nextLimitStartDate"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.ExceedsUploadLimitErrorInfo(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Generates the XML for the Media Asset object in the case
            of the user exceeding the upload limit
            </summary>
            <param name="fileLength">The length of the file</param>
            <param name="totalUploadSize">Total Upload Size</param>
            <param name="nextLimitStartDate">Start of the next upload limit period</param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetImageFormat(System.String,System.String@)">
            <summary>
            Selects the correct image suffix from the mimeType
            </summary>
            <param name="mimeType"></param>
            <param name="fileSuffix"></param>
            <returns>Whether the type is supported</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetAudioSuffix(System.String,System.String@)">
            <summary>
            Selects the correct audio suffix from the mimeType
            </summary>
            <param name="mimeType"></param>
            <param name="fileSuffix"></param>
            <returns>Whether the type is supported</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetVideoSuffix(System.String,System.String@)">
            <summary>
            Selects the correct video suffix from the mimeType
            </summary>
            <param name="mimeType"></param>
            <param name="fileSuffix"></param>
            <returns>Whether the type is supported</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.QueueMediaAssetForModeration(System.Int32,System.Int32)">
            <summary>
            Calls the stored procedure to add the specified Asset onto the
            	Moderation Queue
            	NB - Deciding to now do this in the C# service after the asset has been
            	processed and actually is available to be moderated/looked at.
            	This may be needed at a later date to re-queue the media asset.
             Re-added in port for completeness
            </summary>
            <param name="mediaAssetID"></param>
            <param name="siteID"></param>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.FixMimeType(System.String,System.String@)">
            <summary>
            Function to transpose dodgy mimetypes from the skin into the correct one.
                   Only correct mimetypes to be stored in the database
            </summary>
            <param name="inMimeType"></param>
            <param name="fixedMimeType"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.MakeXml(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Makes the XML for a Media Asset from the datareader
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.MakeXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlElement)">
            <summary>
            Makes the XML for a Media Asset from the datareader and attache it to the parent element
            </summary>
            <param name="dataReader"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GenerateFTPDirectoryString">
            <summary>
            Method that will produce the FTP directory path from the Media Asset ID
            This is for the limit of files within a unix folder to function well
            we basically take the ID and divide it a number of times to get
            sub directories
            </summary>
            <returns>FTP path</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GenerateFTPDirectoryString(System.Int32)">
            <summary>
            Method that will produce the FTP directory path from a given Media Asset ID
            This is for the limit of files within a unix folder to function well
            we basically take the ID and divide it a number of times to get
            sub directories
            </summary>
            <returns>FTP path</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetIDFromLink(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Function to generate the ID from the URL Link checks against a YouTube or a Google Video Link
            </summary>
            <param name="inLink">The url to check</param>
            <param name="outID">The specific ID for the type for the site from the url</param>
            <param name="outType">The site the url and id is for</param>
            <param name="outFlickrFarmPath">Will contain the first section of the flickr link with the farm number</param>
            <param name="outFlickrServer">Will contain the server number of the second part of the link</param>
            <param name="outFlickrID">Will contain the Flickr image ID</param>
            <param name="outFlickrSecret">Will contain the Flickr Secret number</param>
            <param name="outFlickrSize">Will contain the Flickr size parameter</param>
            <remarks> http://farm2.static.flickr.com/1097/1476511645_99659656ec_t.jpg</remarks>
            <returns>Whether we have a known link part</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.GetExternalIDFromLink(System.String,System.String,System.String@)">
            <summary>
            Function to generate the External site ID from the URL Link and the external site prefix
            </summary>
            <param name="inLink">The raw link from the website</param>
            <param name="inPreFix">Extract the site info</param>
            <param name="outExternalID">Get the id of our specific object</param>
            <returns>Whether we can find an external link</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.TryGetExternalFlickrIDFromLink(System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Function to generate the Flickr External image info from the Flick image Link
            </summary>
            <param name="inLink">The raw link from the website</param>
            <param name="outFlickrFarmPath">Will contain the first section of the flickr link with the farm number</param>
            <param name="outFlickrServer">Will contain the server number of the second part of the link</param>
            <param name="outFlickrID">Will contain the Flickr image ID</param>
            <param name="outFlickrSecret">Will contain the Flickr Secret number</param>
            <param name="outFlickrSize">Will contain the Flickr size parameter</param>
            <remarks> http://farm2.static.flickr.com/1097/1476511645_99659656ec_t.jpg</remarks>
            <remarks> [Server farm path]/[server]/[ID]_[Secret]_[size].jpg</remarks>
            <returns>Whether we can find we have found a correctly formed flickr link</returns>
        </member>
        <member name="M:BBC.Dna.Component.MediaAsset.AddPollXml(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlNode)">
            <summary>
            AddPollXml - Delegates responsibility of producing standard Poll Xml to the Poll Class.
            Only produces Poll Xml where a valid Poll exists in the resultset.
            </summary>
            <param name="dataReader">Record set containing the data</param>
            <param name="parent">Parent node to add the xml to</param>
        </member>
        <member name="T:BBC.Dna.Component.MemberList">
            <summary>
            Member List - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Member List component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.#ctor(BBC.Dna.IInputContext,BBC.Dna.Data.IDnaDataReaderCreator,BBC.Dna.Utils.IDnaDiagnostics)">
            <summary>
            Overloaded constructor that takes in the context, DnaDataReaderCreator and DnaDiagnostics
            </summary>
            <param name="context"></param>
            <param name="dnaReaderCreator"></param>
            <param name="dnaDiagnostics"></param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.TryCreateMemberList">
            <summary>
            Method called to try and create Member List, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <returns>Whether the search has succeeded with out error</returns>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.TryUpdateMemberList(System.String)">
            <summary>
            Method called to try and update the Member from the Member List, 
            gathers the input params and updates the correct records in the DB 
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.ResetNickNamesForUsers(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="userIDs"></param>
            <param name="siteIDs"></param>
            <param name="userNames"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.TryGetUserSiteList(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            
            </summary>
            <param name="userIDs"></param>
            <param name="siteIDs"></param>
            <param name="userNames"></param>
            <param name="deactivatedUsers"></param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.TryGetAction(System.String@)">
            <summary>
            Gets the action param if there is one
            </summary>
            <param name="action">The action param string</param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.GenerateMemberListPageXml(System.Int32,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="userSearchType"></param>
            <param name="searchText"></param>
            <param name="checkAllSites"></param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.CreateRetrieveTwitterUser(System.String,BBC.Dna.Data.IDnaDataReader)">
            <summary>
            This method creates and maps the twitter user to a DNA User ID and retrieve the created twitter user details
            </summary>
            <param name="searchText"></param>
            <param name="dataReader"></param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.RetrieveTweetUserDetails(System.String)">
            <summary>
            Retrieve the tweet user details from twitter
            </summary>
            <param name="twitterScreenName"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.CreateRetrieveTwitterUser(System.String)">
            <summary>
            Public method to retrieve the twitter user and map to a DNA account
            </summary>
            <param name="twitterScreenName"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.GenerateMemberListXml(BBC.Dna.Data.IDnaDataReader,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <param name="userSearchType"></param>
            <param name="searchText"></param>
            <param name="checkAllSites"></param>
            <param name="twitterAPIException"></param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.GetMemberListStoredProcedureName(System.Int32)">
            <summary>
            Gets the name of the stored procedure to call from the passed in parameters
            </summary>
            <param name="userSearchType">The type of method used to search for the users</param>
            <returns>String containing the name of the storedprocedure to call</returns>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.GetMemberListCachedXml(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the XML from cache
            </summary>
            <param name="userSearchType">Method to search for users </param>
            <param name="userID">User ID to search for.</param>
            <param name="userEmail">User email to search for.</param>
            <param name="userName">User name to look for.</param>
            <param name="userIPAddress">User ip address to search for.</param>
            <param name="userBBCUID">User bbcuid to look for.</param>
            <param name="loginName">Login name to look for.</param>
            <param name="checkAllSites">Whether to bring back results for all sites</param>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.GetPrefStatusValueFromDescription(System.String,System.Int32@)">
            <summary>
            Converts form string into prefstatus and hide all posts values
            </summary>
            <param name="newPrefStatusDescription"></param>
            <param name="newPrefStatusValue"></param>
        </member>
        <member name="M:BBC.Dna.Component.MemberList.GetPrefStatusDurationDisplayText(System.String)">
            <summary>
            Returns the text to display for a given duration in seconds
            </summary>
            <param name="prefStatusDuration">The pref status duration value text</param>
            <returns>The associated pref status duration</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoreArticleSubscriptions">
            <summary>
            Summary of the More Article Subscriptions Page object, holds the list of articles written by users that have been subscribed to.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreArticleSubscriptions component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.TryCreateMoreArticleSubscriptions(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method called to try to create the TryCreateMoreArticleSubscriptions, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <param name="skipCache">Whether to skip the cache read and always create the page.</param>
            <returns>Whether the search has suceeded with out error.</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.GenerateMoreArticleSubscriptionsPageXml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calls the User Subscription list class to generate the most recent UserSubscriptions
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.GetCacheName(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Cache name 
            </summary>
            <param name="userID">The user requesting their subscriptions</param>
            <param name="siteID">The site the user is getting their subscriptions from</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreArticleSubscriptions.GetMoreArticleSubscriptionsCachedXml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the XML from cache
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoreComments">
            <summary>
            Summary of the MoreComment Page object, holds the list of comments for a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreComments.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreComments component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreComments.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreComments.TryCreateMoreComments">
            <summary>
            Method called to try to create the TryCreateMoreComments, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <returns>Whether the search has suceeded with out error</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoreComments.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            
        </member>
        <member name="M:BBC.Dna.Component.MoreComments.GenerateMoreCommentsPageXml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calls the comment list class to generate the most recent comments
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreComments.GetMoreCommentsCachedXml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the XML from cache
            </summary>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoreLinks">
            <summary>
            Summary of the More User Subscriptions Page object, holds the list of User Subscriptions of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinks.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreLinks component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinks.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinks.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="userID">The user of the links to get</param>
            <param name="skip">number of links to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the links.</param>
            <param name="linkID">ID of the link for the action.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinks.TryUpdateLink(System.String,System.Int32,System.Int32)">
            <summary>
            Method called to delete the links. 
            </summary>
            <param name="action">The action to apply to the links.</param>
            <param name="userID">The user of the links to get</param>
            <param name="linkID">ID of the link for the action.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinks.TryCreateMoreLinksXML(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method called to try to create the TryCreateMoreLinks XML from the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <param name="userID">The user of the links to get</param>
            <param name="skip">number of links to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the links.</param>
            <param name="linkID">ID of the link for the action.</param>
            <returns>Whether the search has suceeded with out error.</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinks.GenerateMoreLinksPageXml(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Calls the LinksList class to generate the most recent Links
            </summary>
            <param name="userID">The user of the links to get</param>
            <param name="skip">number of links to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the links.</param>
            <param name="linkID">ID of the link for the action.</param>
        </member>
        <member name="T:BBC.Dna.Component.MoreLinkSubscriptions">
            <summary>
            Summary of the More User Subscriptions Page object, holds the list of User Subscriptions of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinkSubscriptions.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreUserSubscriptions component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinkSubscriptions.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreLinkSubscriptions.TryCreateMoreLinkSubscriptionsXML(System.Int32,System.Int32,System.Int32)">
            <summary>
            Method called to try to create the TryCreateMoreUserSubscriptions, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <param name="userID">The user of the subscription links to get</param>
            <param name="skip">number of links to skip</param>
            <param name="show">number to show</param>
            <returns>False on Error.</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoreRestrictedUsers">
            <summary>
            Summary of the More Restricted Users Page object, holds the list of Restricted Users for a given site
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreRestrictedUsers.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreRestrictedUsers component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreRestrictedUsers.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreRestrictedUsers.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="siteID">The site ID to get the restricted user list for</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <param name="userTypes">The type of restricted users to bring back Banned and/or Premoderated</param>
            <param name="searchType">The type of search to perform</param>
            <param name="letter">The beginning letter of the restricted users email to restrict to</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreRestrictedUsers.GenerateMoreRestrictedUsersPageXml(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Calls the Restricted Users list class to generate the Restricted Users
            </summary>
            <param name="siteID">The site id to get the restricted user list for 0 is all sites</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <param name="userTypes">The type of restricted users to bring back Banned and/or Premoderated</param>
            <param name="searchType">The type of search to perform</param>
            <param name="letter">The beginning letter of the restricted users email to restrict to</param>
        </member>
        <member name="T:BBC.Dna.Component.MoreSubscribingUsers">
            <summary>
            Class handling the building of the MSU page
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreSubscribingUsers.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for page builder
            </summary>
            <param name="context">Input context for this request</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreSubscribingUsers.ProcessRequest">
            <summary>
            Process request to MSU page
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.MoreUserSubscriptions">
            <summary>
            Summary of the More User Subscriptions Page object, holds the list of User Subscriptions of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MoreUserSubscriptions component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of subscriptions to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the subscriptions.</param>
            <param name="subscribedToID">ID of the user for the subscription action.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.TryUpdateUserSubscription(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Method called to update the user subscriptions. 
            </summary>
            <param name="action">The action to apply to the subscriptions.</param>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="subscribedToID">ID of the user for the subscription action.</param>
            <param name="skipCache">ref out parameter whether to skip the cache read.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.TryCreateMoreUserSubscriptionsXML(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Method called to try to create the TryCreateMoreUserSubscriptions, gathers the input params, 
            gets the correct records from the DB and formulates the XML
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of subscriptions to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the subscriptions.</param>
            <param name="subscribedToID">ID of the user for the subscription action.</param>
            <param name="skipCache">Whether to skip the cache read and always create the page.</param>
            <returns>Whether the search has suceeded with out error.</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.GenerateMoreUserSubscriptionsPageXml(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Calls the User Subscription list class to generate the most recent UserSubscriptions
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of subscriptions to skip</param>
            <param name="show">number to show</param>
            <param name="action">The action to apply to the subscriptions.</param>
            <param name="subscribedToID">ID of the user for the subscription action.</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.GetCacheName(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Cache name 
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of subscriptions to skip</param>
            <param name="show">number to show</param>
        </member>
        <member name="M:BBC.Dna.Component.MoreUserSubscriptions.GetMoreUserSubscriptionsCachedXml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the XML from cache
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="skip">number of subscriptions to skip</param>
            <param name="show">number to show</param>
            <returns>Whether we have got the XML from the File Cache</returns>
        </member>
        <member name="T:BBC.Dna.Component.MoveThread">
            <summary>
            The move thread object. Used for moving threads between forums.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The context that the object will be created for</param>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.TryGetMoveToForumID">
            <summary>
            Helper method that tries to find the forum id to move to. This method copes with the old skins.
            New code should look for 'MoveToForumID' and the old system uses 'DestinationID'.
            The DestinationID comes through with a 'F' on the front, so we trim that.
            </summary>
            <returns>The forumID if we find it. 0 otherwise</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.CheckForMoveActionExists">
            <summary>
            Helper method that checks to see if we've been given the action to move a thread.
            This method is designed to cope with the old skins/system
            </summary>
            <returns>True if it was found, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.AddMoveThreadDetails">
            <summary>
            Gets and adds the thread mod details to the XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.MoveThreadToForum(System.Int32)">
            <summary>
            Moves the given thread to the requested forum
            </summary>
            <param name="forumID">The id of the forum you want to move the thread to</param>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.PostToEndOfThread">
            <summary>
            Posts to the end of the thread saying that the thread has been move.
            Has optional moderators comment if PostContent URL param is used.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.MoveThread.SetAvailableFunctions(System.Boolean,System.Boolean)">
            <summary>
            Adds the available functions to the xml. This is a backwards compatability
            function so that when we're rendering using xslt, we can use the existing skins
            </summary>
            <param name="move">A flag to state that the move function is available</param>
            <param name="undo">A flag to state that the undo function is available</param>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.ThreadSubject">
            <summary>
            Get property for the threads subject.
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.ThreadID">
            <summary>
            Get property for the threads ID we're being asked to move
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.ThreadModID">
            <summary>
            Get property for the threads ModID we're being asked to move.
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.OldForumID">
            <summary>
            Get property for the old forum id the thread belonged to.
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.OldForumTitle">
            <summary>
            Get property for the old forum title the thread belonged to.
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.CurrentForumID">
            <summary>
            Get property for the current forum id the thread belongs to.
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.CurrentForumTitle">
            <summary>
            Get property for the current forum title the thread belongs to.
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.MoveThread.HadErrors">
            <summary>
            Get property That states if we had errors when we processed the request
            Only available after ProcessRequest() has been called
            </summary>
        </member>
        <member name="T:BBC.Dna.NameSpaceItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.NameSpaceItem.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="P:BBC.Dna.NameSpaceItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.NameSpaceItem.ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.NameSpaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.NameSpaces.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.NameSpaces.GetNameSpacesForSite(System.Int32)">
            <summary>
            
            </summary>
            <param name="siteid"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.NameSpaces.AddNameSpaceForSite(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="siteid"></param>
            <param name="newNameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.NameSpaces.RenameNameSpaceForSite(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="siteid"></param>
            <param name="nameSpaceID"></param>
            <param name="newName"></param>
        </member>
        <member name="M:BBC.Dna.NameSpaces.RemoveNameSpaceForSite(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="siteid"></param>
            <param name="nameSpaceID"></param>
        </member>
        <member name="M:BBC.Dna.NameSpaces.GetPhrasesForNameSpaceItem(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="siteID"></param>
            <param name="nameSpaceID"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.PageUI">
            <summary>
            The page UI class. Used to put the users page preferences into the current page
            </summary>
        </member>
        <member name="M:BBC.Dna.PageUI.#ctor(System.Int32)">
            TODO: replace with BBC.Dna.Objects.PageUi version
             <summary>
             Default constructor
             </summary>
             <param name="userID">The id of the user you want to get the page UI for</param>
        </member>
        <member name="M:BBC.Dna.PageUI.SetElementVisibility(System.String,System.Boolean,System.String)">
            <summary>
            Sets the visible state and link hint for a given UI Element
            </summary>
            <param name="elementName">The name of the UI Element yoiu want to update</param>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want to update this.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetSiteHomeVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetDontPanicVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetSearchVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetMyHomeVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetRegisterVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetMyDetailsVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetLogoutVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetEditPageVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetRecommendEntryVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetEntrySubbedVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.PageUI.SetDiscussVisibility(System.Boolean,System.String)">
            <summary>
            Sets the visibility for the site home element.
            </summary>
            <param name="visible">The visibility state you want to set the element to</param>
            <param name="linkHint">The new link hint for the element. Set this to null if you dont want it updating.</param>
            <returns>True if the element was updated, false if not</returns>
        </member>
        <member name="M:BBC.Dna.ParameterTracker.TrackParam(System.String,System.String)">
            <summary>
            Track an access of a named parameter
            </summary>
            <param name="paramname">Name of the parameter being accessed</param>
            <param name="description">Description of the parameter</param>
        </member>
        <member name="T:BBC.Dna.Component.Phrase">
            <summary>
            Class to store the Phrase Details
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Phrase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Phrase.#ctor(System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="phrase">The phrase for this phase</param>
            <param name="nameSpace">The namespace the phase will live in</param>
        </member>
        <member name="M:BBC.Dna.Component.Phrase.AddPhraseXml(System.Xml.XmlElement)">
            <summary>
            Accessor for the Phrase
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Phrase.NameSpace">
            <summary>
            Accessor for the NameSpace
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Phrase.PhraseName">
            <summary>
            Accessor for the Phrase
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Poll">
            <summary>
            Base class to perform core poll functions. Derive from this class to create new poll type and customize behaviour of poll. 
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Poll.#ctor(BBC.Dna.IAppContext,BBC.Dna.IUser)">
            <summary>
            Default constructor.
            </summary>
            <param name="context">The app context the poll was created in</param>
            <param name="viewingUser">The current viewing user</param>
        </member>
        <member name="F:BBC.Dna.Component.Poll._appContext">
            <summary>
            The app context that the poll was created in. Used to create data readers
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._viewingUser">
            <summary>
            The viewing user for the request
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._allowAnonymousVoting">
            <summary>
            Do we allow anonymous voting
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._pollID">
            <summary>
            Poll Id
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._responseMax">
            <summary>
            Max response
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._responseMin">
            <summary>
            Min response
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._results">
            <summary>
            Results of poll voting
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._stats">
            <summary>
            Poll stats 
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._currentUserVote">
            <summary>
            Current user vote
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._hidden">
            <summary>
            Hidden flag
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._type">
            <summary>
            Type of poll
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll._lastErrorCode">
            <summary>
            Last error code field
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Poll.GetRootElementName">
            <summary>
            Returns name of xml root element
            </summary>
            <returns>Root element's name</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.SetResponseMinMax(System.Int32,System.Int32)">
            <summary>
            Set Response Range
            </summary>
            <param name="responseMin">Min response</param>
            <param name="responseMax">Max response</param>
        </member>
        <member name="M:BBC.Dna.Component.Poll.CreatePoll">
            <summary>
            Creates a poll
            </summary>
            <returns>True if successfull, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.Vote(System.Int32)">
            <summary>
            Register a Vote  
            </summary>
            <param name="response">The response value to the vote</param>
            <returns>True if successful else false</returns>
            <remarks>Must be implemented</remarks>
        </member>
        <member name="M:BBC.Dna.Component.Poll.RemoveVote">
            <summary>
            Remove a vote
            </summary>
            <returns>True if successful else false</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.LinkPollWithItem(System.Int32,BBC.Dna.Component.Poll.ItemType)">
            <summary>
            Link a poll with an item (e.g. article, club etc...)
            </summary>
            <param name="itemID">Id of item</param>
            <param name="itemType">Type of item</param>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.LinkPoll(System.Int32,BBC.Dna.Component.Poll.ItemType)">
            <summary>
            Create link entity in database
            </summary>
            <param name="itemID">ID of item poll is to be linked to</param>
            <param name="itemType">Item type</param>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.HidePoll(System.Boolean)">
            <summary>
            Hides / Unhides poll
            </summary>
            <param name="hide">Hide boolean: True = hide, False = unhide</param>
            <returns>Success</returns>
            <remarks>The poll will be hidden for all items that it is attached to</remarks>
        </member>
        <member name="M:BBC.Dna.Component.Poll.HidePoll(System.Boolean,System.Int32,BBC.Dna.Component.Poll.ItemType)">
            <summary>
            Hides / Unhides poll
            </summary>
            <param name="hide">Hide boolean: True = hide, False = unhide</param>
            <param name="itemID">ID of item this poll is attached to</param>
            <param name="itemType">Type of item this poll is attached to</param>
            <returns>Success</returns>
            <remarks>If both itemID and itemType are 0 the poll will be hidden for all items that it is attached to</remarks>
        </member>
        <member name="M:BBC.Dna.Component.Poll.MakePollXML(System.Boolean)">
            <summary>
            Make XML for poll
            </summary>
            <param name="includePollResults">Include results of poll flag</param>
        </member>
        <member name="M:BBC.Dna.Component.Poll.SetPollStatistic(System.String,System.String)">
            <summary>
            Adds, changes or removes statistics.
            </summary>
            <param name="name">statistic name</param>
            <param name="value">statistic value (set to null to remove statistic)</param>
            <remarks>Poll statistics are put in the &lt;STATISTICS&gt; tag inside the poll xml</remarks>
        </member>
        <member name="M:BBC.Dna.Component.Poll.LoadPollResults">
            <summary>
            Load results of a single poll 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.LoadCurrentUserVote">
            <summary>
            Gets user's vote
            </summary>
            <returns>True if user has voted, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.MakePoll">
            <summary>
            Make XML for single poll
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.ParseRequestURLForCommand(BBC.Dna.Utils.IRequest)">
            <summary>
            Tries to parse the request url to see what command has been sent through
            </summary>
            <param name="request">The request object</param>
            <returns>True if command found, false if not OR something went wrong</returns>
        </member>
        <member name="M:BBC.Dna.Component.Poll.UnhandledCommand(System.String)">
            <summary>
            Called when DispatchCommand does not recognise sAction. Adds Error XML into page. 
            </summary>
            <param name="cmd">The unhandled command</param>
        </member>
        <member name="P:BBC.Dna.Component.Poll.AllowAnonymousVoting">
            <summary>
            Allow anonymous voting property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.PollID">
            <summary>
            PollID property
            </summary>
            <remarks>Can return -1 if poll is not yet created</remarks>
        </member>
        <member name="P:BBC.Dna.Component.Poll.ResponseMax">
            <summary>
            ResponseMax property:- maximum value of a response in poll.
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.ResponseMin">
            <summary>
            ResponseMin property:- the minimum value of a response in poll.
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.Results">
            <summary>
            PollResults property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.CurrentUserVote">
            <summary>
            CurrentUserVote property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.Hidden">
            <summary>
            Hidden property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.Type">
            <summary>
            Poll type property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Poll.LastErrorCode">
            <summary>
            Last Error Code Property
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Poll.PollType">
            <summary>
            Poll Types
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollType.POLLTYPE_UNKNOWN">
            <summary>
            Unkown
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollType.POLLTYPE_CLUB">
            <summary>
            Club
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollType.POLLTYPE_NOTICE">
            <summary>
            notice
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollType.POLLTYPE_CONTENTRATING">
            <summary>
            Content rating
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Poll.UserStatus">
            <summary>
            User status types
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.UserStatus.USERSTATUS_UNKNOWN">
            <summary>
            Unknown state
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.UserStatus.USERSTATUS_LOGGEDIN">
            <summary>
            User was logged in when he voted
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.UserStatus.USERSTATUS_HIDDEN">
            <summary>
            User wishes his vote to remain hidden
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Poll.ItemType">
            <summary>
            Item Types
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ItemType.ITEMTYPE_UNKNOWN">
            <summary>
            Beware of the unknown
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ItemType.ITEMTYPE_ARTICLE">
            <summary>
            Article
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ItemType.ITEMTYPE_CLUB">
            <summary>
            Club
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ItemType.ITEMTYPE_NOTICE">
            <summary>
            Notice (a thread of a noticeboard)
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Poll.ErrorCode">
            <summary>
            Error Codes
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_NOERROR">
            <summary>
            No Error
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_UNSPECIFIED">
            <summary>
            Unknown/Unspecified error
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_UNKNOWNCMD">
            <summary>
            Unknown cmd param
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_BADPARAMS">
            <summary>
            Invalid parameters (e.g. missing cmd/s_redirectto param)
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_BADPOLLID">
            <summary>
            Invalid poll id
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_NEEDUSER">
            <summary>
            User required for operation (User not logged in)
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_ACCESSDENIED">
            <summary>
            Access denied/operation not allowed
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.ErrorCode.ERRORCODE_AUTHORCANNOTVOTE">
            <summary>
            Page author cannot vote
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Poll.PollCommand">
            <summary>
            The command that was parsed from the request URL
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollCommand.UNKNOWN">
            <summary>
            Failed to find a command
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollCommand.ADDVOTE">
            <summary>
            Add a vote
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollCommand.HIDE">
            <summary>
            Hide a poll
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollCommand.UNHIDE">
            <summary>
            Unhide a poll
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollCommand.REMOVE">
            <summary>
            Remove a poll
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Poll.PollCommand.ADDLINK">
            <summary>
            Add a link
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.PollContentRating">
            <summary>
            The content rating poll classs
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.#ctor(BBC.Dna.IAppContext,BBC.Dna.IUser)">
            <summary>
            The content rating poll class
            </summary>
            <param name="context">The app context so the poll can access database</param>
            <param name="viewingUser">The current viewing user</param>
        </member>
        <member name="F:BBC.Dna.Component.PollContentRating._redirectURL">
            <summary>
            Redirect URL
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.Vote(System.Int32)">
            <summary>
            Adds users vote to database
            </summary>
            <param name="response">The response value to the vote</param>
            <returns>true if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.AddPollErrorCodeToURL(BBC.Dna.Component.Poll.ErrorCode)">
            <summary>
            Helper function to add poll's error code parameter to a URL
            </summary>
            <param name="code">Error Code</param>
            <remarks>This will also add the error code to XML</remarks>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.ParseRequestURLForCommand(BBC.Dna.Utils.IRequest)">
            <summary>
            Tries to parse the request url to see what command has been sent through
            </summary>
            <param name="request">The request object</param>
            <returns>True if command found, false if not OR something went wrong</returns>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.UnhandledCommand(System.String)">
            <summary>
            Called when DispatchCommand does not recognise sAction. Adds Error XML into page. 
            </summary>
            <param name="cmd">The unhandled command</param>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.RemoveVote">
            <summary>
            Remove a vote, not supported for this type of poll
            </summary>
            <returns>true always</returns>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.HidePoll(System.Boolean,System.Int32,BBC.Dna.Component.Poll.ItemType)">
            <summary>
            Hides / Unhides poll
            </summary>
            <param name="hide">Hide boolean: True = hide, False = unhide</param>
            <param name="itemID">ID of item this poll is attached to</param>
            <param name="itemType">Type of item this poll is attached to</param>
            <returns>true if the poll was hidden / unhidden, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.LinkPoll(System.Int32,BBC.Dna.Component.Poll.ItemType)">
            <summary>
            Links the poll to a given type of content
            </summary>
            <param name="itemID">The id of the item you want to link to</param>
            <param name="itemType">the type of item you want to link to</param>
            <returns>true if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.PollContentRating.SetContentRatingStatistics(System.Int32,System.Double)">
            <summary>
            Updates the current statistics for the current poll
            </summary>
            <param name="voteCount">the vote count</param>
            <param name="averageRating">the average rating</param>
        </member>
        <member name="P:BBC.Dna.Component.PollContentRating.RedirectURL">
            <summary>
            Redirect URL property.
            </summary>
            <remarks>Instruct builder to redirect URL after returning from ProcessParamsFromBuilder.</remarks>
        </member>
        <member name="T:BBC.Dna.ContentRatingPollFactory">
            <summary>
            ContentRating poll factory
            </summary>
        </member>
        <member name="M:BBC.Dna.ContentRatingPollFactory.CreatePoll(BBC.Dna.IAppContext,BBC.Dna.IUser)">
            <summary>
            Creates new poll
            </summary>
            <returns>A poll</returns>
        </member>
        <member name="T:BBC.Dna.Component.PollResults">
            <summary>
            Results of poll
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PollResults.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PollResults.Add(BBC.Dna.Component.Poll.UserStatus,System.Int32,System.String,System.String)">
            <summary>
            Populates poll's results
            </summary>
            <param name="userStatus">User status (e.g. anonymous; signed-in)</param>
            <param name="response">Response index</param>
            <param name="key">Attribute name</param>
            <param name="value">Attribute value</param>
            <remarks>Collection later used by the code which generates xml. Attribute keys and values will end up as &lt;OPTION&gt; element xml attributes (key="value")</remarks>
        </member>
        <member name="M:BBC.Dna.Component.PollResults.GetXml">
            <summary>
            Gets Xml of Poll's results
            </summary>
            <returns>XmlElement containing poll's results.</returns>
        </member>
        <member name="T:BBC.Dna.Component.PhraseNameSpace">
            <summary>
            Class for creating a list of popular tags for each namespace.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PhraseNameSpace.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="phrase"></param>
        </member>
        <member name="M:BBC.Dna.Component.PhraseNameSpace.AddPhraseXml(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.PhraseNameSpace.CompareTo(System.Object)">
            <summary>
            Orders By Count.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.Component.PhraseNameSpace.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.PopularPhrases">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PopularPhrases.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.PopularPhrases.AddPhrase(System.String,System.String)">
            <summary>
            AddPhrase - Adds the phrase and name space to a list under a key for each namespace.
             Groups phrases per namespace and keeps a count of occurrences of each phrase namespace pair.
            </summary>
            <param name="phrase"></param>
            <param name="nspace"></param>
        </member>
        <member name="M:BBC.Dna.Component.PopularPhrases.GenerateXml">
            <summary>
            Generates the popular tags XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.PureXmlTransformer">
            <summary>
            A transformer which simply passes through the XML page unchanged
            </summary>
        </member>
        <member name="M:BBC.Dna.PureXmlTransformer.#ctor(BBC.Dna.IOutputContext)">
            <summary>
            Constructor
            </summary>
            <param name="outputContext"></param>
        </member>
        <member name="M:BBC.Dna.PureXmlTransformer.TransformXML(BBC.Dna.IDnaComponent)">
            <summary>
            <see cref="T:BBC.Dna.DnaTransformer"/>
            </summary>
        </member>
        <member name="T:BBC.Dna.Request">
            <summary>
            The DNA Request object. This class is used to provide a layer between DNA and the .NET Web request.
            It wraps all the required methods and properties that DNA requires. It also offers helper methods for common pieces of code.
            </summary>
        </member>
        <member name="M:BBC.Dna.Request.#ctor(System.Web.HttpRequest)">
            <summary>
            The Request constructor.
            </summary>
            <param name="request">The http request that you want to wrap</param>
        </member>
        <member name="M:BBC.Dna.Request.DoesParamExist(System.String,System.String)">
            <summary>
            This function is used to check to see if a given param exists
            </summary>
            <param name="paramName">The name of the param you want to check for</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>True if it exists or false if not</returns>
        </member>
        <member name="M:BBC.Dna.Request.TryGetParamString(System.String,System.String@,System.String)">
            <summary>
            This function returns the value for a given param
            </summary>
            <param name="paramName">The name of the param you want to get that value for</param>
            <param name="value">reference string that will take the value</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>True if it exists, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamStringOrEmpty(System.String,System.String)">
            <summary>
            Get a parameter value, or empty string if the parameter does not exist
            </summary>
            <param name="paramName">name of parameter to find</param>
            <param name="description">Description of parameter for documenation purposes</param>
            <returns>string value of parameter or empty string</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamIntOrZero(System.String,System.String)">
            <summary>
            Gets the named parameter from the query string or form data.
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="paramName">Name of paramter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>Integer value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamDoubleOrZero(System.String,System.String)">
            <summary>
            Gets the named parameter from the query string or form data.
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>Double value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.Request.TryGetParamIntOrKnownValueOnError(System.String,System.Int32,System.String)">
            <summary>
            Tries to get the specified param as an int, or returns the "Known Value" if it fails.
            Alternative to the GetParamIntOrZero(...) Method if zero can be a valid value.
            </summary>
            <param name="paramName">The name of the param you want to get that value for</param>
            <param name="knownValue">The known value you want to return on failure</param>
            <param name="description">Description of the parameter, for documentation purposes</param>
            <returns>The parsed value, or the known value on failure</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamCountOrZero(System.String,System.String)">
            <summary>
            Counts the number of parameters of the given name in the request
            </summary>
            <param name="paramName">name of parameter to count</param>
            <param name="description">description of parameter for documentation purposes</param>
            <returns>Number of params</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamStringOrEmpty(System.String,System.Int32,System.String)">
            <summary>
            Get one of multiple named parameters
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="index">index of parameter</param>
            <param name="description">description of parameter</param>
            <returns>value of parameter</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetAllParamNames">
            <summary>
            Returns a list of all the parameter names in the current query
            </summary>
            <returns>A list of strings with all the parameter names in the query</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetAllParamsWithPrefix(System.String)">
            <summary>
            Returns the name value pairs of all the parameters in the current query that have the given prefix
            </summary>
            <param name="prefix"></param>
            <returns>A name value collection of all parameters in the query that have the given prefix</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetCookie(System.String)">
            <summary>
            Function for getting a given cookie
            </summary>
            <param name="cookieName">The name of the cookie that you want to get</param>
            <returns>The reference to our new DnaCookie or null if it could not be found</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamDoubleOrZero(System.String,System.Int32,System.String)">
            <summary>
            Get one of multiple named parameters
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="index">index of parameter</param>
            <param name="description">description of parameter</param>
            <returns>value of parameter</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamIntOrZero(System.String,System.Int32,System.String)">
            <summary>
            Get one of multiple named parameters
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="index">index of parameter</param>
            <param name="description">description of parameter</param>
            <returns>value of parameter</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamBoolOrFalse(System.String,System.String)">
            <summary>
            Gets the named parameter from the query string or form data.
            If the parameter doesn't exist, this function returns zero
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="description">Description of what the parameter means. Used for auto documenation</param>
            <returns>bool value of parameter or zero if param doesn't exist</returns>
        </member>
        <member name="M:BBC.Dna.Request.GetParamBoolOrFalse(System.String,System.Int32,System.String)">
            <summary>
            Get one of multiple named parameters
            </summary>
            <param name="paramName">Name of parameter</param>
            <param name="index">index of parameter</param>
            <param name="description">description of parameter</param>
            <returns>bool value of parameter</returns>
        </member>
        <member name="P:BBC.Dna.Request.QueryString">
            <summary>
            The query string property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.RawUrl">
            <summary>
            The Raw Url property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.Form">
            <summary>
            The Form property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.ServerVariables">
            <summary>
            The server variables property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.Params">
            <summary>
            The Params property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.LogonUserIdentity">
            <summary>
            The Logon User Identity property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.Item(System.String)">
            <summary>
            The param array property
            </summary>
            <param name="s">The name of the param you want to get the value for</param>
            <returns>The value of the named param if found</returns>
        </member>
        <member name="P:BBC.Dna.Request.Cookies">
            <summary>
            The cookies property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.UserAgent">
            <summary>
            The user agent property
            </summary>
        </member>
        <member name="P:BBC.Dna.Request.UrlReferrer">
            <summary>
            Gets the URL Referrer.
            </summary>
            <returns>Uri of the referrer</returns>
        </member>
        <member name="P:BBC.Dna.Request.Files">
            <summary>
            The Files property
            </summary>
        </member>
        <member name="T:BBC.Dna.Response">
            <summary>
            The DNA Request object. This class is used to provide a layer between DNA and the .NET Web response.
            It wraps all the required methods and properties that DNA requires.
            </summary>
        </member>
        <member name="M:BBC.Dna.Response.#ctor(System.Web.HttpResponse)">
            <summary>
            The Response constructor
            </summary>
            <param name="response">The HttpResponse object you want to wrap</param>
        </member>
        <member name="M:BBC.Dna.Response.Redirect(System.String)">
            <summary>
            The redirect method
            </summary>
            <param name="url">The url you want to redirect to</param>
        </member>
        <member name="M:BBC.Dna.Response.Write(System.String)">
            <summary>
            The write method
            </summary>
            <param name="s">The string you want to be written to the response</param>
        </member>
        <member name="P:BBC.Dna.Response.Output">
            <summary>
            The output property
            </summary>
        </member>
        <member name="P:BBC.Dna.Response.ContentType">
            <summary>
            The content type property
            </summary>
        </member>
        <member name="P:BBC.Dna.Response.StatusCode">
            <summary>
            The status code property
            </summary>
        </member>
        <member name="P:BBC.Dna.Response.ContentEncoding">
            <summary>
            The content encoding property
            </summary>
        </member>
        <member name="P:BBC.Dna.Response.Cookies">
            <summary>
            Gets the cookie collection for the response
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.RestrictedUserList">
            <summary>
            Restricted User List - A derived DnaInputComponent object to get the list of restricted user for a site
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RestrictedUserList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the Restricted User List object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.RestrictedUserList.CreateRestrictedUserList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Functions generates the Restricted User List
            </summary>
            <param name="siteID">Site of the restricted users</param>
            <param name="skip">Number of accounts to skip</param>
            <param name="show">Number to show</param>
            <param name="userTypes">The type of restricted users to bring back Banned and/or Premoderated</param>
            <param name="searchType">The type of search to perform</param>
            <param name="letter">The beginning letter of the restricted users email to restrict to</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.RestrictedUserList.GetRestrictedUserList(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Does the correct call to the database to get the restricted user list for a site.
            </summary>
            <param name="siteId">SiteID of the restricted user list to get</param>
            <param name="skip">The number of users to skip</param>
            <param name="show">The number of users to show</param>
            <param name="userTypes">The type of restricted users to bring back Banned and/or Premoderated</param>
            <param name="searchType">The type of search to perform</param>
            <param name="letter">The beginning letter of the restricted users email to restrict to</param>
            <returns>Data Reader</returns>
        </member>
        <member name="P:BBC.Dna.Component.RestrictedUserList.TotalUsers">
            <summary>
            Field for the Total Users returned in the list
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ReviewForum">
            <summary>
            The review forum class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.InitialiseViaReviewForumID(System.Int32,System.Boolean)">
            <summary>
            Allows a review forum to be initialised with a ReviewForumID
            </summary>
            <param name="reviewForumID"></param>
            <param name="alwaysFromDB"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.InitialiseViaH2G2ID(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="H2G2ID"></param>
            <param name="alwaysFromDB"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.Initialise(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initialises the object with the details about the current review forum / article
            </summary>
            <param name="ID">H2G2ID or ReviewForumID</param>
            <param name="isReviewForumID">Is this a review Forum ID or H2G2ID</param>
            <param name="alwaysFromDB">set to true if you want info from DB always no cache</param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.InitialiseFromData(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initialise the data from passed in values
            </summary>
            <param name="reviewForumID"></param>
            <param name="forumName"></param>
            <param name="urlFriendlyName"></param>
            <param name="incubateTime"></param>
            <param name="recommend"></param>
            <param name="H2G2ID"></param>
            <param name="siteID"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.GetReviewForumThreadList(System.Int32,System.Int32,BBC.Dna.Component.ReviewForum.OrderBy,System.Boolean)">
            <summary>
            Gets the Review Forum Thread List
            </summary>
            <param name="numThreads"></param>
            <param name="numSkipped"></param>
            <param name="orderBy"></param>
            <param name="ascending"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.AreNamesUniqueWithinSite(System.String,System.String,System.Int32)">
            <summary>
            Whether all the names for the site are unique
            </summary>
            <param name="name"></param>
            <param name="URL"></param>
            <param name="siteID"></param>
            <returns>Whether the names are unique for that site</returns>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.CacheGetMostRecentReviewForumThreadDate(System.Int32)">
            <summary>
            Gets the date of the thread in the reivew forum which was last posted to.
            	This allows the cache of thread headers to know when it's dirty.
            </summary>
            <param name="reviewForumID">review forum id</param>
            <returns>returned date of last updated forum post</returns>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.GetReviewForumThreadsStoredProcedure(BBC.Dna.Component.ReviewForum.OrderBy)">
            <summary>
            Gets the stored procedure to be called dependant on order by
            </summary>
            <param name="orderBy">what order by</param>
            <returns>Stored procedure name</returns>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.Update(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates the review forum
            </summary>
            <param name="forumName"></param>
            <param name="urlFriendlyName"></param>
            <param name="recommend"></param>
            <param name="incubateTime"></param>
        </member>
        <member name="M:BBC.Dna.Component.ReviewForum.CreateAndInitialiseNewReviewForum(System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new reviewforum in the database
            </summary>
            <param name="forumName"></param>
            <param name="URLFriendlyName"></param>
            <param name="incubateTime"></param>
            <param name="recommend"></param>
            <param name="siteID"></param>
            <param name="userID"></param>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.IsInitialised">
            <summary>
            Accesor for IsInitialised
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.IsRecommendable">
            <summary>
            Accesor for IsRecommendable
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.ReviewForumID">
            <summary>
            Accesor for ReviewForumID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.H2G2ID">
            <summary>
            Accesor for H2G2ID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.SiteID">
            <summary>
            Accesor for SiteID
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.IncubateTime">
            <summary>
            Accesor for IncubateTime
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.ReviewForumName">
            <summary>
            Accesor for ReviewForumName
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.ReviewForum.UrlFriendlyName">
            <summary>
            Accesor for UrlFriendlyName
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ReviewForum.OrderBy">
            <summary>
            Order by type for the Review Forum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ReviewForum.OrderBy.DATEENTERED">
            <summary>
            Date entered ordered review forum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ReviewForum.OrderBy.LASTPOSTED">
            <summary>
            Last posted ordered review forum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ReviewForum.OrderBy.AUTHORID">
            <summary>
            Author ID ordered review forum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ReviewForum.OrderBy.AUTHORNAME">
            <summary>
            Author Name ordered review forum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ReviewForum.OrderBy.H2G2ID">
            <summary>
            H2G2 ID ordered review forum
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.ReviewForum.OrderBy.SUBJECT">
            <summary>
            Subject ordered review forum
            </summary>
        </member>
        <member name="T:BBC.Dna.Route">
            <summary>
            Class to store all Route Data
            </summary>
        </member>
        <member name="M:BBC.Dna.Route.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for the Route class
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Route.CreateRouteXML(BBC.Dna.Data.IDnaDataReader,System.Boolean)">
            <summary>
            CreateRouteXML from a dataReader.
            Allows standard Route XML to be generated from different resultsets.
            </summary>
            <param name="dataReader"></param>
            <param name="includeLocations">Whether the locations need to be included or just route info</param>
        </member>
        <member name="P:BBC.Dna.Route.RouteID">
            <summary>
            Accessor for LocationID
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.SiteID">
            <summary>
            Accessor for SiteID
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.LocationCount">
            <summary>
            Accessor for Location Count
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.Locations">
            <summary>
            Accessor for Locations
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.CreatedDate">
            <summary>
            Accessor for Created Date
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.Title">
            <summary>
            Accessor for Title
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.Description">
            <summary>
            Accessor for Description
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.OwnerID">
            <summary>
            Accessor for OwnerID
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.DescribingArticleID">
            <summary>
            Accessor for DescribingArticleID
            </summary>
        </member>
        <member name="P:BBC.Dna.Route.GPSData">
            <summary>
            Accessor for GPSData
            </summary>
        </member>
        <member name="T:BBC.Dna.ServerUtility">
            <summary>
            The DNA HttpServerUtility object. This class is used to provide a layer between DNA and the .NET Web request.
            It wraps all the required methods and properties that DNA requires.
            </summary>
        </member>
        <member name="M:BBC.Dna.ServerUtility.#ctor(System.Web.HttpServerUtility)">
            <summary>
            The ServerUtility constructor
            </summary>
            <param name="serverUtility">The HttpServerUtility you want to wrap</param>
        </member>
        <member name="M:BBC.Dna.ServerUtility.MapPath(System.String)">
            <summary>
            The Map Path method
            </summary>
            <param name="path">The virtual path</param>
            <returns>The physical path</returns>
        </member>
        <member name="M:BBC.Dna.ServerUtility.GetLastError">
            <summary>
            The Get Last Error method
            </summary>
            <returns>The last exception that occured</returns>
        </member>
        <member name="M:BBC.Dna.ServerUtility.HtmlDecode(System.String)">
            <summary>
            The Html Decode method
            </summary>
            <param name="decodeString">The string to decode</param>
            <returns>The decoded result</returns>
        </member>
        <member name="M:BBC.Dna.ServerUtility.Transfer(System.String)">
            <summary>
            The Transfer method
            </summary>
            <param name="path">The path to transfer to</param>
        </member>
        <member name="P:BBC.Dna.ServerUtility.ScriptTimeout">
            <summary>
            The Script Timeout property
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Search">
            <summary>
            Component for implementing free text search.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Search.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the Search component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.Search.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Search.GenerateSearchQuery(System.String)">
            <summary>
            Generates the SQL Search Query.
            </summary>
            <param name="searchQuery"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.Search.GenerateANDSearchQuery(System.String)">
            <summary>
            Generates an "AND" search query
            </summary>
            <param name="searchQuery">the original search query</param>
            <returns>the search term to pass into the stored proc</returns>
        </member>
        <member name="M:BBC.Dna.Component.Search.ArticleSearch(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Implements an Article Search.
            </summary>
            <param name="query"></param>
            <param name="showApproved"></param>
            <param name="showNormal"></param>
            <param name="showSubmitted"></param>
            <param name="showContentRating"></param>
            <param name="showPhrases"></param>
            <param name="userGroups"></param>
            <param name="skip"></param>
            <param name="show"></param>
            <param name="nodeId"></param>
            <param name="articleType"></param>
            <param name="useFreeTextSearch"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.Search.UseFastSearch">
            <summary>
            Determines whether we should use the fast free text search, based on the URL and site option
            </summary>
            <returns>true if we should use fast free text search</returns>
        </member>
        <member name="M:BBC.Dna.Component.Search.UserSearch(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Implements a user search on users name or email address ( editor only ).
            </summary>
            <param name="searchQuery"></param>
            <param name="skip"></param>
            <param name="show"></param>
            <param name="currentSiteOnly"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.Search.HierarchySearch(System.String,System.Int32,System.Int32)">
            <summary>
            Performs a hiearchy Search each result is returned with ancestors.
            </summary>
            <param name="searchQuery"></param>
            <param name="skip">Skip sesarch result + ancestors.</param>
            <param name="show">Show result + ancestors.</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.Component.Search.ForumSearch(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes a forum search and generates XML.
            </summary>
            <param name="searchQuery"></param>
            <param name="skip"></param>
            <param name="show"></param>
            <param name="groupsFilter"></param>
            <param name="category"></param>
            <param name="threadId"></param>
            <param name="forumId"></param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Component.ServiceBrokerConversations">
            <summary>
            Service Broker Conversations
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ServiceBrokerConversations.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ServiceBrokerConversations.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ServiceBrokerServices">
            <summary>
            Service Broker Services
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ServiceBrokerServices.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ServiceBrokerServices.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.ServiceBrokerTransmissionQueue">
            <summary>
            Service Broker Services
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.ServiceBrokerTransmissionQueue.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.ServiceBrokerTransmissionQueue.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="T:BBC.Dna.SkinSelector">
            <summary>
            ?
            </summary>
        </member>
        <member name="M:BBC.Dna.SkinSelector.IsXmlSkin(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="inputContext"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SkinSelector.IsPureXml(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SkinSelector.Initialise(BBC.Dna.IInputContext,BBC.Dna.IOutputContext)">
             <summary>
             
             </summary>
            <param name="inputContext"></param>
             <param name="outputContext"></param>
             <returns></returns>
        </member>
        <member name="P:BBC.Dna.SkinSelector.SkinName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.SkinSelector.SkinSet">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Signal">
            <summary>
            The Signal class which is used to signal all the other servers about server wide changes
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Signal.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.Signal.ProcessRequest">
            <summary>
            The process request function
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.SkinParams">
            <summary>
            A class to get all the s_ params in the current query
            and put them in the XML
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.SkinParams.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for SkinParams
            </summary>
            <param name="context">Input context for request</param>
        </member>
        <member name="M:BBC.Dna.Component.SkinParams.ProcessRequest">
            <summary>
            <see cref="T:BBC.Dna.IDnaComponent"/>
            </summary>
        </member>
        <member name="T:BBC.Dna.Status">
            <summary>
            ********************************
            </summary>
        </member>
        <member name="M:BBC.Dna.Status.#ctor(BBC.Dna.IInputContext)">
            <summary>
            *********************************************
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Status.ProcessRequest">
            <summary>
            Handle request to put the Status object in the page
            </summary>
        </member>
        <member name="T:BBC.Dna.SubscribingUsersList">
            <summary>
            Class to create a list of users subscribed to a paricular user's pages
            </summary>
        </member>
        <member name="M:BBC.Dna.SubscribingUsersList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor
            </summary>
            <param name="context">Input context for this request</param>
        </member>
        <member name="M:BBC.Dna.SubscribingUsersList.CreateSubscribingUsersList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the XML for the subscribedUsers list
            </summary>
            <param name="userID">ID of user whose list we want</param>
            <param name="skip">skip to this index in the list</param>
            <param name="show">show this many items in the list</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.SubscribingUsersList.GetSubscribingUsersList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Does the correct call to the database to get the users the user is subscribed to.
            </summary>
            <param name="userID">The user id to look for</param>
            <param name="skip">The number of users to skip</param>
            <param name="show">The number of users to show</param>
            <returns>Data Reader</returns>
        </member>
        <member name="P:BBC.Dna.SubscribingUsersList.UserAcceptsSubscriptions">
            <summary>
            Field for the _userAcceptsSubscriptions field whether the user that the list has been gather for Accepts Subscriptions
            </summary>
        </member>
        <member name="T:BBC.Dna.UITemplate">
            <summary>
            Class to store info on an UITemplate
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for the Template object
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.LoadTemplate">
            <summary>
            Function that loads the Template from the database
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.SaveTemplate(System.Xml.XmlElement)">
            <summary>
            For the given template XML structure save the data to the DB
            </summary>
            <param name="templateXML"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.StoreTemplateData">
            <summary>
            From the internal structure create the Template Xml and update or create the new template field in the DB
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.AddField(BBC.Dna.UIField)">
            <summary>
            Adds a given field to the internal field data
            </summary>
            <param name="uiField"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.Validate">
            <summary>
            Validate the complete template
            </summary>
            <returns>Returns true if everything is valid false if not</returns>
        </member>
        <member name="M:BBC.Dna.UITemplate.ProcessParameters(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Attempts to fill the template
            </summary>
            <param name="fieldList"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.GetTemplateDataFromDB">
            <summary>
            Function that loads the Template from the database
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.ReadTemplateData(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Method that reads the datareader and extracts the template and field info
            </summary>
            <param name="dataReader"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.CreateUpdateTemplateData">
            <summary>
            Creates or updates the template data to the db
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.StoreTemplateDataFromXML(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Loads the internal fields from a given templateXML element
            </summary>
            <param name="templateXML">The template data XMLElement </param>
            <param name="isTemplateFormat">Whether the data is a straight match to the internal format</param>
        </member>
        <member name="M:BBC.Dna.UITemplate.FillTemplateData(System.Xml.XmlElement)">
            <summary>
            Loads the internal fields from a given templateXML element
            </summary>
            <param name="templateXML"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.TransformTemplateData(System.Xml.XmlElement)">
            <summary>
            Function that takes the incoming Field format and converts it to out format
            </summary>
            <param name="templateXML"></param>
        </member>
        <member name="M:BBC.Dna.UITemplate.CreateTemplateData">
            <summary>
            Creates the Template in the DB
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.UpdateTemplateData">
            <summary>
            Updates the templatedata in the database
            </summary>
        </member>
        <member name="M:BBC.Dna.UITemplate.GenerateTemplateXML">
            <summary>
            Creates the XML from the internal object
            </summary>
        </member>
        <member name="P:BBC.Dna.UITemplate.UITemplateID">
            <summary>
            Accessor for UITemplateID
            </summary>
        </member>
        <member name="P:BBC.Dna.UITemplate.BuilderGUID">
            <summary>
            Accessor for Builder
            </summary>
        </member>
        <member name="P:BBC.Dna.UITemplate.Name">
            <summary>
            Accessor for Name
            </summary>
        </member>
        <member name="P:BBC.Dna.UITemplate.HasErrors">
            <summary>
            Accessor for HasErrors
            </summary>
        </member>
        <member name="P:BBC.Dna.UITemplate.UIFields">
            <summary>
            Accessor for _uiFieldData
            </summary>
        </member>
        <member name="P:BBC.Dna.UITemplate.ProfanityFilterState">
            <summary>
            Accessor for ProfanityFilterState
            </summary>
        </member>
        <member name="T:BBC.Dna.TimestampTextWriterTraceListener">
            <summary>
            Our specialisation of TextWriterTraceListener for writing to log files
            </summary>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor(System.IO.Stream)">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor(System.String)">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor(System.IO.TextWriter)">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor(System.String,System.String)">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Calls base implementation
            </summary>
            <see cref="T:System.Diagnostics.TextWriterTraceListener"/>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.CreateLogFileName(System.String)">
            <summary>
            Helper function for creating the correctly formatted log file name
            </summary>
            <param name="rootPath">The folder the file lives in</param>
            <returns>The full file path for the current log file</returns>
            <remarks>The file name changes every hour currently</remarks>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.CreateListener(System.String)">
            <summary>
            Creates an instance of TimestampTextWriterTraceListener, and registers as a Trace Listener
            </summary>
            <param name="rootPath">The folder to store log files</param>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.RemoveListener">
            <summary>
            Removes the listener from the list of Trace listeners
            </summary>
        </member>
        <member name="F:BBC.Dna.TimestampTextWriterTraceListener.changeLogFileLock">
            <summary>
            Private object used solely for serialising the switching of the underlying log
            file before writing
            </summary>
        </member>
        <member name="M:BBC.Dna.TimestampTextWriterTraceListener.WriteLine(System.String)">
            <summary>
            <para>Writes a line to the underlying log file</para>
            <para>
            If the underlying file needs to change, for example because it's gone passed a time boundary,
            the old file is closed, and the new one is created
            </para>
            </summary>
            <param name="message">The message to write to the log file</param>
        </member>
        <member name="T:BBC.Dna.Component.UITemplateDefinition">
            <summary>
            UITemplateDefinition - A derived DnaComponent object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UITemplateDefinition.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the UITemplateDefinition component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.UITemplateDefinition.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UITemplateDefinition.TryGetPageParams">
            <summary>
            Gets the params for the page
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UITemplateDefinition.GenerateUITemplatePageXml(BBC.Dna.UITemplate)">
            <summary>
            Gets the template XML either from the ID for a get action or the returned XML from a create or update action
            </summary>
            <param name="uiTemplate">Template Data</param>
        </member>
        <member name="M:BBC.Dna.Component.UITemplateDefinition.GenerateUISupportedTemplatePageXml">
            <summary>
            Gets the supported builders template XML with their required fields
            </summary>
        </member>
        <member name="T:BBC.Dna.DynamicLists.Dbo">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.#ctor(System.String)">
            <summary>
            Constructs new dbo object given connection string.
            </summary>
            <param name="connectionString">Config file</param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.#ctor(System.String,System.String)">
            <summary>
            Contrsucts new dbo object and reads config
            </summary>
            <param name="folder">Config file folder</param>
            <param name="configFile">Config filename</param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.Initialise(System.String)">
            <summary>
            Initialise from a file with config XML.
            </summary>
            <param name="configfile"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.RegisterObjectString(System.String)">
            <summary>
            RegiserObjectString - Executes the given XML
            </summary>
            <param name="SQL"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.RegisterObject(System.String)">
            <summary>
            Create a stored procedure given a file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.DropObjectViaFile(System.String)">
            <summary>
            Drops stored procedure
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.ReadFileContent(System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.IsProcedure(System.String)">
            <summary>
            
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.GetObjectName(System.String)">
            <summary>
            
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.CheckObjectParams(System.String)">
            <summary>
            
            </summary>
            <param name="SQL"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.CheckObjectName(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="objName"></param>
            <param name="file"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.DropObject(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="bIsProcedure"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.GrantPermissions(System.String)">
            <summary>
            
            </summary>
            <param name="SQL"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.CheckObjectExists(System.String)">
            <summary>
            
            </summary>
            <param name="objName"></param>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.ExecuteNonQuery(System.String)">
            <summary>
            
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.DynamicLists.Dbo.ExecuteScalar(System.String)">
            <summary>
            
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.DynamicLists.Dbo.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.URLFilter">
            <summary>
            Class to Check for text for non allowed URLs
            </summary>
        </member>
        <member name="M:BBC.Dna.URLFilter.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Constructor for the URLFilter object
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.URLFilter.CheckForURL(System.String)">
            <summary>
            Checks the string to see if it might contain a URL.
            </summary>
            <param name="stringToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.URLFilter.CheckForURLs(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks a given string for non allowed urls which are taken from the nonallowedurl 
            table in the database.
            </summary>
            <param name="stringToCheck">The string you want to check for non allowed urls</param>
            <param name="nonAllowedMatches">Collection of matching urls</param>
            <returns>Filter state if the string contains a non allowed URL or not</returns>
        </member>
        <member name="T:BBC.Dna.URLFilter.FilterState">
            <summary>
            Filter response state
            </summary>
        </member>
        <member name="F:BBC.Dna.URLFilter.FilterState.Pass">
            <summary>
            Passes the non allowed URL check
            </summary>
        </member>
        <member name="F:BBC.Dna.URLFilter.FilterState.Fail">
            <summary>
            Fails the non allowed filter check
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.UserComplaint">
            <summary>
            UserComplaintPage Component
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserComplaint.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MorePosts component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.UserComplaint.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserComplaint.SendEmail(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Send Email using Email template mechanism.
            </summary>
            <param name="complaintText"></param>
            <param name="email"></param>
            <param name="modId"></param>
            <param name="postId"></param>
            <param name="h2g2Id"></param>
            <param name="title"></param>
        </member>
        <member name="M:BBC.Dna.Component.UserComplaint.SendVerificationEmail(System.String,System.Guid)">
            <summary>
            Sends verification email for user to verify email
            </summary>
            <param name="email"></param>
            <param name="verificationUid"></param>
        </member>
        <member name="M:BBC.Dna.Component.UserComplaint.SendErrorEmailToModerator(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sends an imformative email to the moderator with the complaint details
            </summary>
            <param name="modId"></param>
            <param name="email"></param>
            <param name="postId"></param>
            <param name="h2g2Id"></param>
            <param name="url"></param>
            <param name="complaintText"></param>
        </member>
        <member name="M:BBC.Dna.Component.UserComplaint.SendVerficationErrorEmailToModerator(System.String,System.Guid)">
            <summary>
            Sends error email to moderator telling them verification email wasn't sent
            </summary>
            <param name="email"></param>
            <param name="verificationUid"></param>
        </member>
        <member name="T:BBC.Dna.UserGroupsHelper">
            <summary>
            UserGroups class
            </summary>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.GetUserGroupsAsXml(System.Int32,System.Int32,BBC.Dna.IInputContext)">
            <summary>
            Get the xml representation of the groups a user is in for a specific site.
            </summary>
            <param name="userID">users id</param>
            <param name="siteID">site id</param>
            <param name="context">input context</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.GetUserGroupsElement(System.Int32,System.Int32,BBC.Dna.IInputContext)">
            <summary>
            Get the xml element of the groups a user is in for a specific site.
            </summary>
            <param name="userID">users id</param>
            <param name="siteID">site id</param>
            <param name="context">input context</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.GetSiteGroupsElement(System.Int32,BBC.Dna.IInputContext)">
            <summary>
            Retuns all groups for the given site.
            </summary>
            <param name="siteID"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.IsUserEditorForSite(System.Int32,System.Int32,BBC.Dna.IInputContext)">
            <summary>
            Returns whether a given user is an editor for the given site
            </summary>
            <param name="userID">users id</param>
            <param name="siteID">site id</param>
            <param name="context">input context</param>
            <returns>whether a given user is an editor for the given site</returns>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.GetSitesUserIsEditorOfXML(System.Int32,System.Boolean,BBC.Dna.IInputContext)">
            <summary>
            Create an Xml representation of the site list that the given user is an editor for
            </summary>
            <param name="userID">User to get groups for</param>
            <param name="isSuperUser">Whether the user is a superuser or not</param>
            <param name="context">The context it's called in</param>
            <returns>XmlElement pointing to the sites the user is editor of.</returns>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.AddTextElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Static function to add a text element to a given parent element with the given name containing
            the given value
            </summary>
            <param name="parent">Parent node</param>
            <param name="name">Name of the element</param>
            <param name="value">Value of the text element</param>
            <returns>the new element</returns>
        </member>
        <member name="M:BBC.Dna.UserGroupsHelper.ImportNode(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Static Helper function to import a node from another document.
            </summary>
            <param name="newOwner">The new owner document to import into</param>
            <param name="source">The node you want to import</param>
            <returns>The new node or null if it failed</returns>
        </member>
        <member name="T:BBC.Dna.UserList">
            <summary>
            Helper class user list and adds to xml
            </summary>
        </member>
        <member name="M:BBC.Dna.UserList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor of SubAllocationForm
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.UserList.CreateNewUsersList(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a list of all the users that registered within the given
            	number of time units.
            </summary>
            <param name="numberOfUnits">The number of time units since registration to use as a definition of being a new user for this list.</param>
            <param name="maxNumber">The maximum number of users to include in the list</param>
            <param name="skip">The number of users to skip before starting the list</param>
            <param name="unitType">The type of time unit to use. Default is day, but other valid values include hour, month, week, year, etc.</param>
            <param name="filterUsers">True if only want subset of users</param>
            <param name="filterType">Filter type name to filter users.</param>
            <param name="siteID"></param>
            <param name="showUpdatingUsers"></param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateSubEditorsList(System.Int32,System.Int32)">
            <summary>
            Creates a list of all the sub editors, containing info about their
            	quota and current workload.
            </summary>
            <param name="maxNumber">the maximum number of users to include in the list</param>
            <param name="skip">the number of users to skip before starting the list</param>
            <returns>true if successful, false if not</returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateSubEditorsList">
            <summary>
            Creates a list of all the sub editors, containing info about their
            	quota and current workload.
            </summary>
            <returns>true if successful, false if not</returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateGroupMembershipList(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a list of all the users who are members of the specified group
            </summary>
            <param name="groupName">The name of the group</param>
            <param name="maxNumber">number of rows to return, default 100000</param>
            <param name="skip">how many to skip, default 0</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateGroupMembershipList(System.String)">
            <summary>
            Creates a list of all the users who are members of the specified group
            </summary>
            <param name="groupName">The name of the group</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserList.GetUserIDs(System.Int32[]@)">
            <summary>
            Creates and returns an array containing all the user IDs of the
            	users in the list.
            </summary>
            <param name="ids">ints containing the user IDs of all the users in the list</param>
            <returns>true if successful, false if not.</returns>
        </member>
        <member name="M:BBC.Dna.UserList.RemoveUser(System.Int32)">
            <summary>
            Returns the user with this ID from the list.
            </summary>
            <param name="userID">user to be removed from list</param>
            <returns>true if successful, false if not.</returns>
        </member>
        <member name="M:BBC.Dna.UserList.AddCurrentUserToList">
            <summary>
            Adds the details for the user represented by the current row
            	in the data member stored procedures results set as a new user
            	in the user list. Only adds those fields which are present in
            	the results set to the XML.
            </summary>
            <returns>true if successfull, false if not.</returns>
        </member>
        <member name="M:BBC.Dna.UserList.FindUserInList(System.Int32)">
            <summary>
            User id to check
            </summary>
            <param name="userID">User id to check</param>
            <returns>true if user is in list, false if not.</returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateList(BBC.Dna.Data.IDnaDataReader,System.Xml.XmlElement@,System.Int32,System.Int32)">
            <summary>
            Helper method to create the list after a specific stored procedure
            	has been called to return an appropriate results set.
            </summary>
            <param name="dataReader">The data reader containing results</param>
            <param name="userlistXML">returned XmlElement</param>
            <param name="maxNumber">max number of rows to add</param>
            <param name="skip">number of rows to skip</param>
            <returns>true if successful, false if not.</returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateListFromEmptyList(BBC.Dna.Data.IDnaDataReader,System.String,System.Int32,System.Int32,System.Xml.XmlElement@)">
            <summary>
            Helper method to create the list after a specific stored procedure
            	has been called to return an appropriate results set.
            </summary>
            <param name="dataReader">The data reader containing results</param>
            <param name="type">type of list returned</param>
            <param name="maxNumber">the maximum number of users to go in the list</param>
            <param name="skip">the number of users to skip before starting the list</param>
            <param name="userlistXML">returned XmlElement</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.UserList.CreateEmptyList(System.String,System.Int32,System.Int32,System.Xml.XmlElement@)">
            <summary>
            Creates the default user list element
            </summary>
            <param name="type">type of list returned</param>
            <param name="count">the maximum number of users to go in the list</param>
            <param name="skip">the number of users to skip before starting the list</param>
            <param name="userList">returned XmlElement</param>
            <returns></returns>
        </member>
        <member name="T:BBC.Dna.Component.UserPage">
            <summary>
            Summary of the UserPage object, holds the list of posts for a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserPage.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the MorePosts component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.UserPage.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserPage.GenerateUserPageXml(BBC.Dna.UserPageParameters)">
            <summary>
            Calls the individual objects to generate the User Page XML
            </summary>
            <param name="userPageParameters"></param>
        </member>
        <member name="T:BBC.Dna.UserPageParameters">
            <summary>
            Class to store all User Page parameters
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.LinksPrivacyChange">
            <summary>
            Accessor for LinksPrivacyChange
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.LinksToMove">
            <summary>
            Accessor for LinksToMove
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.LinksToDelete">
            <summary>
            Accessor for LinksToDelete
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.DeleteLinks">
            <summary>
            Accessor for the DeleteLinks
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.LinksPrivacy">
            <summary>
            Accessor for the _LinksPrivacy
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.MoveLinksList">
            <summary>
            Accessor for the MoveLinksList of linkIDs and newLocations
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.LinkGroup">
            <summary>
            Accessor for LinkGroup
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeWatchInfo">
            <summary>
            Accessor for IncludeWatchInfo
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeClubs">
            <summary>
            Accessor for IncludeClubs
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludePrivateForums">
            <summary>
            Accessor for IncludePrivateForums
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeLinks">
            <summary>
            Accessor for IncludeLinks
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeTaggedNodes">
            <summary>
            Accessor for IncludeTaggedNodes
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeNoticeboard">
            <summary>
            Accessor for IncludeNoticeboard
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludePostcoder">
            <summary>
            Accessor for IncludePostcoder
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeSiteOptions">
            <summary>
            Accessor for IncludeSiteOptions
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.UserID">
            <summary>
            Accessor for UserID
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.Private">
            <summary>
            Accessor for Private
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.Clip">
            <summary>
            Accessor for Clip
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IsRegistering">
            <summary>
            Accessor for IsRegistering
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeUsersGuideEntries">
            <summary>
            Accessor for IncludeUsersGuideEntries
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeUsersGuideEntriesForums">
            <summary>
            Accessor for IncludeUsersGuideEntriesForums
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeJournals">
            <summary>
            Accessor for IncludeJournals
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeRecentPosts">
            <summary>
            Accessor for IncludeRecentPosts
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeRecentComments">
            <summary>
            Accessor for IncludeRecentComments
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeRecentGuideEntries">
            <summary>
            Accessor for IncludeRecentGuideEntries
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeRecentUploads">
            <summary>
            Accessor for IncludeRecentUploads
            </summary>
        </member>
        <member name="P:BBC.Dna.UserPageParameters.IncludeRecentArticlesOfSubscribedUsers">
            <summary>
            Accessor for IncludeRecentArticlesOfSubscribedUsers
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.UserStatistics">
            <summary>
            Summary of the UserStatistics Page object, holds the UserStatistics of a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserStatistics.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor for the UserStatistics component
            </summary>
            <param name="context">The Context of the DnaPage the component is created in.</param>
        </member>
        <member name="M:BBC.Dna.Component.UserStatistics.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserStatistics.TryCreateUserStatisticsXML(System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Functions generates the User Statistics XML
            </summary>
            <param name="userID">The user of the statistics to get</param>
            <param name="skip">Number of posts to skip</param>
            <param name="show">Number of posts to show</param>
            <param name="mode">Way the records are returned by dateposted or by forum</param>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
        </member>
        <member name="M:BBC.Dna.Component.UserStatistics.GetUserStatisticsSP(System.Int32)">
            <summary>
            Gets the correct SP name to call depending on the mode
            </summary>
            <param name="mode">By DatePosted = 1 or by Forum = 0</param>
            <returns>SP name</returns>
        </member>
        <member name="M:BBC.Dna.Component.UserStatistics.TryGetPageParams(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the params for the page
            </summary>
            <param name="userID">The user of the statistics to get</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <param name="mode">Way the records are returned by dateposted or by forum</param>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
        </member>
        <member name="M:BBC.Dna.Component.UserStatistics.ParseDateParams(System.String,System.String,System.DateTime@,System.DateTime@)">
            <summary>
            Parses and prepares date range params for UserStatistics.
            </summary>
            <param name="startDateText">Start date</param>
            <param name="endDateText">End date</param>
            <param name="startDate">Parsed start date</param>
            <param name="endDate">Parsed end date</param>
            <returns><see cref="T:BBC.Dna.Utils.DateRangeValidation.ValidationResult"/></returns>
            <remarks>If no endDateText is passed in then endDate is set to startDate + 1 day.</remarks>
        </member>
        <member name="T:BBC.Dna.Component.UserSubscriptionsList">
            <summary>
            User SubscriptionsList List - A derived DnaInputComponent object to get the list of users subscribed to by a user
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserSubscriptionsList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the UserSubscriptionsList object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.UserSubscriptionsList.CreateUserSubscriptionsList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Functions generates the User Subscription List
            </summary>
            <param name="userID">The user of the subscriptions to get</param>
            <param name="siteID">Site of the posts</param>
            <param name="skip">number of posts to skip</param>
            <param name="show">number to show</param>
            <returns>Whether created ok</returns>
        </member>
        <member name="M:BBC.Dna.Component.UserSubscriptionsList.GetUsersSubscriptionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Does the correct call to the database to get the users the user is subscribed to.
            </summary>
            <param name="userID">The user id to look for</param>
            <param name="siteId">SiteID of the user subscription list to get</param>
            <param name="skip">The number of users to skip</param>
            <param name="show">The number of users to show</param>
            <returns>Data Reader</returns>
        </member>
        <member name="P:BBC.Dna.Component.UserSubscriptionsList.UserAcceptsSubscriptions">
            <summary>
            Field for the _userAcceptsSubscriptions field whether the user that the list has been gather for Accepts Subscriptions
            </summary>
        </member>
        <member name="T:BBC.Dna.ForumCommentsList">
            <summary>
            The ViewReadOnlyForumComments object
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumCommentsList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            The default constructor
            </summary>
            <param name="context">An object that supports the IInputContext interface. basePage</param>
        </member>
        <member name="M:BBC.Dna.ForumCommentsList.ProcessRequest">
            <summary>
            Used to process the current request.
            </summary>
        </member>
        <member name="M:BBC.Dna.ForumCommentsList.GetQueryParameters">
            <summary>
            Fills private members with querystring variables
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Vote">
            <summary>
            Class containing code for the DNA voting system based on 
            (i.e. copied from ) Mark Howitts C++ CVote class
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Vote.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Class holds the the methods pertaining to Voting
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Vote.ClearVote">
            <summary>
            Clears the votes data
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Vote.ResetVote">
            <summary>
            Resets the vote object and also changes to Database pointer if required.
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.Vote.IsVoteClosed">
            <summary>
            Checks to see if the current vote is closed or not
            </summary>
            <returns>Whether the vote is closed</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.CreateVote(System.Int32,System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Gets the pending and completed actions for a given club and returns the xml 
            to be inserted into the tree.
            </summary>
            <param name="type">The type of the vote. This defines if it lives on a club, article ..</param>
            <param name="closingDate">The date at which the voting stops. Can be NULL which means no closing date</param>
            <param name="ownerID"> The owner of the vote. This is OwnerMembers for Clubs for club votes!</param>
            <param name="useYesNoVoting">useYesNoVoting</param>
            <returns>The new VoteID for the created vote. 0 if the creation failed!</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.GetVote(System.Int32)">
            <summary>
            Gets and Populates the Vote given a VoteID
            </summary>
            <param name="voteID">The ID of the vote you want to get the details for.</param>
            <returns>true if details found. false if something failed</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.GetAllUsersWithResponse(System.Int32,System.Int32)">
            <summary>
            Gets all the users who have voted on a given vote with a given response.
            </summary>
            <param name="voteID">The ID of the vote you want to get the users for.</param>
            <param name="response">The Response to match for.</param>
            <returns>true if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.AddResponseToVote(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Adds a users response to a given vote.
            The ThreadID is defaulted to 0 and if not zero then this function
            assumes that we are adding votes to the threadvotes.
            </summary>
            <param name="voteID">The ID of the vote you want to add a response to</param>
            <param name="userID">the id of the user adding a response</param>
            <param name="BBCUID">The BBCID for the user. Can be empty if not known</param>
            <param name="response">The actual response </param>
            <param name="isVisible">a flag to say if the user wants to be anonymous</param>
            <param name="threadID">A ThreadID of a notice if voting on notices.</param>
            <returns>true if details found.</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.GetObjectIDFromVoteID(System.Int32,System.Int32)">
            <summary>
            Gets the object id from the voteid
            </summary>
            <param name="voteID">The ID of the vote you want to add a response to</param>
            <param name="type">The type of object you want to get the id of.</param>
            <returns>A return id of the object found.</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.AddVoteToClubTable(System.Int32,System.Int32)">
            <summary>
            Adds a vote to the clubsvotes table.
            </summary>
            <param name="voteID">The ID of the vote you want to add to the club table</param>
            <param name="clubID">the id of the club to add the vote to</param>
            <returns>ClubName</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.AddVoteToThreadTable(System.Int32,System.Int32)">
            <summary>
            Adds a vote to the threadsvotes table.
            </summary>
            <param name="voteID">The ID of the vote you want to add to the threadvotes table</param>
            <param name="threadID">The id of the thread to add the vote to</param>
        </member>
        <member name="M:BBC.Dna.Component.Vote.HasUserAlreadyVoted(System.Int32,System.Int32,System.String)">
            <summary>
            Checks to see if the user with a given ID and BBCUID has voted before.
            </summary>
            <param name="voteID">The id of the vote you want to check against.</param>
            <param name="userID">The id of the user you want to check for - Can be 0 for Non-Signed in users.</param>
            <param name="BBCUID">The UID for the current user.</param>
            <returns>Whether the user has already voted</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.IsUserAuthorisedToCreateVote(System.Int32,System.Int32,System.Int32)">
            <summary>
            States whether the given user can create a vote
            </summary>
            <param name="itemID">The id of the vote you want to check against.</param>
            <param name="voteType">The type of the vote. This defines if it lives on a club, article ..</param>
            <param name="userID">The id of the user you want to check for</param>
            <returns>Whether the user can create a vote</returns>
        </member>
        <member name="M:BBC.Dna.Component.Vote.RemoveUsersVote(System.Int32,System.Int32)">
            <summary>
            Removes the user vote for a given vote id
            </summary>
            <param name="voteID">The ID of the vote you want to remove the vote on.</param>
            <param name="userID">The Users id to remove the vote for.</param>
        </member>
        <member name="M:BBC.Dna.Component.Vote.GetVotesCastByUser(System.Int32,System.Int32)">
            <summary>
            Get all the items a user has voted for, fills out the Xml structure
            </summary>
            <param name="userID">id of the user whose votes are to be obtained</param>
            <param name="siteID">the id of the site - usually 16 for action network</param>
        </member>
        <member name="M:BBC.Dna.Component.Vote.FillVoteXml(System.Xml.XmlElement,System.Int32,System.Int32)">
            <summary>
            Fills in the Vote details in the xml for the club votes
            </summary>
            <param name="clubVotes">The xml block to fill in</param>
            <param name="voteID">The vote id </param>
            <param name="response">response of the vote to fill in yes=1 no=0</param>
            <returns>completes ok</returns>
        </member>
        <member name="P:BBC.Dna.Component.Vote.VoteID">
            <summary>
            VoteID Property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Vote.VoteName">
            <summary>
            Vote Name Property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Vote.Type">
            <summary>
            Type Property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Vote.CreatedDate">
            <summary>
            CreatedDate Property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Vote.ClosingDate">
            <summary>
            ClosingDate Property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Vote.IsYesNoVoting">
            <summary>
            IsYesNoVoting Property
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.Vote.OwnerID">
            <summary>
            OwnerID Property
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.Vote.VoteType">
            <summary>
            External VoteTpe
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Vote.VoteType.VOTETYPE_CLUB">
            <summary>
            Vote club type
            </summary>
        </member>
        <member name="F:BBC.Dna.Component.Vote.VoteType.VOTETYPE_NOTICE">
            <summary>
            Vote notice type
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.WatchList">
            <summary>
            WatchList - A derived DnaInputComponent object to get the watch list
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.WatchList.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the Watch List object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.WatchList.Initialise(System.Int32)">
            <summary>
            Generate the Watched User List for a particular user
            </summary>
            <param name="userID">User ID</param>
        </member>
        <member name="M:BBC.Dna.Component.WatchList.WatchingUsers(System.Int32,System.Int32)">
            <summary>
            Generate the Watching User List for a particular user
            </summary>
            <param name="userID">User ID</param>
            <param name="siteID">Site ID</param>
        </member>
        <member name="T:BBC.Dna.Component.WelcomePageBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.WelcomePageBuilder.#ctor(BBC.Dna.IInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BBC.Dna.Component.WelcomePageBuilder.ProcessRequest">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.IsNativeRenderRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.UserLoggedIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.UserLoginName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.DNAUserID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.DNAUserDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.CurrentSiteDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.CurrentSiteUrlName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.CurrentSiteID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.EditorOfSitesList">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.Component.WelcomePageBuilder.IsSuperUser">
            <summary>
            
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.WholePage">
            <summary>
            Base page component. Used to create the page for any new Dna page
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.WholePage.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
            <param name="context">A refernce to the current DnaHttpContext.</param>
        </member>
        <member name="M:BBC.Dna.Component.WholePage.InitialisePage(System.String)">
            <summary>
            Does the basic initialisation for the page. Creates the XML Document and adds the H2G2 root node with the current
            page type attribute. Also creates the Site xml
            </summary>
            <param name="pageType">The type of page that this component will represent. Used to set the TYPE attribute in the H2G2 Tag</param>
            <returns>True if ok, false if not</returns>
        </member>
        <member name="M:BBC.Dna.Component.WholePage.AddTimeForPage(System.Int32)">
            <summary>
            Adds a TIMEFORPAGE element with the specified number of milliseconds
            </summary>
            <param name="milliseconds">Number of milliseconds the request has taken</param>
        </member>
        <member name="M:BBC.Dna.Component.WholePage.AddComponent(BBC.Dna.IDnaComponent)">
            <summary>
            Add a component to the whole page.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:BBC.Dna.Component.WholePage.ProcessRequest">
            <summary>
            Process the request for the whole page.
            </summary>
        </member>
        <member name="T:BBC.Dna.User">
            <summary>
            The Dna User component
            </summary>
        </member>
        <member name="M:BBC.Dna.User.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BBC.Dna.User.CreateUser(System.Int32)">
            <summary>
            Gets the user details for the given user ID in the current site
            </summary>
            <param name="userID">ID of the user we want to get</param>
        </member>
        <member name="M:BBC.Dna.User.CreateUser">
            <summary>
            This is the function that creates the viewing user. It checks to ssee if the user is currently logged in
            and retrieves their details from SSO
            </summary>
        </member>
        <member name="M:BBC.Dna.User.IsEmailInBannedList(DnaIdentityWebServiceProxy.IDnaIdentityWebServiceProxy)">
            <summary>
            Checks to see if the current users email is in the banned email list
            </summary>
            <param name="signInComponent">The Signin component for this request</param>
            <returns>True if they are, false if not</returns>
            <remarks>If there are any problems encounted within the method, then it defaults by returning true for safety reasons.</remarks>
        </member>
        <member name="M:BBC.Dna.User.InitialiseProfileAPI(BBC.Dna.Utils.DnaCookie,DnaIdentityWebServiceProxy.IDnaIdentityWebServiceProxy@)">
            <summary>
            Initialises profile connection.
            </summary>
            <param name="cookie">Dna Cookie to login with</param>
            <param name="signInComponent">Initialised ProfileAPI</param>
        </member>
        <member name="M:BBC.Dna.User.TryLoginUser(DnaIdentityWebServiceProxy.IDnaIdentityWebServiceProxy@,System.Boolean@,System.Boolean@)">
            <summary>
            Method that tries to login in the user with a cookie.
            Requires Profile API to be initialised.
            </summary>
            <param name="signInComponent">Initialised SignIn Component</param>
            <param name="autoLogIn">Indicates whether user login was performed.</param>
            <param name="migrated">Indicate whether the user is migrating. This happens when we can't find the identity userid, but we can the legacy sso id</param>
        </member>
        <member name="M:BBC.Dna.User.GetDnaUserIDFromSignInID(DnaIdentityWebServiceProxy.IDnaIdentityWebServiceProxy,System.String)">
            <summary>
            Tries to find the userid dna id from their sign id
            </summary>
            <param name="signInComponent">The current signin component</param>
            <param name="overideSignInUserID">If this is greater than 0, then it is used instead of the signin objects userid</param>
        </member>
        <member name="M:BBC.Dna.User.ReadUserSSODetails(DnaIdentityWebServiceProxy.IDnaIdentityWebServiceProxy,System.String@,System.String@,System.String@,System.String@,System.String@,System.Int32@,System.String@)">
            <summary>
            <param name="signInComponent"></param>
            <param name="ssoLoginName"></param>
            <param name="ssoEmail"></param>
            <param name="ssoFirstNames"></param>
            <param name="ssoLastName"></param>
            <param name="identityUserID"></param>
            <param name="ssoUserID"></param>
            <param name="ssoDisplayName"></param>
            </summary>
        </member>
        <member name="M:BBC.Dna.User.SynchroniseWithProfile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <param name="ssoLoginName"></param>
            <param name="ssoEmail"></param>
            <param name="ssoFirstNames"></param>
            <param name="ssoLastName"></param>
            <param name="ssoDisplayName"></param>
            Synchronises DNA User Details with SSO Details.
            </summary>
        </member>
        <member name="M:BBC.Dna.User.CheckForExistingUDNGifSiteSuffixIsNullOrDisplayName">
            <summary>
            Checks if the site suffix is null or the same as their username and if we're on a site that uses AutoGen names	
            	Checks if one exists and goes and gets the users autogen nickname from the signin system
            </summary>
        </member>
        <member name="M:BBC.Dna.User.CheckAutoGeneratedName">
            <summary>
            Checks to see if the site currently uses auto gen names, and if so, syncs with identity
            </summary>
        </member>
        <member name="M:BBC.Dna.User.GetUserDetails">
            <summary>
            Gets the user data details and fills in the XML block
            </summary>
        </member>
        <member name="M:BBC.Dna.User.CreateNewUserFromId(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Guid)">
            <summary>
            Gets the user data details and fills in the XML block
            </summary>
        </member>
        <member name="M:BBC.Dna.User.GenerateUserXml(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Double,System.String,System.String,System.String,System.Int32,System.DateTime,System.Int32,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Assist in the creation of standardised User XML.
            Pass in the data to be represented in a standard way.
            </summary>
            <param name="userId">The user id to put in the XML</param>
            <param name="userName">The user Name</param>
            <param name="emailAddress">The user Email Address</param>
            <param name="firstNames">First Names</param>
            <param name="lastName">Last Name</param>
            <param name="status">Status of the User. -1 if they do not have a status</param>
            <param name="taxonomyNode">Their taxonomyNode</param>
            <param name="active">Whether they are active</param>
            <param name="zeitgeistScore">Their zeitgeist score if they have one</param>
            <param name="siteSuffix">The users site suffix</param>
            <param name="area">The users area</param>
            <param name="title">The users title for the site</param>
            <param name="journal">The id of the users journal</param>
            <param name="dateLastNotified">The date of the last notified</param>
            <param name="subQuota">The sub-editors allocation quota</param>
            <param name="allocations">The number of allocated articles</param>
            <param name="dateJoined">The date the user joined</param>
            <param name="forumID">Users forum ID</param>
            <param name="forumPostedTo">if the Users forum has been posted to</param>
            <param name="masthead">Users masthead</param>
            <param name="sinbin">if the user is sinbinned</param>
            <param name="identityUserId">Identity User ID to put in the XML</param>
            <returns>Xml Node set up with a uniform representation of User XML.</returns>
        </member>
        <member name="M:BBC.Dna.User.GenerateUserXml">
            <summary>
            Fills the User component with the User XML block from the internal Data
            </summary>
            <returns>True if sucessful or false</returns>
        </member>
        <member name="M:BBC.Dna.User.HasUserSetUserName">
            <summary>
            Checks to see if the user has set their username. It also takes into account of the nickname moderation queue
            </summary>
            <returns>True if the username has been set or is in the moderation queue, fasle if not or failed moderation</returns>
        </member>
        <member name="M:BBC.Dna.User.GetUserData">
            <summary>
            Method to get the User Data from the DB
            </summary>
        </member>
        <member name="M:BBC.Dna.User.GetUserGroupsData">
            <summary>
            Method to get the Users Groups from the DB
            </summary>
        </member>
        <member name="M:BBC.Dna.User.FillUserDataDictionary(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Fills the userData Dictionary with User DB data
            </summary>
            <param name="sp">Stored Procedure Data Reader object</param>
            <returns>True if sucessful or false</returns>
        </member>
        <member name="M:BBC.Dna.User.FillUserGroupsDataDictionary(BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Fills the userData Dictionary with Groups DB data
            </summary>
            <param name="sp">Stored Procedure Data Reader object</param>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.User.AddUserDataObject(System.String,BBC.Dna.Data.IDnaDataReader)">
            <summary>
            Helper function to fill the data dictionary with the data from the DB
            </summary>
            <param name="columnName">Name of the column to add</param>
            <param name="sp">Stored Procedure Data Reader object</param>
        </member>
        <member name="M:BBC.Dna.User.SetUsername(System.String)">
            <summary>
            Used when updating a user's record. Can only be called after calling BeginUpdateDetails
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:BBC.Dna.User.SetUserData(System.String,System.Object)">
            <summary>
            Updates a value within the user data dictionary
            </summary>
            <param name="name">name of variable</param>
            <param name="value">object value</param>
            <returns>True if add to update reader</returns>
        </member>
        <member name="M:BBC.Dna.User.SetEmail(System.String)">
            <summary>
            Set a new email address. Can be called only after BeginUpdateDetails
            </summary>
            <param name="email">New email address</param>
        </member>
        <member name="M:BBC.Dna.User.SetPreferredSkinInDB(System.String)">
            <summary>
            Sets the preferred skin value
            </summary>
            <param name="skin">Skin to set</param>
        </member>
        <member name="M:BBC.Dna.User.SetFirstNames(System.String)">
            <summary>
            Set a new FIRST NAMES field. Can be called only after BeginUpdateDetails
            </summary>
            <param name="firstNames">new first names</param>
        </member>
        <member name="M:BBC.Dna.User.SetLastName(System.String)">
            <summary>
            Set a new last name. Can be called only after BeginUpdateDetails
            </summary>
            <param name="lastName">new value of last name field</param>
        </member>
        <member name="M:BBC.Dna.User.SetPassword(System.String)">
            <summary>
            Set a new password field. Can be called only after BeginUpdateDetails. 
            Note that this password field is now redundant and does not reflect the SSO password.
            </summary>
            <param name="password">New password</param>
        </member>
        <member name="M:BBC.Dna.User.SetStatus(System.Int32)">
            <summary>
            Set a new user status. Can be called only after BeginUpdateDetails
            </summary>
            <param name="status">New status. 1 = ordinary user, 2 = superuser</param>
        </member>
        <member name="M:BBC.Dna.User.SetTitle(System.String)">
            <summary>
            Set a new value for the Title field. Can be called only after BeginUpdateDetails
            </summary>
            <param name="title">New title</param>
        </member>
        <member name="M:BBC.Dna.User.SetSiteSuffix(System.String)">
            <summary>
            Set a new SiteSuffix field. Can be called only after BeginUpdateDetails
            </summary>
            <param name="siteSuffix">New SiteSuffix</param>
        </member>
        <member name="M:BBC.Dna.User.SetAcceptSubscriptions(System.Boolean)">
            <summary>
            Sets whether a user accepts subscriptions to their content
            </summary>
            <param name="acceptSubscriptions">New SiteSuffix</param>
        </member>
        <member name="M:BBC.Dna.User.UpdateDetails">
            <summary>
            Call this method after calling BeginUpdateDetails and any of the Set methods.
            Will fail if you haven't called BeginUpdateDetails
            </summary>
        </member>
        <member name="M:BBC.Dna.User.BeginUpdateDetails">
            <summary>
            Call this method before calling any of the Set methods in order to update fields for this user
            Once all necessary Set methods have been called, call UpdateDetails to execute the update
            </summary>
        </member>
        <member name="M:BBC.Dna.User.ClearGroupMembership">
            <summary>
            Clear the group membership details for this user
            </summary>
        </member>
        <member name="M:BBC.Dna.User.SetIsGroupMember(System.String)">
            <summary>
            Set this user to be a member of the specified group.
            Note that this does not update the database. Call UpdateUsersGroupMembership to update the
            data in the database.
            </summary>
            <param name="groupName">Name of group to which to add user</param>
        </member>
        <member name="M:BBC.Dna.User.UpdateUsersGroupMembership(System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Update the groups of which this user is a member.
            </summary>
            <param name="userID">The id of the user you want to update</param>
            <param name="siteID">The id of the site you want to update the groups for</param>
            <param name="groups">The list of groups you want to add the user to</param>
        </member>
        <member name="M:BBC.Dna.User.AddUserToGroups(System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Adds the user to a list of groups for a specific site
            </summary>
            <param name="userID">The id of the user you want to update</param>
            <param name="siteID">The id of the site the groups belong to</param>
            <param name="groups">The list of groups you want to add the user to.</param>
            <remarks>Make sure you pass in a copy of the groups list, as this method will remove
            items from the list as it adds them to the database.</remarks>
        </member>
        <member name="M:BBC.Dna.User.GetSitesThisUserIsEditorOfXML">
            <summary>
            Get the sites of which this user is a editor or all if superuser.
            </summary>
        </member>
        <member name="M:BBC.Dna.User.AddUserXMLBlock(BBC.Dna.Data.IDnaDataReader,System.Int32,System.Xml.XmlNode)">
            <summary>
            Creates and adds the returned User Xml block to a given parent post node from the passed user parameters
            </summary>
            <param name="dataReader">Data reader object</param>
            <param name="userID">The users id</param>
            <param name="parent">The parent Node to add the user xml to</param>
            <returns>XmlNode Containing user XML from the stored procedure</returns>
        </member>
        <member name="M:BBC.Dna.User.AddPrefixedUserXMLBlock(BBC.Dna.Data.IDnaDataReader,System.Int32,System.String,System.Xml.XmlNode)">
            <summary>
            Creates and adds the returned User Xml block to a given parent post node from the passed user parameters with a prefix
            ie the field name of OwnerUserName, OwnerFirstNames
            </summary>
            <param name="dataReader">Data reader object</param>
            <param name="userID">The users id</param>
            <param name="prefix">The prefix of the field names for a different user in the same result set</param>
            <param name="parent">The parent Node to add the user xml to</param>
            <returns>XmlNode Containing user XML from the stored procedure</returns>
        </member>
        <member name="M:BBC.Dna.User.HasSpecialEditPermissions(System.Int32)">
            <summary>
            Checks to see if the current user has special edit permissions for the given article
            </summary>
            <param name="h2g2ID">Id of the article you what to check for</param>
            <returns>True if they have, false if not</returns>
        </member>
        <member name="M:BBC.Dna.User.ConvertUser">
            <summary>
            Converts BBC.Dna.User to BBC.Dna.Objects.User
            A hack until user objects are unified.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BBC.Dna.User.Journal">
            <summary>
            Journal forum ID
            </summary>
        </member>
        <member name="P:BBC.Dna.User.TeamID">
            <summary>
            Team ID
            </summary>
        </member>
        <member name="P:BBC.Dna.User.UserName">
            <summary>
            This is the DNA Username, not to be confused with the ProfileAPI login name
            (which is called username in the profile API database).
            </summary>
        </member>
        <member name="P:BBC.Dna.User.Status">
            <summary>
            Returns the users status
            </summary>
        </member>
        <member name="P:BBC.Dna.User.LoginName">
            <summary>
            Login Name property
            </summary>
        </member>
        <member name="P:BBC.Dna.User.FirstNames">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.LastName">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.UserID">
            <summary>
            UserID Property
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IdentityUserId">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.UserLoggedIn">
            <summary>
            UserLoggedIn Property
            </summary>
        </member>
        <member name="P:BBC.Dna.User.Email">
            <summary>
            Users EMail Property
            </summary>
        </member>
        <member name="P:BBC.Dna.User.AcceptSubscriptions">
            <summary>
            Accept Subscriptions Property - Idicates whether user allows subscriptions to their content.
            </summary>
        </member>
        <member name="P:BBC.Dna.User.BbcUid">
            <summary>
            Gets the users BBCUID value
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsSuperUser">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsEditor">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsNotable">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsScout">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsModerator">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsSubEditor">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsReferee">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsPreModerated">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsPostModerated">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsBanned">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsTester">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsHost">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsAutoSinBin">
            <summary>
            <see cref="T:BBC.Dna.IUser"/>
            </summary>
        </member>
        <member name="P:BBC.Dna.User.ShowFullDetails">
            <summary>
            ShowFullDetails Property
            </summary>
        </member>
        <member name="P:BBC.Dna.User.PreferredSkin">
            <summary>
            A users preferred skin
            </summary>
        </member>
        <member name="P:BBC.Dna.User.UserData">
            <summary>
            Public access to the user data dictionary object
            </summary>
        </member>
        <member name="P:BBC.Dna.User.Title">
            <summary>
            Gets the users title
            </summary>
        </member>
        <member name="P:BBC.Dna.User.Masthead">
            <summary>
            
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsGuardian">
            <summary>
            Is the user a member of the guardian group
            </summary>
        </member>
        <member name="P:BBC.Dna.User.IsVolunteer">
            <summary>
            True if the user is a member of one of the volunteer groups
            </summary>
        </member>
        <member name="T:BBC.Dna.Component.WhosOnline">
            <summary>
            WhosOnline - A derived DnaInputComponent object to get whos online
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.WhosOnline.#ctor(BBC.Dna.IInputContext)">
            <summary>
            Default Constructor for the WhosOnline object
            </summary>
        </member>
        <member name="M:BBC.Dna.Component.WhosOnline.Initialise(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generate the Whos Online list
            </summary>
            <param name="orderBy">Ordering parmeter</param>
            <param name="siteID">The site </param>
            <param name="currentSiteOnly">Whether to only include people from this site</param>
            <param name="fetchFromCache">Whether to get it from the cache</param>
        </member>
        <member name="T:BBC.Dna.XmlTransformer">
            <summary>
            A transformer which can output XML results. Suitable for RSS feeds
            </summary>
        </member>
        <member name="M:BBC.Dna.XmlTransformer.#ctor(BBC.Dna.IOutputContext)">
            <summary>
            Constructor for the XML transformer.
            </summary>
            <param name="outputContext">Output context of the request.</param>
        </member>
        <member name="M:BBC.Dna.XmlTransformer.TransformXML(BBC.Dna.IDnaComponent)">
            <summary>
            Transforms the page into an XML format. Uses XSLT but will output using a correct mimetype
            </summary>
            <param name="component">Component (probably a WholePage) to transform</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:BBC.Dna.XmlTransformer.GetCachedOutput">
            <summary>
            Get the cached copy of this XML request
            </summary>
            <returns>string containing the cached output if it exists in the cache. null otherwise.</returns>
        </member>
        <member name="M:BBC.Dna.XmlTransformer.IsCachedOutputAvailable">
            <summary>
            <see cref="T:BBC.Dna.IDnaTransformer"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BBC.Dna.XmlTransformer.WriteCachedOutput">
            <summary>
            <see cref="T:BBC.Dna.IDnaTransformer"/>
            </summary>
        </member>
        <member name="T:BBC.Dna.XsltException">
            <summary>
            Gives more information regarding xslt exceptions eg filename of xslt file which failed to load.
            </summary>
        </member>
        <member name="M:BBC.Dna.XsltException.#ctor(System.String,System.Exception)">
            <summary>
            Message constructor
            </summary>
            <param name="message">The description of the problem that caused the exception</param>
            <param name="innerException">Original Exception</param>
        </member>
    </members>
</doc>
