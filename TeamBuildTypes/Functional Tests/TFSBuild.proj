<?xml version="1.0" encoding="utf-8"?>
<!-- DO NOT EDIT the project element - the ToolsVersion specified here does not prevent the solutions 
     and projects in the SolutionToBuild item group from targeting other versions of the .NET framework. 
     -->
<Project DefaultTargets="DesktopBuild" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">

  <!-- Do not edit this -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\TeamBuild\Microsoft.TeamFoundation.Build.targets" />

  <ProjectExtensions>

    <!-- Team Foundation Build Version - DO NOT CHANGE -->
    <ProjectFileVersion>2</ProjectFileVersion>

    <!--  DESCRIPTION
     This property is included only for backwards compatibility. The description of a build definition 
     is now stored in the database. For compatibility with V1 clients, keep this property in sync with 
     the value in the database.
    -->
    <Description>Runs all functional tests against new builds</Description>

    <!--  BUILD MACHINE
     This property is included only for backwards compatibility. The default machine used for a build 
     definition is now stored in the database, as the MachineName property of the definition's 
     DefaultBuildAgent. For compatibility with V1 clients, keep this property in sync with the value 
     in the database.
    -->
    <BuildMachine>vp-test-dna-1</BuildMachine>

  </ProjectExtensions>

  <PropertyGroup>

    <!--  TEAM PROJECT
     This property is included only for backwards compatibility. The team project for a build 
     definition is now stored in the database. For compatibility with V1 clients, keep this property in 
     sync with the value in the database.
    -->
    <TeamProject>User Services</TeamProject>

    <!--  BUILD DIRECTORY
     This property is included only for backwards compatibility. The build directory used for a build 
     definition is now stored in the database, as the BuildDirectory property of the definition's 
     DefaultBuildAgent. For compatibility with V1 clients, keep this property in sync with the value 
     in the database.
    -->
    <BuildDirectoryPath>c:\B\User Services\Functional Tests</BuildDirectoryPath>

    <!--  DROP LOCATION
     This property is included only for backwards compatibility. The drop location used for a build 
     definition is now stored in the database. For compatibility with V1 clients, keep this property 
     in sync with the value in the database.
    -->
    <DropLocation>\\UNKNOWN\drops</DropLocation>

    <!--  TESTING
     Set this flag to enable/disable running tests as a post-compilation build step.
    -->
    <RunTest>true</RunTest>

    <!--  CODE ANALYSIS
     Set this property to enable/disable running code analysis. Valid values for this property are 
     Default, Always and Never.

         Default - Perform code analysis as per the individual project settings
         Always  - Always perform code analysis irrespective of project settings
         Never   - Never perform code analysis irrespective of project settings
     -->
    <RunCodeAnalysis>Never</RunCodeAnalysis>

    <!-- Additional Properties -->

    <!--  WorkItemType
     The type of the work item created on a build failure. 
     -->
    <WorkItemType>Bug</WorkItemType>

    <!--  WorkItemFieldValues
     Fields and values of the work item created on a build failure.
     
     Note: Use reference names for fields if you want the build to be resistant to field name 
     changes. Reference names are language independent while friendly names are changed depending 
     on the installed language. For example, "System.Reason" is the reference name for the "Reason" 
     field.
     -->
    <WorkItemFieldValues>System.Reason=Build Failure;System.Description=Start the build using Team Build</WorkItemFieldValues>

    <!--  WorkItemTitle
     Title of the work item created on build failure.
     -->
    <WorkItemTitle>Build failure in build:</WorkItemTitle>

    <!--  DescriptionText
     History comment of the work item created on a build failure. 
     -->
    <DescriptionText>This work item was created by Team Build on a build failure.</DescriptionText>

    <!--  BuildLogText
     Additional comment text for the work item created on a build failure.
     -->
    <BuildlogText>The build log file is at:</BuildlogText>

    <!--  ErrorWarningLogText
     Additional comment text for the work item created on a build failure. 
     This text will only be added if there were errors or warnings.
     -->
    <ErrorWarningLogText>The errors/warnings log file is at:</ErrorWarningLogText>

    <!--  UpdateAssociatedWorkItems
     Set this flag to enable/disable updating associated workitems on a successful build.
     -->
    <UpdateAssociatedWorkItems>true</UpdateAssociatedWorkItems>

    <!--  AdditionalVCOverrides
     Additional text for the VCOverrides file generated for VC++ projects.
     -->
    <AdditionalVCOverrides></AdditionalVCOverrides>

    <!--  CustomPropertiesForClean
     Custom properties to pass to the MSBuild task while calling the "Clean" target for all solutions.
     The format should be: PropertyName1=value1;PropertyName2=value2;...
     -->
    <CustomPropertiesForClean></CustomPropertiesForClean>

    <!--  CustomPropertiesForBuild
     Custom properties to pass to the MSBuild task while calling the default targets for all solutions.
     The format should be: Property1=value1;Property2=value2;...  To pass custom properties to
     individual solutions, use the Properties metadata item of the SolutionToBuild ItemGroup.
     -->
    <CustomPropertiesForBuild></CustomPropertiesForBuild>

    <!-- Test failed as build fail... -->
    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>

  </PropertyGroup>

  <ItemGroup>
    <!--  SOLUTIONS
     The paths of the solutions to build. Paths can be server paths or local paths, but server paths
     relative to the location of this file are highly recommended.  To add/delete solutions, edit this 
     ItemGroup. For example, to add a solution MySolution.sln, add the following line:
         
         <SolutionToBuild Include="$(BuildProjectFolderPath)/path/MySolution.sln" />

     To change the order in which the solutions are built, modify the order in which the solutions 
     appear below.
     
     To call a target (or targets) other than the default, add a metadata item named Targets.  To pass 
     custom properties to the solution, add a metadata item named Properties.  For example, to call 
     the targets MyCustomTarget1 and MyCustomTarget2, passing in properties Property1 and Property2, 
     add the following:
         
         <SolutionToBuild Include="$(BuildProjectFolderPath)/path/MySolution.sln">
             <Targets>MyCustomTarget1;MyCustomTarget2</Targets>
             <Properties>Property1=Value1;Property2=Value2</Properties>
         </SolutionToBuild>
    -->
    <SolutionToBuild Include="$(BuildProjectFolderPath)/../../Main/UserServices.sln">
      <Targets></Targets>
      <Properties></Properties>
    </SolutionToBuild>
    <!--<SolutionToBuild Include="$(BuildProjectFolderPath)/../../Main/Source/Databases/The Guide/TheGuide.sln">
      <Targets></Targets>
      <Properties></Properties>
    </SolutionToBuild>-->

  </ItemGroup>

  <ItemGroup>
    <!--  CONFIGURATIONS
     The list of configurations to build. To add/delete configurations, edit this value. For example, 
     to add a new configuration, add the following lines:
         
         <ConfigurationToBuild Include="Debug|x86">
             <FlavorToBuild>Debug</FlavorToBuild>
             <PlatformToBuild>x86</PlatformToBuild>
         </ConfigurationToBuild>

     The Include attribute value should be unique for each ConfigurationToBuild node.
    -->
    <ConfigurationToBuild Include="Debug|Any Cpu">
      <FlavorToBuild>Debug</FlavorToBuild>
      <PlatformToBuild>Any Cpu</PlatformToBuild>
    </ConfigurationToBuild>
  </ItemGroup>

  <ItemGroup Condition=" '$(Platform)' == 'Any CPU' ">
    <TestContainer Include="$(OutDir)\%2a%2a\%2aTest%2a.dll" />
  </ItemGroup>
  <PropertyGroup>
    <RunConfigFile>$(SolutionRoot)\Main\bbc.dna.tests.testrunconfig</RunConfigFile>
  </PropertyGroup>


  <PropertyGroup>
    <!-- TEST ARGUMENTS
     If the RunTest property is set to true, then particular tests within a
     metadata file or test container may be specified here.  This is
     equivalent to the /test switch on mstest.exe.

     <TestNames>BVT;HighPriority</TestNames>
    -->

  </PropertyGroup>

  <ItemGroup>
    <!--  ADDITIONAL REFERENCE PATH
     The list of additional reference paths to use while resolving references. For example:
     
         <AdditionalReferencePath Include="C:\MyFolder\" />
         <AdditionalReferencePath Include="C:\MyFolder2\" />
    -->
  </ItemGroup>

  <ItemGroup>
    <WebSites Include="$(BinariesRoot)\Debug\_PublishedWebsites\**\*.*"></WebSites>
    <Binaries Include="$(BinariesRoot)\Debug\*.*" Exclude="$(BinariesRoot)$(Platform)$(Configuration)\debug\*_Accessor.dll,$(BinariesRoot)$(Platfom)$(Configuration)\debug\*.instr.pdb"></Binaries>
    <Skins Include="$(SolutionRoot)\Main\Source\Skins\**\*.*" Exclude="$(SolutionRoot)\Main\Source\Skins\base\site.xsl;$(SolutionRoot)\Main\Source\Skins\base\lists.xsl;$(SolutionRoot)\Main\Source\Skins\base\sitemap.xml;$(SolutionRoot)\Main\Source\Skins\common\configuration.xsl" ></Skins>
  </ItemGroup>

  <!-- Restore smallguide using the backup created by Team City.  Do this at the very beginning of the build process -->
  <Target Name="BeforeEndToEndIteration">
    <Message Text="Inside BeforeEndToEndIteration *********"/>
    <Message Text="Restoring SmallGuide from the TeamCity backup" />
    <Exec Command="&quot;$(SolutionRoot)\ExecSqlScript.bat&quot; &quot;$(SolutionRoot)\RestoreSmallguideFromTeamCityBackup.sql&quot; " />
  </Target>

  <Target Name="BeforeClean">
    <!-- IISReset to release anything holding onto any resources. -->
    <Exec Command="c:\WINDOWS\system32\iisreset" Timeout="10000" IgnoreExitCode="true"></Exec>
    
    <!-- stop both websites -->
    <Exec Command="iisweb /stop h2g2" Timeout="10000" IgnoreExitCode="true"></Exec>
    <Exec Command="iisweb /stop h2g2UnitTesting" Timeout="10000" IgnoreExitCode="true"></Exec>
  </Target>
  
  <Target Name="BeforeTest">
    <!-- Create the build steps which start in mode "Running" -->
    <BuildStep TeamFoundationServerUrl="$(TeamFoundationServerUrl)" BuildUri="$(BuildUri)" Message="Deploying build to test server" Condition=" '$(IsDesktopBuild)' != 'true' ">
      <!-- Return the ID of the tasks and assigned it to "PropertyName" -->
      <Output TaskParameter="Id" PropertyName="PostBuildStepId" />
    </BuildStep>

    <!-- stop website to copy ripley -->
    <Exec Command="iisweb /stop h2g2UnitTesting" Timeout="10000" IgnoreExitCode="true"></Exec>

    <Exec Command="net stop &quot;memcached server&quot;" Timeout="10000" ContinueOnError="true"></Exec>

    <Message Text="WebSites files: $(BinariesRoot)\Debug\_PublishedWebsites"></Message>
    <!-- Copy Websites to location -->
    <Copy SourceFiles="@(WebSites)" DestinationFolder="C:\Inetpub\wwwroot\h2g2UnitTesting\dna\%(RecursiveDir)" SkipUnchangedFiles="false"  ContinueOnError="false"/>

    <!-- Copy Dlls into dnapages for tests... -->
    <Copy SourceFiles="@(Binaries)" DestinationFolder="C:\Inetpub\wwwroot\h2g2UnitTesting\dna\BBC.DNA.Dnapages\bin\" SkipUnchangedFiles="false"  ContinueOnError="false"/>

    <!-- Copy ModerationApi to int drop location -->
    <Copy SourceFiles="@(Skins)" DestinationFolder="C:\Inetpub\wwwroot\h2g2UnitTesting\skins\%(RecursiveDir)" SkipUnchangedFiles="false"  ContinueOnError="false"/>

    <Exec Command="CMD &quot;C:\TFSScripts\UnloadTestWeb.bat&quot;" Timeout="10000"></Exec>

    <!-- run filter.reg -->
    <Exec Command="regedit /s &quot;$(SolutionRoot)\Main\filter.reg&quot;"></Exec>

    <Exec Command="net start &quot;memcached server&quot;" Timeout="10000" ContinueOnError="true"></Exec>

    <!-- start website to copy ripley -->
    <Exec Command="iisweb /start h2g2UnitTesting" Timeout="10000"></Exec>



    <!-- When everything is done, change the status of the task to "Succeeded" -->
    <BuildStep TeamFoundationServerUrl="$(TeamFoundationServerUrl)" BuildUri="$(BuildUri)" Id="$(PostBuildStepId)" Status="Succeeded" Condition=" '$(IsDesktopBuild)' != 'true' " />

    <!-- If an error occurs during the process, run the target "PostBuildStepFailed" -->
    <OnError ExecuteTargets="FailedBeforeTest" />
  </Target>

  <Target Name="FailedBeforeTest">
    <!-- start website to copy ripley -->
    <Exec Command="iisweb /start h2g2UnitTesting" Timeout="10000"></Exec>
    <!-- Change the status of the task to "Failed" -->
    <BuildStep TeamFoundationServerUrl="$(TeamFoundationServerUrl)" BuildUri="$(BuildUri)" Id="$(PostBuildStepId)" Status="Failed" Condition=" '$(IsDesktopBuild)' != 'true' " />
  </Target>
</Project>
